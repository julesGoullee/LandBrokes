{
  "contractName": "BurnableToken",
  "abi": [
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        },
        {
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "burner",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "0x608060405234801561001057600080fd5b506105cb806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806342966c681161006657806342966c681461015457806370a0823114610173578063a457c2d714610199578063a9059cbb146101c5578063dd62ed3e146101f157610093565b8063095ea7b31461009857806318160ddd146100d857806323b872dd146100f25780633950935114610128575b600080fd5b6100c4600480360360408110156100ae57600080fd5b506001600160a01b03813516906020013561021f565b604080519115158252519081900360200190f35b6100e0610235565b60408051918252519081900360200190f35b6100c46004803603606081101561010857600080fd5b506001600160a01b0381358116916020810135909116906040013561023b565b6100c46004803603604081101561013e57600080fd5b506001600160a01b038135169060200135610292565b6101716004803603602081101561016a57600080fd5b50356102ce565b005b6100e06004803603602081101561018957600080fd5b50356001600160a01b03166102e8565b6100c4600480360360408110156101af57600080fd5b506001600160a01b038135169060200135610303565b6100c4600480360360408110156101db57600080fd5b506001600160a01b03813516906020013561033f565b6100e06004803603604081101561020757600080fd5b506001600160a01b038135811691602001351661034c565b600061022c338484610377565b50600192915050565b60025490565b60006102488484846103ff565b6001600160a01b038416600090815260016020908152604080832033808552925290912054610288918691610283908663ffffffff6104ca16565b610377565b5060019392505050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161022c918590610283908663ffffffff6104df16565b600081116102db57600080fd5b6102e533826104f8565b50565b6001600160a01b031660009081526020819052604090205490565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161022c918590610283908663ffffffff6104ca16565b600061022c3384846103ff565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b03821661038a57600080fd5b6001600160a01b03831661039d57600080fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b03821661041257600080fd5b6001600160a01b03831660009081526020819052604090205461043b908263ffffffff6104ca16565b6001600160a01b038085166000908152602081905260408082209390935590841681522054610470908263ffffffff6104df16565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000828211156104d957600080fd5b50900390565b6000828201838110156104f157600080fd5b9392505050565b6001600160a01b03821661050b57600080fd5b60025461051e908263ffffffff6104ca16565b6002556001600160a01b03821660009081526020819052604090205461054a908263ffffffff6104ca16565b6001600160a01b038316600081815260208181526040808320949094558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a3505056fea165627a7a7230582028a1d664e48cf5461590a4656ead307cc964c29f00e7a358d6fcba6d8bc2a5980029",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c806342966c681161006657806342966c681461015457806370a0823114610173578063a457c2d714610199578063a9059cbb146101c5578063dd62ed3e146101f157610093565b8063095ea7b31461009857806318160ddd146100d857806323b872dd146100f25780633950935114610128575b600080fd5b6100c4600480360360408110156100ae57600080fd5b506001600160a01b03813516906020013561021f565b604080519115158252519081900360200190f35b6100e0610235565b60408051918252519081900360200190f35b6100c46004803603606081101561010857600080fd5b506001600160a01b0381358116916020810135909116906040013561023b565b6100c46004803603604081101561013e57600080fd5b506001600160a01b038135169060200135610292565b6101716004803603602081101561016a57600080fd5b50356102ce565b005b6100e06004803603602081101561018957600080fd5b50356001600160a01b03166102e8565b6100c4600480360360408110156101af57600080fd5b506001600160a01b038135169060200135610303565b6100c4600480360360408110156101db57600080fd5b506001600160a01b03813516906020013561033f565b6100e06004803603604081101561020757600080fd5b506001600160a01b038135811691602001351661034c565b600061022c338484610377565b50600192915050565b60025490565b60006102488484846103ff565b6001600160a01b038416600090815260016020908152604080832033808552925290912054610288918691610283908663ffffffff6104ca16565b610377565b5060019392505050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161022c918590610283908663ffffffff6104df16565b600081116102db57600080fd5b6102e533826104f8565b50565b6001600160a01b031660009081526020819052604090205490565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161022c918590610283908663ffffffff6104ca16565b600061022c3384846103ff565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b03821661038a57600080fd5b6001600160a01b03831661039d57600080fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b03821661041257600080fd5b6001600160a01b03831660009081526020819052604090205461043b908263ffffffff6104ca16565b6001600160a01b038085166000908152602081905260408082209390935590841681522054610470908263ffffffff6104df16565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000828211156104d957600080fd5b50900390565b6000828201838110156104f157600080fd5b9392505050565b6001600160a01b03821661050b57600080fd5b60025461051e908263ffffffff6104ca16565b6002556001600160a01b03821660009081526020819052604090205461054a908263ffffffff6104ca16565b6001600160a01b038316600081815260208181526040808320949094558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a3505056fea165627a7a7230582028a1d664e48cf5461590a4656ead307cc964c29f00e7a358d6fcba6d8bc2a5980029",
  "sourceMap": "269:384:8:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;269:384:8;;;;;;;",
  "deployedSourceMap": "269:384:8:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;269:384:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2721:145:16;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;2721:145:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;916:89;;;:::i;:::-;;;;;;;;;;;;;;;;3329:224;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;3329:224:16;;;;;;;;;;;;;;;;;:::i;4067:200::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;4067:200:16;;;;;;;;:::i;539:111:8:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;539:111:8;;:::i;:::-;;1217:104:16;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1217:104:16;-1:-1:-1;;;;;1217:104:16;;:::i;4786:210::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;4786:210:16;;;;;;;;:::i;1948:137::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;1948:137:16;;;;;;;;:::i;1652:129::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;1652:129:16;;;;;;;;;;:::i;2721:145::-;2786:4;2802:36;2811:10;2823:7;2832:5;2802:8;:36::i;:::-;-1:-1:-1;2855:4:16;2721:145;;;;:::o;916:89::-;986:12;;916:89;:::o;3329:224::-;3408:4;3424:26;3434:4;3440:2;3444:5;3424:9;:26::i;:::-;-1:-1:-1;;;;;3487:14:16;;;;;;:8;:14;;;;;;;;3475:10;3487:26;;;;;;;;;3460:65;;3469:4;;3487:37;;3518:5;3487:37;:30;:37;:::i;:::-;3460:8;:65::i;:::-;-1:-1:-1;3542:4:16;3329:224;;;;;:::o;4067:200::-;4172:10;4147:4;4193:20;;;:8;:20;;;;;;;;-1:-1:-1;;;;;4193:29:16;;;;;;;;;;4147:4;;4163:76;;4184:7;;4193:45;;4227:10;4193:45;:33;:45;:::i;539:111:8:-;604:1;595:6;:10;587:19;;;;;;617:25;623:10;635:6;617:5;:25::i;:::-;539:111;:::o;1217:104:16:-;-1:-1:-1;;;;;1298:16:16;1272:7;1298:16;;;;;;;;;;;;1217:104::o;4786:210::-;4896:10;4871:4;4917:20;;;:8;:20;;;;;;;;-1:-1:-1;;;;;4917:29:16;;;;;;;;;;4871:4;;4887:81;;4908:7;;4917:50;;4951:15;4917:50;:33;:50;:::i;1948:137::-;2009:4;2025:32;2035:10;2047:2;2051:5;2025:9;:32::i;1652:129::-;-1:-1:-1;;;;;1750:15:16;;;1724:7;1750:15;;;:8;:15;;;;;;;;:24;;;;;;;;;;;;;1652:129::o;6831:248::-;-1:-1:-1;;;;;6923:21:16;;6915:30;;;;;;-1:-1:-1;;;;;6963:19:16;;6955:28;;;;;;-1:-1:-1;;;;;6994:15:16;;;;;;;:8;:15;;;;;;;;:24;;;;;;;;;;;;;:32;;;7041:31;;;;;;;;;;;;;;;;;6831:248;;;:::o;5215:256::-;-1:-1:-1;;;;;5302:16:16;;5294:25;;;;;;-1:-1:-1;;;;;5348:15:16;;:9;:15;;;;;;;;;;;:26;;5368:5;5348:26;:19;:26;:::i;:::-;-1:-1:-1;;;;;5330:15:16;;;:9;:15;;;;;;;;;;;:44;;;;5400:13;;;;;;;:24;;5418:5;5400:24;:17;:24;:::i;:::-;-1:-1:-1;;;;;5384:13:16;;;:9;:13;;;;;;;;;;;;:40;;;;5439:25;;;;;;;5384:13;;5439:25;;;;;;;;;;;;;5215:256;;;:::o;1211:145:14:-;1269:7;1301:1;1296;:6;;1288:15;;;;;;-1:-1:-1;1325:5:14;;;1211:145::o;1439:::-;1497:7;1528:5;;;1551:6;;;;1543:15;;;;;;1576:1;1439:145;-1:-1:-1;;;1439:145:14:o;6303:263:16:-;-1:-1:-1;;;;;6377:21:16;;6369:30;;;;;;6425:12;;:23;;6442:5;6425:23;:16;:23;:::i;:::-;6410:12;:38;-1:-1:-1;;;;;6479:18:16;;:9;:18;;;;;;;;;;;:29;;6502:5;6479:29;:22;:29;:::i;:::-;-1:-1:-1;;;;;6458:18:16;;:9;:18;;;;;;;;;;;:50;;;;6523:36;;;;;;;6458:9;;6523:36;;;;;;;;;;;6303:263;;:::o",
  "source": "pragma solidity 0.5.7;\n\nimport \"../../node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\";\nimport \"../../node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\";\n\n/**\n * @title Burnable Token\n * @dev A token that can be irreversibly burned.\n */\ncontract BurnableToken is ERC20 {\n\n  using SafeMath for uint256;\n  using SafeMath for int256;\n\n    event Burn(address indexed burner, uint256 value);\n\n    /**\n     * @dev Burns a specified amount of tokens.\n     * @param _value The amount of tokens to burn.\n     */\n    function burn(uint256 _value) public {\n\n        require(_value > 0);\n\n        _burn(msg.sender, _value);\n\n    }\n\n}\n",
  "sourcePath": "/home/stefan/Work/RobInTheHood/chain/bankContracts/contracts/mana/BurnableToken.sol",
  "ast": {
    "absolutePath": "/home/stefan/Work/RobInTheHood/chain/bankContracts/contracts/mana/BurnableToken.sol",
    "exportedSymbols": {
      "BurnableToken": [
        2685
      ]
    },
    "id": 2686,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 2650,
        "literals": [
          "solidity",
          "0.5",
          ".7"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:22:8"
      },
      {
        "absolutePath": "/home/stefan/Work/RobInTheHood/chain/bankContracts/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol",
        "file": "../../node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol",
        "id": 2651,
        "nodeType": "ImportDirective",
        "scope": 2686,
        "sourceUnit": 3724,
        "src": "24:82:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/stefan/Work/RobInTheHood/chain/bankContracts/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol",
        "file": "../../node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol",
        "id": 2652,
        "nodeType": "ImportDirective",
        "scope": 2686,
        "sourceUnit": 3232,
        "src": "107:78:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 2653,
              "name": "ERC20",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3723,
              "src": "295:5:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20_$3723",
                "typeString": "contract ERC20"
              }
            },
            "id": 2654,
            "nodeType": "InheritanceSpecifier",
            "src": "295:5:8"
          }
        ],
        "contractDependencies": [
          3723,
          3953
        ],
        "contractKind": "contract",
        "documentation": "@title Burnable Token\n@dev A token that can be irreversibly burned.",
        "fullyImplemented": true,
        "id": 2685,
        "linearizedBaseContracts": [
          2685,
          3723,
          3953
        ],
        "name": "BurnableToken",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 2657,
            "libraryName": {
              "contractScope": null,
              "id": 2655,
              "name": "SafeMath",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3231,
              "src": "312:8:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_SafeMath_$3231",
                "typeString": "library SafeMath"
              }
            },
            "nodeType": "UsingForDirective",
            "src": "306:27:8",
            "typeName": {
              "id": 2656,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "325:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "id": 2660,
            "libraryName": {
              "contractScope": null,
              "id": 2658,
              "name": "SafeMath",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3231,
              "src": "342:8:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_SafeMath_$3231",
                "typeString": "library SafeMath"
              }
            },
            "nodeType": "UsingForDirective",
            "src": "336:26:8",
            "typeName": {
              "id": 2659,
              "name": "int256",
              "nodeType": "ElementaryTypeName",
              "src": "355:6:8",
              "typeDescriptions": {
                "typeIdentifier": "t_int256",
                "typeString": "int256"
              }
            }
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 2666,
            "name": "Burn",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 2665,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2662,
                  "indexed": true,
                  "name": "burner",
                  "nodeType": "VariableDeclaration",
                  "scope": 2666,
                  "src": "379:22:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2661,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "379:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2664,
                  "indexed": false,
                  "name": "value",
                  "nodeType": "VariableDeclaration",
                  "scope": 2666,
                  "src": "403:13:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2663,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "403:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "378:39:8"
            },
            "src": "368:50:8"
          },
          {
            "body": {
              "id": 2683,
              "nodeType": "Block",
              "src": "576:74:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 2674,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 2672,
                          "name": "_value",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2668,
                          "src": "595:6:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 2673,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "604:1:8",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "595:10:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 2671,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        4379,
                        4380
                      ],
                      "referencedDeclaration": 4379,
                      "src": "587:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 2675,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "587:19:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2676,
                  "nodeType": "ExpressionStatement",
                  "src": "587:19:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 2678,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4376,
                          "src": "623:3:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 2679,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "623:10:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 2680,
                        "name": "_value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2668,
                        "src": "635:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 2677,
                      "name": "_burn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3654,
                      "src": "617:5:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 2681,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "617:25:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2682,
                  "nodeType": "ExpressionStatement",
                  "src": "617:25:8"
                }
              ]
            },
            "documentation": "@dev Burns a specified amount of tokens.\n@param _value The amount of tokens to burn.",
            "id": 2684,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "burn",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2669,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2668,
                  "name": "_value",
                  "nodeType": "VariableDeclaration",
                  "scope": 2684,
                  "src": "553:14:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2667,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "553:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "552:16:8"
            },
            "returnParameters": {
              "id": 2670,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "576:0:8"
            },
            "scope": 2685,
            "src": "539:111:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 2686,
        "src": "269:384:8"
      }
    ],
    "src": "0:654:8"
  },
  "legacyAST": {
    "absolutePath": "/home/stefan/Work/RobInTheHood/chain/bankContracts/contracts/mana/BurnableToken.sol",
    "exportedSymbols": {
      "BurnableToken": [
        2685
      ]
    },
    "id": 2686,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 2650,
        "literals": [
          "solidity",
          "0.5",
          ".7"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:22:8"
      },
      {
        "absolutePath": "/home/stefan/Work/RobInTheHood/chain/bankContracts/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol",
        "file": "../../node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol",
        "id": 2651,
        "nodeType": "ImportDirective",
        "scope": 2686,
        "sourceUnit": 3724,
        "src": "24:82:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/stefan/Work/RobInTheHood/chain/bankContracts/node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol",
        "file": "../../node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol",
        "id": 2652,
        "nodeType": "ImportDirective",
        "scope": 2686,
        "sourceUnit": 3232,
        "src": "107:78:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 2653,
              "name": "ERC20",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3723,
              "src": "295:5:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20_$3723",
                "typeString": "contract ERC20"
              }
            },
            "id": 2654,
            "nodeType": "InheritanceSpecifier",
            "src": "295:5:8"
          }
        ],
        "contractDependencies": [
          3723,
          3953
        ],
        "contractKind": "contract",
        "documentation": "@title Burnable Token\n@dev A token that can be irreversibly burned.",
        "fullyImplemented": true,
        "id": 2685,
        "linearizedBaseContracts": [
          2685,
          3723,
          3953
        ],
        "name": "BurnableToken",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 2657,
            "libraryName": {
              "contractScope": null,
              "id": 2655,
              "name": "SafeMath",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3231,
              "src": "312:8:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_SafeMath_$3231",
                "typeString": "library SafeMath"
              }
            },
            "nodeType": "UsingForDirective",
            "src": "306:27:8",
            "typeName": {
              "id": 2656,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "325:7:8",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "id": 2660,
            "libraryName": {
              "contractScope": null,
              "id": 2658,
              "name": "SafeMath",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3231,
              "src": "342:8:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_SafeMath_$3231",
                "typeString": "library SafeMath"
              }
            },
            "nodeType": "UsingForDirective",
            "src": "336:26:8",
            "typeName": {
              "id": 2659,
              "name": "int256",
              "nodeType": "ElementaryTypeName",
              "src": "355:6:8",
              "typeDescriptions": {
                "typeIdentifier": "t_int256",
                "typeString": "int256"
              }
            }
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 2666,
            "name": "Burn",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 2665,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2662,
                  "indexed": true,
                  "name": "burner",
                  "nodeType": "VariableDeclaration",
                  "scope": 2666,
                  "src": "379:22:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2661,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "379:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 2664,
                  "indexed": false,
                  "name": "value",
                  "nodeType": "VariableDeclaration",
                  "scope": 2666,
                  "src": "403:13:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2663,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "403:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "378:39:8"
            },
            "src": "368:50:8"
          },
          {
            "body": {
              "id": 2683,
              "nodeType": "Block",
              "src": "576:74:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 2674,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 2672,
                          "name": "_value",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2668,
                          "src": "595:6:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 2673,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "604:1:8",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "595:10:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 2671,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        4379,
                        4380
                      ],
                      "referencedDeclaration": 4379,
                      "src": "587:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 2675,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "587:19:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2676,
                  "nodeType": "ExpressionStatement",
                  "src": "587:19:8"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 2678,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4376,
                          "src": "623:3:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 2679,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "623:10:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 2680,
                        "name": "_value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2668,
                        "src": "635:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 2677,
                      "name": "_burn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3654,
                      "src": "617:5:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 2681,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "617:25:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2682,
                  "nodeType": "ExpressionStatement",
                  "src": "617:25:8"
                }
              ]
            },
            "documentation": "@dev Burns a specified amount of tokens.\n@param _value The amount of tokens to burn.",
            "id": 2684,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "burn",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2669,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2668,
                  "name": "_value",
                  "nodeType": "VariableDeclaration",
                  "scope": 2684,
                  "src": "553:14:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2667,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "553:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "552:16:8"
            },
            "returnParameters": {
              "id": 2670,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "576:0:8"
            },
            "scope": 2685,
            "src": "539:111:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 2686,
        "src": "269:384:8"
      }
    ],
    "src": "0:654:8"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.7+commit.6da8b019.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.1",
  "updatedAt": "2019-04-22T23:55:49.872Z",
  "devdoc": {
    "details": "A token that can be irreversibly burned.",
    "methods": {
      "allowance(address,address)": {
        "details": "Function to check the amount of tokens that an owner allowed to a spender.",
        "params": {
          "owner": "address The address which owns the funds.",
          "spender": "address The address which will spend the funds."
        },
        "return": "A uint256 specifying the amount of tokens still available for the spender."
      },
      "approve(address,uint256)": {
        "details": "Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729",
        "params": {
          "spender": "The address which will spend the funds.",
          "value": "The amount of tokens to be spent."
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address.",
        "params": {
          "owner": "The address to query the balance of."
        },
        "return": "A uint256 representing the amount owned by the passed address."
      },
      "burn(uint256)": {
        "details": "Burns a specified amount of tokens.",
        "params": {
          "_value": "The amount of tokens to burn."
        }
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Decrease the amount of tokens that an owner allowed to a spender. approve should be called when _allowed[msg.sender][spender] == 0. To decrement allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol Emits an Approval event.",
        "params": {
          "spender": "The address which will spend the funds.",
          "subtractedValue": "The amount of tokens to decrease the allowance by."
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Increase the amount of tokens that an owner allowed to a spender. approve should be called when _allowed[msg.sender][spender] == 0. To increment allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol Emits an Approval event.",
        "params": {
          "addedValue": "The amount of tokens to increase the allowance by.",
          "spender": "The address which will spend the funds."
        }
      },
      "totalSupply()": {
        "details": "Total number of tokens in existence"
      },
      "transfer(address,uint256)": {
        "details": "Transfer token to a specified address",
        "params": {
          "to": "The address to transfer to.",
          "value": "The amount to be transferred."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfer tokens from one address to another. Note that while this function emits an Approval event, this is not required as per the specification, and other compliant implementations may not emit the event.",
        "params": {
          "from": "address The address which you want to send tokens from",
          "to": "address The address which you want to transfer to",
          "value": "uint256 the amount of tokens to be transferred"
        }
      }
    },
    "title": "Burnable Token"
  },
  "userdoc": {
    "methods": {}
  }
}