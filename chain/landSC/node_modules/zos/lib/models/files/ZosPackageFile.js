'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _ZosNetworkFile = require('./ZosNetworkFile');

var _ZosNetworkFile2 = _interopRequireDefault(_ZosNetworkFile);

var _zosLib = require('zos-lib');

var _Stdlib = require('../stdlib/Stdlib');

var _Stdlib2 = _interopRequireDefault(_Stdlib);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const log = new _zosLib.Logger('ZosPackageFile');

class ZosPackageFile {

  constructor(fileName = 'zos.json') {
    this.fileName = fileName;
    this.data = _zosLib.FileSystem.parseJsonIfExists(this.fileName) || {};
  }

  exists() {
    return _zosLib.FileSystem.exists(this.fileName);
  }

  get lib() {
    return this.data.lib;
  }

  get name() {
    return this.data.name;
  }

  get version() {
    return this.data.version;
  }

  get stdlib() {
    return this.data.stdlib || {};
  }

  get stdlibName() {
    return this.stdlib.name;
  }

  get stdlibVersion() {
    return this.stdlib.version;
  }

  get contracts() {
    return this.data.contracts || {};
  }

  get contractAliases() {
    return Object.keys(this.contracts);
  }

  get isLib() {
    return !!this.lib;
  }

  contract(alias) {
    return this.contracts[alias];
  }

  hasName(name) {
    return this.name === name;
  }

  hasStdlib(stdlib = undefined) {
    if (stdlib !== undefined) return this.stdlibMatches(stdlib);
    return !_lodash2.default.isEmpty(this.stdlib);
  }

  stdlibMatches(stdlib) {
    return _lodash2.default.isEmpty(this.stdlib) === _lodash2.default.isEmpty(stdlib) && this.stdlib.name === stdlib.name && _Stdlib2.default.satisfiesVersion(stdlib.version, this.stdlib.version);
  }

  isCurrentVersion(version) {
    return this.version === version;
  }

  hasContract(alias) {
    return !!this.contract(alias);
  }

  hasContracts() {
    return !_lodash2.default.isEmpty(this.contracts);
  }

  set lib(lib) {
    this.data.lib = lib;
  }

  set name(name) {
    this.data.name = name;
  }

  set version(version) {
    this.data.version = version;
  }

  set stdlib(stdlib) {
    this.data.stdlib = stdlib;
  }

  set contracts(contracts) {
    this.data.contracts = contracts;
  }

  addContract(alias, name) {
    this.data.contracts[alias] = name;
  }

  unsetContract(alias) {
    delete this.data.contracts[alias];
  }

  networkFile(network) {
    const networkFileName = this.fileName.replace(/\.json\s*$/, `.${network}.json`);
    if (networkFileName === this.fileName) throw Error(`Cannot create network file name from ${this.fileName}`);
    return new _ZosNetworkFile2.default(this, network, networkFileName);
  }

  write() {
    _zosLib.FileSystem.writeJson(this.fileName, this.data);
    log.info(`Successfully written ${this.fileName}`);
  }
}
exports.default = ZosPackageFile;