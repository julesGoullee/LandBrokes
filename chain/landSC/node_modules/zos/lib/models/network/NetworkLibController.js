'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _zosLib = require('zos-lib');

var _NetworkBaseController = require('./NetworkBaseController');

var _NetworkBaseController2 = _interopRequireDefault(_NetworkBaseController);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class NetworkLibController extends _NetworkBaseController2.default {
  get isDeployed() {
    return !!this.packageAddress;
  }

  async createProxy() {
    throw Error('Cannot create proxy for stdlib');
  }

  async deploy() {
    this.package = await _zosLib.Package.deploy(this.txParams);
    this.networkFile.package = { address: this.package.address() };
  }

  async fetch() {
    if (!this.isDeployed) throw Error('Your application must be deployed to interact with it.');
    this.package = await _zosLib.Package.fetch(this.packageAddress, this.txParams);
  }

  async setImplementation(contractClass, contractAlias) {
    return this.package.setImplementation(this.networkFile.version, contractClass, contractAlias);
  }

  async unsetImplementation(contractAlias) {
    return this.package.unsetImplementation(this.networkFile.version, contractAlias);
  }

  newVersion(versionName) {
    this.networkFile.frozen = false;
    return this.package.newVersion(versionName);
  }

  async freeze() {
    await this.fetch();
    await this.package.freeze(this.networkFile.version);
    this.networkFile.frozen = true;
  }

  async uploadContracts(reupload) {
    if (this.networkFile.frozen) {
      throw Error('Cannot upload contracts for a frozen release. Run zos bump to create a new version first.');
    }
    await super.uploadContracts(reupload);
  }
}
exports.default = NetworkLibController;