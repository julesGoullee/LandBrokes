(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("Debugger", [], factory);
	else if(typeof exports === 'object')
		exports["Debugger"] = factory();
	else
		root["Debugger"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 41);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = require("debug");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/helpers/asyncToGenerator");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_1qtjmb3znp = function () {
  var path = "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/helpers/index.js",
      hash = "9125ace99b7229b7436ac4ca0315c45cfa9f0b5f",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/helpers/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 6, column: 0 }, end: { line: 6, column: 32 } }, "2": { start: { line: 7, column: 0 }, end: { line: 7, column: 30 } }, "3": { start: { line: 8, column: 0 }, end: { line: 8, column: 42 } }, "4": { start: { line: 9, column: 0 }, end: { line: 9, column: 40 } }, "5": { start: { line: 10, column: 0 }, end: { line: 10, column: 44 } }, "6": { start: { line: 12, column: 26 }, end: { line: 12, column: 57 } }, "7": { start: { line: 14, column: 12 }, end: { line: 14, column: 56 } }, "8": { start: { line: 16, column: 40 }, end: { line: 16, column: 267 } }, "9": { start: { line: 16, column: 69 }, end: { line: 16, column: 80 } }, "10": { start: { line: 16, column: 103 }, end: { line: 16, column: 105 } }, "11": { start: { line: 16, column: 107 }, end: { line: 16, column: 228 } }, "12": { start: { line: 16, column: 126 }, end: { line: 16, column: 226 } }, "13": { start: { line: 16, column: 149 }, end: { line: 16, column: 224 } }, "14": { start: { line: 16, column: 201 }, end: { line: 16, column: 224 } }, "15": { start: { line: 16, column: 229 }, end: { line: 16, column: 250 } }, "16": { start: { line: 16, column: 251 }, end: { line: 16, column: 265 } }, "17": { start: { line: 18, column: 18 }, end: { line: 18, column: 50 } }, "18": { start: { line: 21, column: 2 }, end: { line: 24, column: 5 } }, "19": { start: { line: 26, column: 2 }, end: { line: 26, column: 12 } }, "20": { start: { line: 33, column: 2 }, end: { line: 33, column: 68 } }, "21": { start: { line: 41, column: 2 }, end: { line: 41, column: 35 } }, "22": { start: { line: 49, column: 16 }, end: { line: 49, column: 66 } }, "23": { start: { line: 50, column: 2 }, end: { line: 50, column: 28 } }, "24": { start: { line: 58, column: 18 }, end: { line: 58, column: 39 } }, "25": { start: { line: 59, column: 2 }, end: { line: 59, column: 30 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 16, column: 9 }, end: { line: 16, column: 32 } }, loc: { start: { line: 16, column: 38 }, end: { line: 16, column: 269 } }, line: 16 }, "1": { name: "prefixName", decl: { start: { line: 20, column: 9 }, end: { line: 20, column: 19 } }, loc: { start: { line: 20, column: 32 }, end: { line: 27, column: 1 } }, line: 20 }, "2": { name: "keccak256", decl: { start: { line: 32, column: 9 }, end: { line: 32, column: 18 } }, loc: { start: { line: 32, column: 28 }, end: { line: 34, column: 1 } }, line: 32 }, "3": { name: "stableKeccak256", decl: { start: { line: 40, column: 9 }, end: { line: 40, column: 24 } }, loc: { start: { line: 40, column: 30 }, end: { line: 42, column: 1 } }, line: 40 }, "4": { name: "isCallMnemonic", decl: { start: { line: 48, column: 9 }, end: { line: 48, column: 23 } }, loc: { start: { line: 48, column: 28 }, end: { line: 51, column: 1 } }, line: 48 }, "5": { name: "isCreateMnemonic", decl: { start: { line: 57, column: 9 }, end: { line: 57, column: 25 } }, loc: { start: { line: 57, column: 30 }, end: { line: 60, column: 1 } }, line: 57 } }, branchMap: { "0": { loc: { start: { line: 16, column: 40 }, end: { line: 16, column: 267 } }, type: "if", locations: [{ start: { line: 16, column: 40 }, end: { line: 16, column: 267 } }, { start: { line: 16, column: 40 }, end: { line: 16, column: 267 } }], line: 16 }, "1": { loc: { start: { line: 16, column: 44 }, end: { line: 16, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 16, column: 44 }, end: { line: 16, column: 47 } }, { start: { line: 16, column: 51 }, end: { line: 16, column: 65 } }], line: 16 }, "2": { loc: { start: { line: 16, column: 107 }, end: { line: 16, column: 228 } }, type: "if", locations: [{ start: { line: 16, column: 107 }, end: { line: 16, column: 228 } }, { start: { line: 16, column: 107 }, end: { line: 16, column: 228 } }], line: 16 }, "3": { loc: { start: { line: 16, column: 149 }, end: { line: 16, column: 224 } }, type: "if", locations: [{ start: { line: 16, column: 149 }, end: { line: 16, column: 224 } }, { start: { line: 16, column: 149 }, end: { line: 16, column: 224 } }], line: 16 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/helpers/index.js"], names: ["prefixName", "keccak256", "stableKeccak256", "isCallMnemonic", "isCreateMnemonic", "utils", "stringify", "require", "prefix", "fn", "Object", "defineProperty", "value", "name", "configurable", "args", "Conversion", "toHexString", "EVM", "obj", "op", "calls", "includes", "creates"], mappings: ";;;;;QAIgBA,U,GAAAA,U;QAYAC,S,GAAAA,S;QAQAC,e,GAAAA,e;QAQAC,c,GAAAA,c;QASAC,gB,GAAAA,gB;;AAzChB;;IAAYC,K;;;;AAEZ,MAAMC,YAAYC,QAAQ,uBAAR,CAAlB;;AAEO,SAASP,UAAT,CAAoBQ,MAApB,EAA4BC,EAA5B,EAAgC;AACrCC,SAAOC,cAAP,CAAsBF,EAAtB,EAA0B,MAA1B,EAAkC;AAChCG,WAAQ,GAAEJ,MAAO,IAAGC,GAAGI,IAAK,EADI;AAEhCC,kBAAc;AAFkB,GAAlC;;AAKA,SAAOL,EAAP;AACD;;AAED;;;AAGO,SAASR,SAAT,CAAmB,GAAGc,IAAtB,EAA4B;AACjC,SAAOV,MAAMW,UAAN,CAAiBC,WAAjB,CAA6BZ,MAAMa,GAAN,CAAUjB,SAAV,CAAoB,GAAGc,IAAvB,CAA7B,CAAP;AACD;;AAED;;;;AAIO,SAASb,eAAT,CAAyBiB,GAAzB,EAA8B;AACnC,SAAOlB,UAAUK,UAAUa,GAAV,CAAV,CAAP;AACD;;AAED;;;;AAIO,SAAShB,cAAT,CAAwBiB,EAAxB,EAA4B;AACjC,QAAMC,QAAQ,CAAC,MAAD,EAAS,cAAT,EAAyB,YAAzB,EAAuC,UAAvC,CAAd;AACA,SAAOA,MAAMC,QAAN,CAAeF,EAAf,CAAP;AACD;;AAED;;;;AAIO,SAAShB,gBAAT,CAA0BgB,EAA1B,EAA8B;AACnC,QAAMG,UAAU,CAAC,QAAD,EAAW,SAAX,CAAhB;AACA,SAAOA,QAAQD,QAAR,CAAiBF,EAAjB,CAAP;AACD", file: "index.js", sourceRoot: "/Users/tyler/projects/truffle/packages/truffle-debugger", sourcesContent: ["import * as utils from \"truffle-decode-utils\";\n\nconst stringify = require(\"json-stable-stringify\");\n\nexport function prefixName(prefix, fn) {\n  Object.defineProperty(fn, \"name\", {\n    value: `${prefix}.${fn.name}`,\n    configurable: true\n  });\n\n  return fn;\n}\n\n/**\n * @return 0x-prefix string of keccak256 hash\n */\nexport function keccak256(...args) {\n  return utils.Conversion.toHexString(utils.EVM.keccak256(...args));\n}\n\n/**\n * Given an object, return a stable hash by first running it through a stable\n * stringify operation before hashing\n */\nexport function stableKeccak256(obj) {\n  return keccak256(stringify(obj));\n}\n\n/*\n * Given a mmemonic, determine whether it's the mnemonic of a calling\n * instruction (does NOT include creation instructions)\n */\nexport function isCallMnemonic(op) {\n  const calls = [\"CALL\", \"DELEGATECALL\", \"STATICCALL\", \"CALLCODE\"];\n  return calls.includes(op);\n}\n\n/*\n * Given a mmemonic, determine whether it's the mnemonic of a creation\n * instruction\n */\nexport function isCreateMnemonic(op) {\n  const creates = [\"CREATE\", \"CREATE2\"];\n  return creates.includes(op);\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_1qtjmb3znp.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });cov_1qtjmb3znp.s[1]++;exports.prefixName = prefixName;cov_1qtjmb3znp.s[2]++;exports.keccak256 = keccak256;cov_1qtjmb3znp.s[3]++;exports.stableKeccak256 = stableKeccak256;cov_1qtjmb3znp.s[4]++;exports.isCallMnemonic = isCallMnemonic;cov_1qtjmb3znp.s[5]++;exports.isCreateMnemonic = isCreateMnemonic;var _truffleDecodeUtils = (cov_1qtjmb3znp.s[6]++, __webpack_require__(14));var utils = (cov_1qtjmb3znp.s[7]++, _interopRequireWildcard(_truffleDecodeUtils));function _interopRequireWildcard(obj) {
  cov_1qtjmb3znp.f[0]++;cov_1qtjmb3znp.s[8]++;if ((cov_1qtjmb3znp.b[1][0]++, obj) && (cov_1qtjmb3znp.b[1][1]++, obj.__esModule)) {
    cov_1qtjmb3znp.b[0][0]++;cov_1qtjmb3znp.s[9]++;return obj;
  } else {
    cov_1qtjmb3znp.b[0][1]++;var newObj = (cov_1qtjmb3znp.s[10]++, {});cov_1qtjmb3znp.s[11]++;if (obj != null) {
      cov_1qtjmb3znp.b[2][0]++;cov_1qtjmb3znp.s[12]++;for (var key in obj) {
        cov_1qtjmb3znp.s[13]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_1qtjmb3znp.b[3][0]++;cov_1qtjmb3znp.s[14]++;newObj[key] = obj[key];
        } else {
          cov_1qtjmb3znp.b[3][1]++;
        }
      }
    } else {
      cov_1qtjmb3znp.b[2][1]++;
    }cov_1qtjmb3znp.s[15]++;newObj.default = obj;cov_1qtjmb3znp.s[16]++;return newObj;
  }
}const stringify = (cov_1qtjmb3znp.s[17]++, __webpack_require__(58));function prefixName(prefix, fn) {
  cov_1qtjmb3znp.f[1]++;cov_1qtjmb3znp.s[18]++;Object.defineProperty(fn, "name", { value: `${prefix}.${fn.name}`, configurable: true });cov_1qtjmb3znp.s[19]++;return fn;
}function keccak256(...args) {
  cov_1qtjmb3znp.f[2]++;cov_1qtjmb3znp.s[20]++;return utils.Conversion.toHexString(utils.EVM.keccak256(...args));
}function stableKeccak256(obj) {
  cov_1qtjmb3znp.f[3]++;cov_1qtjmb3znp.s[21]++;return keccak256(stringify(obj));
}function isCallMnemonic(op) {
  cov_1qtjmb3znp.f[4]++;const calls = (cov_1qtjmb3znp.s[22]++, ["CALL", "DELEGATECALL", "STATICCALL", "CALLCODE"]);cov_1qtjmb3znp.s[23]++;return calls.includes(op);
}function isCreateMnemonic(op) {
  cov_1qtjmb3znp.f[5]++;const creates = (cov_1qtjmb3znp.s[24]++, ["CREATE", "CREATE2"]);cov_1qtjmb3znp.s[25]++;return creates.includes(op);
}

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_xcd81anmt = function () {
  var path = "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/solidity/selectors/index.js",
      hash = "c1e816435da048eed4c6f8d2c972ce66505fb11e",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/solidity/selectors/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 16 }, end: { line: 7, column: 56 } }, "2": { start: { line: 9, column: 16 }, end: { line: 9, column: 49 } }, "3": { start: { line: 11, column: 15 }, end: { line: 11, column: 62 } }, "4": { start: { line: 13, column: 16 }, end: { line: 13, column: 48 } }, "5": { start: { line: 15, column: 14 }, end: { line: 15, column: 60 } }, "6": { start: { line: 17, column: 15 }, end: { line: 17, column: 46 } }, "7": { start: { line: 19, column: 13 }, end: { line: 19, column: 29 } }, "8": { start: { line: 21, column: 14 }, end: { line: 21, column: 44 } }, "9": { start: { line: 23, column: 20 }, end: { line: 23, column: 44 } }, "10": { start: { line: 25, column: 28 }, end: { line: 25, column: 61 } }, "11": { start: { line: 27, column: 29 }, end: { line: 27, column: 74 } }, "12": { start: { line: 29, column: 24 }, end: { line: 29, column: 53 } }, "13": { start: { line: 31, column: 25 }, end: { line: 31, column: 66 } }, "14": { start: { line: 33, column: 26 }, end: { line: 33, column: 57 } }, "15": { start: { line: 35, column: 25 }, end: { line: 35, column: 69 } }, "16": { start: { line: 37, column: 11 }, end: { line: 37, column: 33 } }, "17": { start: { line: 39, column: 19 }, end: { line: 39, column: 42 } }, "18": { start: { line: 41, column: 20 }, end: { line: 41, column: 56 } }, "19": { start: { line: 43, column: 17 }, end: { line: 43, column: 45 } }, "20": { start: { line: 45, column: 18 }, end: { line: 45, column: 52 } }, "21": { start: { line: 47, column: 40 }, end: { line: 47, column: 267 } }, "22": { start: { line: 47, column: 69 }, end: { line: 47, column: 80 } }, "23": { start: { line: 47, column: 103 }, end: { line: 47, column: 105 } }, "24": { start: { line: 47, column: 107 }, end: { line: 47, column: 228 } }, "25": { start: { line: 47, column: 126 }, end: { line: 47, column: 226 } }, "26": { start: { line: 47, column: 149 }, end: { line: 47, column: 224 } }, "27": { start: { line: 47, column: 201 }, end: { line: 47, column: 224 } }, "28": { start: { line: 47, column: 229 }, end: { line: 47, column: 250 } }, "29": { start: { line: 47, column: 251 }, end: { line: 47, column: 265 } }, "30": { start: { line: 49, column: 39 }, end: { line: 49, column: 93 } }, "31": { start: { line: 51, column: 14 }, end: { line: 51, column: 65 } }, "32": { start: { line: 53, column: 15 }, end: { line: 53, column: 32 } }, "33": { start: { line: 56, column: 2 }, end: { line: 69, column: 4 } }, "34": { start: { line: 72, column: 15 }, end: { line: 310, column: 2 } }, "35": { start: { line: 76, column: 18 }, end: { line: 76, column: 32 } }, "36": { start: { line: 85, column: 64 }, end: { line: 85, column: 87 } }, "37": { start: { line: 90, column: 67 }, end: { line: 90, column: 98 } }, "38": { start: { line: 100, column: 133 }, end: { line: 100, column: 158 } }, "39": { start: { line: 105, column: 28 }, end: { line: 105, column: 61 } }, "40": { start: { line: 111, column: 6 }, end: { line: 113, column: 7 } }, "41": { start: { line: 112, column: 8 }, end: { line: 112, column: 18 } }, "42": { start: { line: 115, column: 25 }, end: { line: 115, column: 69 } }, "43": { start: { line: 117, column: 6 }, end: { line: 129, column: 7 } }, "44": { start: { line: 125, column: 8 }, end: { line: 125, column: 23 } }, "45": { start: { line: 126, column: 8 }, end: { line: 128, column: 9 } }, "46": { start: { line: 127, column: 10 }, end: { line: 127, column: 46 } }, "47": { start: { line: 131, column: 34 }, end: { line: 133, column: 10 } }, "48": { start: { line: 131, column: 122 }, end: { line: 133, column: 7 } }, "49": { start: { line: 134, column: 35 }, end: { line: 134, column: 102 } }, "50": { start: { line: 136, column: 24 }, end: { line: 136, column: 54 } }, "51": { start: { line: 137, column: 6 }, end: { line: 137, column: 43 } }, "52": { start: { line: 139, column: 6 }, end: { line: 184, column: 9 } }, "53": { start: { line: 144, column: 26 }, end: { line: 144, column: 61 } }, "54": { start: { line: 146, column: 8 }, end: { line: 149, column: 10 } }, "55": { start: { line: 159, column: 12 }, end: { line: 159, column: 21 } }, "56": { start: { line: 160, column: 37 }, end: { line: 160, column: 70 } }, "57": { start: { line: 161, column: 22 }, end: { line: 170, column: 9 } }, "58": { start: { line: 172, column: 8 }, end: { line: 174, column: 9 } }, "59": { start: { line: 173, column: 10 }, end: { line: 173, column: 43 } }, "60": { start: { line: 176, column: 8 }, end: { line: 183, column: 11 } }, "61": { start: { line: 191, column: 16 }, end: { line: 191, column: 18 } }, "62": { start: { line: 192, column: 6 }, end: { line: 194, column: 9 } }, "63": { start: { line: 193, column: 8 }, end: { line: 193, column: 42 } }, "64": { start: { line: 197, column: 21 }, end: { line: 197, column: 25 } }, "65": { start: { line: 198, column: 6 }, end: { line: 204, column: 7 } }, "66": { start: { line: 199, column: 8 }, end: { line: 203, column: 9 } }, "67": { start: { line: 200, column: 10 }, end: { line: 200, column: 33 } }, "68": { start: { line: 202, column: 10 }, end: { line: 202, column: 29 } }, "69": { start: { line: 205, column: 6 }, end: { line: 205, column: 17 } }, "70": { start: { line: 211, column: 144 }, end: { line: 211, column: 157 } }, "71": { start: { line: 216, column: 105 }, end: { line: 216, column: 122 } }, "72": { start: { line: 227, column: 6 }, end: { line: 229, column: 7 } }, "73": { start: { line: 228, column: 8 }, end: { line: 228, column: 20 } }, "74": { start: { line: 231, column: 6 }, end: { line: 231, column: 29 } }, "75": { start: { line: 232, column: 6 }, end: { line: 232, column: 23 } }, "76": { start: { line: 234, column: 6 }, end: { line: 234, column: 103 } }, "77": { start: { line: 240, column: 81 }, end: { line: 240, column: 115 } }, "78": { start: { line: 245, column: 97 }, end: { line: 245, column: 103 } }, "79": { start: { line: 250, column: 80 }, end: { line: 250, column: 93 } }, "80": { start: { line: 255, column: 92 }, end: { line: 255, column: 93 } }, "81": { start: { line: 260, column: 96 }, end: { line: 260, column: 97 } }, "82": { start: { line: 265, column: 108 }, end: { line: 265, column: 109 } }, "83": { start: { line: 270, column: 105 }, end: { line: 270, column: 114 } }, "84": { start: { line: 281, column: 94 }, end: { line: 281, column: 145 } }, "85": { start: { line: 287, column: 89 }, end: { line: 287, column: 175 } }, "86": { start: { line: 298, column: 70 }, end: { line: 298, column: 398 } }, "87": { start: { line: 307, column: 123 }, end: { line: 308, column: 92 } }, "88": { start: { line: 312, column: 0 }, end: { line: 312, column: 27 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 47, column: 9 }, end: { line: 47, column: 32 } }, loc: { start: { line: 47, column: 38 }, end: { line: 47, column: 269 } }, line: 47 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 49, column: 9 }, end: { line: 49, column: 31 } }, loc: { start: { line: 49, column: 37 }, end: { line: 49, column: 95 } }, line: 49 }, "2": { name: "getSourceRange", decl: { start: { line: 55, column: 9 }, end: { line: 55, column: 23 } }, loc: { start: { line: 55, column: 42 }, end: { line: 70, column: 1 } }, line: 55 }, "3": { name: "(anonymous_3)", decl: { start: { line: 76, column: 9 }, end: { line: 76, column: 10 } }, loc: { start: { line: 76, column: 18 }, end: { line: 76, column: 32 } }, line: 76 }, "4": { name: "(anonymous_4)", decl: { start: { line: 85, column: 55 }, end: { line: 85, column: 56 } }, loc: { start: { line: 85, column: 64 }, end: { line: 85, column: 87 } }, line: 85 }, "5": { name: "(anonymous_5)", decl: { start: { line: 90, column: 58 }, end: { line: 90, column: 59 } }, loc: { start: { line: 90, column: 67 }, end: { line: 90, column: 98 } }, line: 90 }, "6": { name: "(anonymous_6)", decl: { start: { line: 100, column: 104 }, end: { line: 100, column: 105 } }, loc: { start: { line: 100, column: 133 }, end: { line: 100, column: 158 } }, line: 100 }, "7": { name: "(anonymous_7)", decl: { start: { line: 105, column: 19 }, end: { line: 105, column: 20 } }, loc: { start: { line: 105, column: 28 }, end: { line: 105, column: 61 } }, line: 105 }, "8": { name: "(anonymous_8)", decl: { start: { line: 110, column: 119 }, end: { line: 110, column: 120 } }, loc: { start: { line: 110, column: 159 }, end: { line: 185, column: 5 } }, line: 110 }, "9": { name: "(anonymous_9)", decl: { start: { line: 131, column: 99 }, end: { line: 131, column: 100 } }, loc: { start: { line: 131, column: 122 }, end: { line: 133, column: 7 } }, line: 131 }, "10": { name: "(anonymous_10)", decl: { start: { line: 139, column: 30 }, end: { line: 139, column: 31 } }, loc: { start: { line: 139, column: 54 }, end: { line: 150, column: 7 } }, line: 139 }, "11": { name: "(anonymous_11)", decl: { start: { line: 150, column: 13 }, end: { line: 150, column: 14 } }, loc: { start: { line: 150, column: 45 }, end: { line: 184, column: 7 } }, line: 150 }, "12": { name: "(anonymous_12)", decl: { start: { line: 190, column: 83 }, end: { line: 190, column: 84 } }, loc: { start: { line: 190, column: 99 }, end: { line: 206, column: 5 } }, line: 190 }, "13": { name: "(anonymous_13)", decl: { start: { line: 192, column: 27 }, end: { line: 192, column: 28 } }, loc: { start: { line: 192, column: 50 }, end: { line: 194, column: 7 } }, line: 192 }, "14": { name: "(anonymous_14)", decl: { start: { line: 211, column: 131 }, end: { line: 211, column: 132 } }, loc: { start: { line: 211, column: 144 }, end: { line: 211, column: 157 } }, line: 211 }, "15": { name: "(anonymous_15)", decl: { start: { line: 216, column: 78 }, end: { line: 216, column: 79 } }, loc: { start: { line: 216, column: 105 }, end: { line: 216, column: 122 } }, line: 216 }, "16": { name: "(anonymous_16)", decl: { start: { line: 226, column: 184 }, end: { line: 226, column: 185 } }, loc: { start: { line: 226, column: 208 }, end: { line: 235, column: 5 } }, line: 226 }, "17": { name: "(anonymous_17)", decl: { start: { line: 240, column: 66 }, end: { line: 240, column: 67 } }, loc: { start: { line: 240, column: 81 }, end: { line: 240, column: 115 } }, line: 240 }, "18": { name: "(anonymous_18)", decl: { start: { line: 245, column: 87 }, end: { line: 245, column: 88 } }, loc: { start: { line: 245, column: 97 }, end: { line: 245, column: 103 } }, line: 245 }, "19": { name: "(anonymous_19)", decl: { start: { line: 250, column: 68 }, end: { line: 250, column: 69 } }, loc: { start: { line: 250, column: 80 }, end: { line: 250, column: 93 } }, line: 250 }, "20": { name: "(anonymous_20)", decl: { start: { line: 255, column: 87 }, end: { line: 255, column: 88 } }, loc: { start: { line: 255, column: 92 }, end: { line: 255, column: 93 } }, line: 255 }, "21": { name: "(anonymous_21)", decl: { start: { line: 260, column: 91 }, end: { line: 260, column: 92 } }, loc: { start: { line: 260, column: 96 }, end: { line: 260, column: 97 } }, line: 260 }, "22": { name: "(anonymous_22)", decl: { start: { line: 265, column: 103 }, end: { line: 265, column: 104 } }, loc: { start: { line: 265, column: 108 }, end: { line: 265, column: 109 } }, line: 265 }, "23": { name: "(anonymous_23)", decl: { start: { line: 270, column: 92 }, end: { line: 270, column: 93 } }, loc: { start: { line: 270, column: 105 }, end: { line: 270, column: 114 } }, line: 270 }, "24": { name: "(anonymous_24)", decl: { start: { line: 281, column: 74 }, end: { line: 281, column: 75 } }, loc: { start: { line: 281, column: 94 }, end: { line: 281, column: 145 } }, line: 281 }, "25": { name: "(anonymous_25)", decl: { start: { line: 287, column: 67 }, end: { line: 287, column: 68 } }, loc: { start: { line: 287, column: 89 }, end: { line: 287, column: 175 } }, line: 287 }, "26": { name: "(anonymous_26)", decl: { start: { line: 298, column: 62 }, end: { line: 298, column: 63 } }, loc: { start: { line: 298, column: 70 }, end: { line: 298, column: 398 } }, line: 298 }, "27": { name: "(anonymous_27)", decl: { start: { line: 307, column: 112 }, end: { line: 307, column: 113 } }, loc: { start: { line: 307, column: 123 }, end: { line: 308, column: 92 } }, line: 307 } }, branchMap: { "0": { loc: { start: { line: 47, column: 40 }, end: { line: 47, column: 267 } }, type: "if", locations: [{ start: { line: 47, column: 40 }, end: { line: 47, column: 267 } }, { start: { line: 47, column: 40 }, end: { line: 47, column: 267 } }], line: 47 }, "1": { loc: { start: { line: 47, column: 44 }, end: { line: 47, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 47, column: 44 }, end: { line: 47, column: 47 } }, { start: { line: 47, column: 51 }, end: { line: 47, column: 65 } }], line: 47 }, "2": { loc: { start: { line: 47, column: 107 }, end: { line: 47, column: 228 } }, type: "if", locations: [{ start: { line: 47, column: 107 }, end: { line: 47, column: 228 } }, { start: { line: 47, column: 107 }, end: { line: 47, column: 228 } }], line: 47 }, "3": { loc: { start: { line: 47, column: 149 }, end: { line: 47, column: 224 } }, type: "if", locations: [{ start: { line: 47, column: 149 }, end: { line: 47, column: 224 } }, { start: { line: 47, column: 149 }, end: { line: 47, column: 224 } }], line: 47 }, "4": { loc: { start: { line: 49, column: 46 }, end: { line: 49, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 49, column: 70 }, end: { line: 49, column: 73 } }, { start: { line: 49, column: 76 }, end: { line: 49, column: 92 } }], line: 49 }, "5": { loc: { start: { line: 49, column: 46 }, end: { line: 49, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 49, column: 46 }, end: { line: 49, column: 49 } }, { start: { line: 49, column: 53 }, end: { line: 49, column: 67 } }], line: 49 }, "6": { loc: { start: { line: 55, column: 24 }, end: { line: 55, column: 40 } }, type: "default-arg", locations: [{ start: { line: 55, column: 38 }, end: { line: 55, column: 40 } }], line: 55 }, "7": { loc: { start: { line: 57, column: 11 }, end: { line: 57, column: 33 } }, type: "binary-expr", locations: [{ start: { line: 57, column: 11 }, end: { line: 57, column: 28 } }, { start: { line: 57, column: 32 }, end: { line: 57, column: 33 } }], line: 57 }, "8": { loc: { start: { line: 58, column: 12 }, end: { line: 58, column: 35 } }, type: "binary-expr", locations: [{ start: { line: 58, column: 12 }, end: { line: 58, column: 30 } }, { start: { line: 58, column: 34 }, end: { line: 58, column: 35 } }], line: 58 }, "9": { loc: { start: { line: 59, column: 11 }, end: { line: 68, column: 5 } }, type: "binary-expr", locations: [{ start: { line: 59, column: 11 }, end: { line: 59, column: 28 } }, { start: { line: 59, column: 32 }, end: { line: 68, column: 5 } }], line: 59 }, "10": { loc: { start: { line: 100, column: 133 }, end: { line: 100, column: 158 } }, type: "binary-expr", locations: [{ start: { line: 100, column: 133 }, end: { line: 100, column: 152 } }, { start: { line: 100, column: 156 }, end: { line: 100, column: 158 } }], line: 100 }, "11": { loc: { start: { line: 111, column: 6 }, end: { line: 113, column: 7 } }, type: "if", locations: [{ start: { line: 111, column: 6 }, end: { line: 113, column: 7 } }, { start: { line: 111, column: 6 }, end: { line: 113, column: 7 } }], line: 111 }, "12": { loc: { start: { line: 117, column: 6 }, end: { line: 129, column: 7 } }, type: "if", locations: [{ start: { line: 117, column: 6 }, end: { line: 129, column: 7 } }, { start: { line: 117, column: 6 }, end: { line: 129, column: 7 } }], line: 117 }, "13": { loc: { start: { line: 132, column: 86 }, end: { line: 132, column: 98 } }, type: "binary-expr", locations: [{ start: { line: 132, column: 86 }, end: { line: 132, column: 92 } }, { start: { line: 132, column: 96 }, end: { line: 132, column: 98 } }], line: 132 }, "14": { loc: { start: { line: 144, column: 26 }, end: { line: 144, column: 61 } }, type: "binary-expr", locations: [{ start: { line: 144, column: 26 }, end: { line: 144, column: 55 } }, { start: { line: 144, column: 59 }, end: { line: 144, column: 61 } }], line: 144 }, "15": { loc: { start: { line: 156, column: 10 }, end: { line: 156, column: 19 } }, type: "default-arg", locations: [{ start: { line: 156, column: 18 }, end: { line: 156, column: 19 } }], line: 156 }, "16": { loc: { start: { line: 157, column: 10 }, end: { line: 157, column: 20 } }, type: "default-arg", locations: [{ start: { line: 157, column: 19 }, end: { line: 157, column: 20 } }], line: 157 }, "17": { loc: { start: { line: 158, column: 10 }, end: { line: 158, column: 28 } }, type: "default-arg", locations: [{ start: { line: 158, column: 17 }, end: { line: 158, column: 28 } }], line: 158 }, "18": { loc: { start: { line: 160, column: 37 }, end: { line: 160, column: 70 } }, type: "binary-expr", locations: [{ start: { line: 160, column: 37 }, end: { line: 160, column: 64 } }, { start: { line: 160, column: 68 }, end: { line: 160, column: 70 } }], line: 160 }, "19": { loc: { start: { line: 162, column: 17 }, end: { line: 165, column: 11 } }, type: "binary-expr", locations: [{ start: { line: 162, column: 17 }, end: { line: 162, column: 44 } }, { start: { line: 162, column: 48 }, end: { line: 165, column: 11 } }], line: 162 }, "20": { loc: { start: { line: 166, column: 15 }, end: { line: 169, column: 11 } }, type: "binary-expr", locations: [{ start: { line: 166, column: 15 }, end: { line: 166, column: 51 } }, { start: { line: 166, column: 55 }, end: { line: 169, column: 11 } }], line: 166 }, "21": { loc: { start: { line: 172, column: 8 }, end: { line: 174, column: 9 } }, type: "if", locations: [{ start: { line: 172, column: 8 }, end: { line: 174, column: 9 } }, { start: { line: 172, column: 8 }, end: { line: 174, column: 9 } }], line: 172 }, "22": { loc: { start: { line: 199, column: 8 }, end: { line: 203, column: 9 } }, type: "if", locations: [{ start: { line: 199, column: 8 }, end: { line: 203, column: 9 } }, { start: { line: 199, column: 8 }, end: { line: 203, column: 9 } }], line: 199 }, "23": { loc: { start: { line: 211, column: 144 }, end: { line: 211, column: 157 } }, type: "binary-expr", locations: [{ start: { line: 211, column: 144 }, end: { line: 211, column: 151 } }, { start: { line: 211, column: 155 }, end: { line: 211, column: 157 } }], line: 211 }, "24": { loc: { start: { line: 216, column: 105 }, end: { line: 216, column: 122 } }, type: "binary-expr", locations: [{ start: { line: 216, column: 105 }, end: { line: 216, column: 116 } }, { start: { line: 216, column: 120 }, end: { line: 216, column: 122 } }], line: 216 }, "25": { loc: { start: { line: 227, column: 6 }, end: { line: 229, column: 7 } }, type: "if", locations: [{ start: { line: 227, column: 6 }, end: { line: 229, column: 7 } }, { start: { line: 227, column: 6 }, end: { line: 229, column: 7 } }], line: 227 }, "26": { loc: { start: { line: 234, column: 13 }, end: { line: 234, column: 102 } }, type: "binary-expr", locations: [{ start: { line: 234, column: 13 }, end: { line: 234, column: 40 } }, { start: { line: 234, column: 44 }, end: { line: 234, column: 73 } }, { start: { line: 234, column: 77 }, end: { line: 234, column: 102 } }], line: 234 }, "27": { loc: { start: { line: 250, column: 69 }, end: { line: 250, column: 75 } }, type: "default-arg", locations: [{ start: { line: 250, column: 73 }, end: { line: 250, column: 75 } }], line: 250 }, "28": { loc: { start: { line: 250, column: 80 }, end: { line: 250, column: 93 } }, type: "binary-expr", locations: [{ start: { line: 250, column: 80 }, end: { line: 250, column: 86 } }, { start: { line: 250, column: 90 }, end: { line: 250, column: 93 } }], line: 250 }, "29": { loc: { start: { line: 287, column: 89 }, end: { line: 287, column: 175 } }, type: "cond-expr", locations: [{ start: { line: 287, column: 99 }, end: { line: 287, column: 138 } }, { start: { line: 287, column: 141 }, end: { line: 287, column: 175 } }], line: 287 }, "30": { loc: { start: { line: 298, column: 70 }, end: { line: 298, column: 398 } }, type: "binary-expr", locations: [{ start: { line: 298, column: 70 }, end: { line: 298, column: 88 } }, { start: { line: 298, column: 92 }, end: { line: 298, column: 124 } }, { start: { line: 298, column: 128 }, end: { line: 298, column: 157 } }, { start: { line: 298, column: 161 }, end: { line: 298, column: 204 } }, { start: { line: 298, column: 208 }, end: { line: 298, column: 248 } }, { start: { line: 298, column: 253 }, end: { line: 298, column: 321 } }, { start: { line: 298, column: 325 }, end: { line: 298, column: 397 } }], line: 298 }, "31": { loc: { start: { line: 307, column: 123 }, end: { line: 308, column: 92 } }, type: "binary-expr", locations: [{ start: { line: 307, column: 123 }, end: { line: 307, column: 153 } }, { start: { line: 308, column: 4 }, end: { line: 308, column: 36 } }, { start: { line: 308, column: 40 }, end: { line: 308, column: 92 } }], line: 307 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0, "57": 0, "58": 0, "59": 0, "60": 0, "61": 0, "62": 0, "63": 0, "64": 0, "65": 0, "66": 0, "67": 0, "68": 0, "69": 0, "70": 0, "71": 0, "72": 0, "73": 0, "74": 0, "75": 0, "76": 0, "77": 0, "78": 0, "79": 0, "80": 0, "81": 0, "82": 0, "83": 0, "84": 0, "85": 0, "86": 0, "87": 0, "88": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0], "7": [0, 0], "8": [0, 0], "9": [0, 0], "10": [0, 0], "11": [0, 0], "12": [0, 0], "13": [0, 0], "14": [0, 0], "15": [0], "16": [0], "17": [0], "18": [0, 0], "19": [0, 0], "20": [0, 0], "21": [0, 0], "22": [0, 0], "23": [0, 0], "24": [0, 0], "25": [0, 0], "26": [0, 0, 0], "27": [0], "28": [0, 0], "29": [0, 0], "30": [0, 0, 0, 0, 0, 0, 0], "31": [0, 0, 0] }, inputSourceMap: { version: 3, sources: ["lib/solidity/selectors/index.js"], names: ["TruffleDecodeUtils", "debug", "semver", "require", "getSourceRange", "instruction", "start", "length", "lines", "range", "line", "column", "end", "solidity", "state", "info", "sources", "byId", "sourceMaps", "byContext", "current", "sourceMap", "evm", "context", "functionDepth", "proc", "instructions", "binary", "CodeUtils", "parseCode", "i", "lineAndColumnMappings", "map", "id", "source", "SolidityUtils", "getCharacterOffsetToLineAndColumnMapping", "humanReadableSourceMap", "getHumanReadableSourceMap", "primaryFile", "file", "index", "jump", "lineAndColumnMapping", "instructionAtProgramCounter", "forEach", "pc", "lastSeen", "entries", "step", "programCounter", "sourceRange", "isSourceRangeFinal", "next", "isMultiline", "willJump", "isJump", "jumpDirection", "willCall", "isCall", "x", "willCreate", "isCreate", "callsPrecompile", "willReturn", "isHalting", "pointer", "ast", "node", "jsonpointer", "get", "isContractCall", "undefined", "nodeType", "expression", "Definition", "isContract", "isContractType", "needsFunctionDepthWorkaround", "callContext", "compiler", "name", "satisfies", "version"], mappings: "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", file: "index.js", sourceRoot: "/Users/tyler/projects/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:solidity:selectors\");\n\nimport { createSelectorTree, createLeaf } from \"reselect-tree\";\nimport SolidityUtils from \"truffle-solidity-utils\";\nimport CodeUtils from \"truffle-code-utils\";\n\nimport * as TruffleDecodeUtils from \"truffle-decode-utils\";\nimport { findRange } from \"lib/ast/map\";\nimport jsonpointer from \"json-pointer\";\n\nimport evm from \"lib/evm/selectors\";\n\nconst semver = require(\"semver\");\n\nfunction getSourceRange(instruction = {}) {\n  return {\n    start: instruction.start || 0,\n    length: instruction.length || 0,\n    lines: instruction.range || {\n      start: {\n        line: 0,\n        column: 0\n      },\n      end: {\n        line: 0,\n        column: 0\n      }\n    }\n  };\n}\n\nlet solidity = createSelectorTree({\n  /**\n   * solidity.state\n   */\n  state: state => state.solidity,\n\n  /**\n   * solidity.info\n   */\n  info: {\n    /**\n     * solidity.info.sources\n     */\n    sources: createLeaf([\"/state\"], state => state.info.sources.byId),\n\n    /**\n     * solidity.info.sourceMaps\n     */\n    sourceMaps: createLeaf([\"/state\"], state => state.info.sourceMaps.byContext)\n  },\n\n  /**\n   * solidity.current\n   */\n  current: {\n    /**\n     * solidity.current.sourceMap\n     */\n    sourceMap: createLeaf(\n      [evm.current.context, \"/info/sourceMaps\"],\n\n      ({ context }, sourceMaps) => sourceMaps[context] || {}\n    ),\n\n    /**\n     * solidity.current.functionDepth\n     */\n    functionDepth: state => state.solidity.proc.functionDepth,\n\n    /**\n     * solidity.current.instructions\n     */\n    instructions: createLeaf(\n      [\"/info/sources\", evm.current.context, \"./sourceMap\"],\n\n      (sources, { binary }, { sourceMap }) => {\n        if (!binary) {\n          return [];\n        }\n\n        let instructions = CodeUtils.parseCode(binary);\n\n        if (!sourceMap) {\n          // Let's create a source map to use since none exists. This source map\n          // maps just as many ranges as there are instructions, and ensures every\n          // instruction is marked as \"jumping out\". This will ensure all\n          // available debugger commands step one instruction at a time.\n          //\n          // This is kindof a hack; perhaps this should be broken out into separate\n          // context types. TODO\n          sourceMap = \"\";\n          for (var i = 0; i < instructions.length; i++) {\n            sourceMap += i + \":\" + i + \":1:-1;\";\n          }\n        }\n\n        var lineAndColumnMappings = Object.assign(\n          {},\n          ...Object.entries(sources).map(([id, { source }]) => ({\n            [id]: SolidityUtils.getCharacterOffsetToLineAndColumnMapping(\n              source || \"\"\n            )\n          }))\n        );\n        var humanReadableSourceMap = SolidityUtils.getHumanReadableSourceMap(\n          sourceMap\n        );\n\n        let primaryFile = humanReadableSourceMap[0].file;\n        debug(\"primaryFile %o\", primaryFile);\n\n        return instructions\n          .map((instruction, index) => {\n            // lookup source map by index and add `index` property to\n            // instruction\n            //\n\n            const sourceMap = humanReadableSourceMap[index] || {};\n\n            return {\n              instruction: { ...instruction, index },\n              sourceMap\n            };\n          })\n          .map(({ instruction, sourceMap }) => {\n            // add source map information to instruction, or defaults\n            //\n\n            const {\n              jump,\n              start = 0,\n              length = 0,\n              file = primaryFile\n            } = sourceMap;\n            const lineAndColumnMapping = lineAndColumnMappings[file] || {};\n            const range = {\n              start: lineAndColumnMapping[start] || {\n                line: null,\n                column: null\n              },\n              end: lineAndColumnMapping[start + length] || {\n                line: null,\n                column: null\n              }\n            };\n\n            if (range.start.line === null) {\n              debug(\"sourceMap %o\", sourceMap);\n            }\n\n            return {\n              ...instruction,\n\n              jump,\n              start,\n              length,\n              file,\n              range\n            };\n          });\n      }\n    ),\n\n    /**\n     * solidity.current.instructionAtProgramCounter\n     */\n    instructionAtProgramCounter: createLeaf(\n      [\"./instructions\"],\n\n      instructions => {\n        let map = [];\n        instructions.forEach(function(instruction) {\n          map[instruction.pc] = instruction;\n        });\n\n        // fill in gaps in map by defaulting to the last known instruction\n        let lastSeen = null;\n        for (let [pc, instruction] of map.entries()) {\n          if (instruction) {\n            lastSeen = instruction;\n          } else {\n            map[pc] = lastSeen;\n          }\n        }\n        return map;\n      }\n    ),\n\n    /**\n     * solidity.current.instruction\n     */\n    instruction: createLeaf(\n      [\"./instructionAtProgramCounter\", evm.current.step.programCounter],\n\n      (map, pc) => map[pc] || {}\n    ),\n\n    /**\n     * solidity.current.source\n     */\n    source: createLeaf(\n      [\"/info/sources\", \"./instruction\"],\n\n      (sources, { file: id }) => sources[id] || {}\n    ),\n\n    /**\n     * solidity.current.sourceRange\n     */\n    sourceRange: createLeaf([\"./instruction\"], getSourceRange),\n\n    /**\n     * solidity.current.isSourceRangeFinal\n     */\n    isSourceRangeFinal: createLeaf(\n      [\n        \"./instructionAtProgramCounter\",\n        evm.current.step.programCounter,\n        evm.next.step.programCounter\n      ],\n\n      (map, current, next) => {\n        if (!map[next]) {\n          return true;\n        }\n\n        current = map[current];\n        next = map[next];\n\n        return (\n          current.start != next.start ||\n          current.length != next.length ||\n          current.file != next.file\n        );\n      }\n    ),\n\n    /**\n     * solidity.current.isMultiline\n     */\n    isMultiline: createLeaf(\n      [\"./sourceRange\"],\n\n      ({ lines }) => lines.start.line != lines.end.line\n    ),\n\n    /**\n     * solidity.current.willJump\n     */\n    willJump: createLeaf([evm.current.step.isJump], isJump => isJump),\n\n    /**\n     * solidity.current.jumpDirection\n     */\n    jumpDirection: createLeaf([\"./instruction\"], (i = {}) => i.jump || \"-\"),\n\n    /**\n     * solidity.current.willCall\n     */\n    willCall: createLeaf([evm.current.step.isCall], x => x),\n\n    /**\n     * solidity.current.willCreate\n     */\n    willCreate: createLeaf([evm.current.step.isCreate], x => x),\n\n    /**\n     * solidity.current.callsPrecompile\n     */\n    callsPrecompile: createLeaf([evm.current.step.callsPrecompile], x => x),\n\n    /**\n     * solidity.current.willReturn\n     */\n    willReturn: createLeaf(\n      [evm.current.step.isHalting],\n      isHalting => isHalting\n    ),\n\n    //HACK: DUPLICATE CODE FOLLOWS\n    //The following code duplicates some selectors in ast.\n    //This exists to suppor the solidity.current.contractCall workaround below.\n    //This should be cleaned up later.\n\n    /**\n     * solidity.current.pointer\n     * HACK duplicates ast.current.pointer\n     */\n    pointer: createLeaf(\n      [\"./source\", \"./sourceRange\"],\n\n      ({ ast }, range) => findRange(ast, range.start, range.length)\n    ),\n\n    /**\n     * solidity.current.node\n     * HACK duplicates ast.current.node\n     */\n    node: createLeaf(\n      [\"./source\", \"./pointer\"],\n      ({ ast }, pointer) =>\n        pointer ? jsonpointer.get(ast, pointer) : jsonpointer.get(ast, \"\")\n    ),\n\n    /**\n     * solidity.current.isContractCall\n     * HACK WORKAROUND (only applies to solc version <0.5.1)\n     * this selector exists to work around a problem in solc\n     * it attempts to detect whether the current node is a contract method call\n     * (or library method call)\n     * it will not successfully detect this if the method was first placed in a\n     * function variable, only if it is being called directly\n     */\n    isContractCall: createLeaf(\n      [\"./node\"],\n      node =>\n        node !== undefined &&\n        node.nodeType === \"FunctionCall\" &&\n        node.expression !== undefined &&\n        node.expression.nodeType === \"MemberAccess\" &&\n        node.expression.expression !== undefined &&\n        (TruffleDecodeUtils.Definition.isContract(node.expression.expression) ||\n          TruffleDecodeUtils.Definition.isContractType(\n            node.expression.expression\n          ))\n    ),\n\n    /**\n     * solidity.current.needsFunctionDepthWorkaround\n     * HACK\n     * Determines if the solidity version used for the contract about to be\n     * called was <0.5.1, to determine whether to use the above workaround\n     * Only call this if the current step is a call or create!\n     */\n    needsFunctionDepthWorkaround: createLeaf(\n      [evm.current.step.callContext],\n      context =>\n        context.compiler !== undefined && //would be undefined for e.g. a precompile\n        context.compiler.name === \"solc\" &&\n        semver.satisfies(context.compiler.version, \"<0.5.1\")\n    )\n  }\n});\n\nexport default solidity;\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_xcd81anmt.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _extends2 = (cov_xcd81anmt.s[1]++, __webpack_require__(12));var _extends3 = (cov_xcd81anmt.s[2]++, _interopRequireDefault(_extends2));var _entries = (cov_xcd81anmt.s[3]++, __webpack_require__(8));var _entries2 = (cov_xcd81anmt.s[4]++, _interopRequireDefault(_entries));var _assign = (cov_xcd81anmt.s[5]++, __webpack_require__(9));var _assign2 = (cov_xcd81anmt.s[6]++, _interopRequireDefault(_assign));var _debug = (cov_xcd81anmt.s[7]++, __webpack_require__(0));var _debug2 = (cov_xcd81anmt.s[8]++, _interopRequireDefault(_debug));var _reselectTree = (cov_xcd81anmt.s[9]++, __webpack_require__(13));var _truffleSolidityUtils = (cov_xcd81anmt.s[10]++, __webpack_require__(62));var _truffleSolidityUtils2 = (cov_xcd81anmt.s[11]++, _interopRequireDefault(_truffleSolidityUtils));var _truffleCodeUtils = (cov_xcd81anmt.s[12]++, __webpack_require__(63));var _truffleCodeUtils2 = (cov_xcd81anmt.s[13]++, _interopRequireDefault(_truffleCodeUtils));var _truffleDecodeUtils = (cov_xcd81anmt.s[14]++, __webpack_require__(14));var TruffleDecodeUtils = (cov_xcd81anmt.s[15]++, _interopRequireWildcard(_truffleDecodeUtils));var _map = (cov_xcd81anmt.s[16]++, __webpack_require__(28));var _jsonPointer = (cov_xcd81anmt.s[17]++, __webpack_require__(23));var _jsonPointer2 = (cov_xcd81anmt.s[18]++, _interopRequireDefault(_jsonPointer));var _selectors = (cov_xcd81anmt.s[19]++, __webpack_require__(10));var _selectors2 = (cov_xcd81anmt.s[20]++, _interopRequireDefault(_selectors));function _interopRequireWildcard(obj) {
  cov_xcd81anmt.f[0]++;cov_xcd81anmt.s[21]++;if ((cov_xcd81anmt.b[1][0]++, obj) && (cov_xcd81anmt.b[1][1]++, obj.__esModule)) {
    cov_xcd81anmt.b[0][0]++;cov_xcd81anmt.s[22]++;return obj;
  } else {
    cov_xcd81anmt.b[0][1]++;var newObj = (cov_xcd81anmt.s[23]++, {});cov_xcd81anmt.s[24]++;if (obj != null) {
      cov_xcd81anmt.b[2][0]++;cov_xcd81anmt.s[25]++;for (var key in obj) {
        cov_xcd81anmt.s[26]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_xcd81anmt.b[3][0]++;cov_xcd81anmt.s[27]++;newObj[key] = obj[key];
        } else {
          cov_xcd81anmt.b[3][1]++;
        }
      }
    } else {
      cov_xcd81anmt.b[2][1]++;
    }cov_xcd81anmt.s[28]++;newObj.default = obj;cov_xcd81anmt.s[29]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_xcd81anmt.f[1]++;cov_xcd81anmt.s[30]++;return (cov_xcd81anmt.b[5][0]++, obj) && (cov_xcd81anmt.b[5][1]++, obj.__esModule) ? (cov_xcd81anmt.b[4][0]++, obj) : (cov_xcd81anmt.b[4][1]++, { default: obj });
}const debug = (cov_xcd81anmt.s[31]++, (0, _debug2.default)("debugger:solidity:selectors"));const semver = (cov_xcd81anmt.s[32]++, __webpack_require__(67));function getSourceRange(instruction = (cov_xcd81anmt.b[6][0]++, {})) {
  cov_xcd81anmt.f[2]++;cov_xcd81anmt.s[33]++;return { start: (cov_xcd81anmt.b[7][0]++, instruction.start) || (cov_xcd81anmt.b[7][1]++, 0), length: (cov_xcd81anmt.b[8][0]++, instruction.length) || (cov_xcd81anmt.b[8][1]++, 0), lines: (cov_xcd81anmt.b[9][0]++, instruction.range) || (cov_xcd81anmt.b[9][1]++, { start: { line: 0, column: 0 }, end: { line: 0, column: 0 } }) };
}let solidity = (cov_xcd81anmt.s[34]++, (0, _reselectTree.createSelectorTree)({ state: state => {
    cov_xcd81anmt.f[3]++;cov_xcd81anmt.s[35]++;return state.solidity;
  }, info: { sources: (0, _reselectTree.createLeaf)(["/state"], state => {
      cov_xcd81anmt.f[4]++;cov_xcd81anmt.s[36]++;return state.info.sources.byId;
    }), sourceMaps: (0, _reselectTree.createLeaf)(["/state"], state => {
      cov_xcd81anmt.f[5]++;cov_xcd81anmt.s[37]++;return state.info.sourceMaps.byContext;
    }) }, current: { sourceMap: (0, _reselectTree.createLeaf)([_selectors2.default.current.context, "/info/sourceMaps"], ({ context }, sourceMaps) => {
      cov_xcd81anmt.f[6]++;cov_xcd81anmt.s[38]++;return (cov_xcd81anmt.b[10][0]++, sourceMaps[context]) || (cov_xcd81anmt.b[10][1]++, {});
    }), functionDepth: state => {
      cov_xcd81anmt.f[7]++;cov_xcd81anmt.s[39]++;return state.solidity.proc.functionDepth;
    }, instructions: (0, _reselectTree.createLeaf)(["/info/sources", _selectors2.default.current.context, "./sourceMap"], (sources, { binary }, { sourceMap }) => {
      cov_xcd81anmt.f[8]++;cov_xcd81anmt.s[40]++;if (!binary) {
        cov_xcd81anmt.b[11][0]++;cov_xcd81anmt.s[41]++;return [];
      } else {
        cov_xcd81anmt.b[11][1]++;
      }let instructions = (cov_xcd81anmt.s[42]++, _truffleCodeUtils2.default.parseCode(binary));cov_xcd81anmt.s[43]++;if (!sourceMap) {
        cov_xcd81anmt.b[12][0]++;cov_xcd81anmt.s[44]++;sourceMap = "";cov_xcd81anmt.s[45]++;for (var i = 0; i < instructions.length; i++) {
          cov_xcd81anmt.s[46]++;sourceMap += i + ":" + i + ":1:-1;";
        }
      } else {
        cov_xcd81anmt.b[12][1]++;
      }var lineAndColumnMappings = (cov_xcd81anmt.s[47]++, (0, _assign2.default)({}, ...(0, _entries2.default)(sources).map(([id, { source }]) => {
        cov_xcd81anmt.f[9]++;cov_xcd81anmt.s[48]++;return { [id]: _truffleSolidityUtils2.default.getCharacterOffsetToLineAndColumnMapping((cov_xcd81anmt.b[13][0]++, source) || (cov_xcd81anmt.b[13][1]++, "")) };
      })));var humanReadableSourceMap = (cov_xcd81anmt.s[49]++, _truffleSolidityUtils2.default.getHumanReadableSourceMap(sourceMap));let primaryFile = (cov_xcd81anmt.s[50]++, humanReadableSourceMap[0].file);cov_xcd81anmt.s[51]++;debug("primaryFile %o", primaryFile);cov_xcd81anmt.s[52]++;return instructions.map((instruction, index) => {
        cov_xcd81anmt.f[10]++;const sourceMap = (cov_xcd81anmt.s[53]++, (cov_xcd81anmt.b[14][0]++, humanReadableSourceMap[index]) || (cov_xcd81anmt.b[14][1]++, {}));cov_xcd81anmt.s[54]++;return { instruction: (0, _extends3.default)({}, instruction, { index }), sourceMap };
      }).map(({ instruction, sourceMap }) => {
        cov_xcd81anmt.f[11]++;const { jump, start = (cov_xcd81anmt.b[15][0]++, 0), length = (cov_xcd81anmt.b[16][0]++, 0), file = (cov_xcd81anmt.b[17][0]++, primaryFile) } = (cov_xcd81anmt.s[55]++, sourceMap);const lineAndColumnMapping = (cov_xcd81anmt.s[56]++, (cov_xcd81anmt.b[18][0]++, lineAndColumnMappings[file]) || (cov_xcd81anmt.b[18][1]++, {}));const range = (cov_xcd81anmt.s[57]++, { start: (cov_xcd81anmt.b[19][0]++, lineAndColumnMapping[start]) || (cov_xcd81anmt.b[19][1]++, { line: null, column: null }), end: (cov_xcd81anmt.b[20][0]++, lineAndColumnMapping[start + length]) || (cov_xcd81anmt.b[20][1]++, { line: null, column: null }) });cov_xcd81anmt.s[58]++;if (range.start.line === null) {
          cov_xcd81anmt.b[21][0]++;cov_xcd81anmt.s[59]++;debug("sourceMap %o", sourceMap);
        } else {
          cov_xcd81anmt.b[21][1]++;
        }cov_xcd81anmt.s[60]++;return (0, _extends3.default)({}, instruction, { jump, start, length, file, range });
      });
    }), instructionAtProgramCounter: (0, _reselectTree.createLeaf)(["./instructions"], instructions => {
      cov_xcd81anmt.f[12]++;let map = (cov_xcd81anmt.s[61]++, []);cov_xcd81anmt.s[62]++;instructions.forEach(function (instruction) {
        cov_xcd81anmt.f[13]++;cov_xcd81anmt.s[63]++;map[instruction.pc] = instruction;
      });let lastSeen = (cov_xcd81anmt.s[64]++, null);cov_xcd81anmt.s[65]++;for (let [pc, instruction] of map.entries()) {
        cov_xcd81anmt.s[66]++;if (instruction) {
          cov_xcd81anmt.b[22][0]++;cov_xcd81anmt.s[67]++;lastSeen = instruction;
        } else {
          cov_xcd81anmt.b[22][1]++;cov_xcd81anmt.s[68]++;map[pc] = lastSeen;
        }
      }cov_xcd81anmt.s[69]++;return map;
    }), instruction: (0, _reselectTree.createLeaf)(["./instructionAtProgramCounter", _selectors2.default.current.step.programCounter], (map, pc) => {
      cov_xcd81anmt.f[14]++;cov_xcd81anmt.s[70]++;return (cov_xcd81anmt.b[23][0]++, map[pc]) || (cov_xcd81anmt.b[23][1]++, {});
    }), source: (0, _reselectTree.createLeaf)(["/info/sources", "./instruction"], (sources, { file: id }) => {
      cov_xcd81anmt.f[15]++;cov_xcd81anmt.s[71]++;return (cov_xcd81anmt.b[24][0]++, sources[id]) || (cov_xcd81anmt.b[24][1]++, {});
    }), sourceRange: (0, _reselectTree.createLeaf)(["./instruction"], getSourceRange), isSourceRangeFinal: (0, _reselectTree.createLeaf)(["./instructionAtProgramCounter", _selectors2.default.current.step.programCounter, _selectors2.default.next.step.programCounter], (map, current, next) => {
      cov_xcd81anmt.f[16]++;cov_xcd81anmt.s[72]++;if (!map[next]) {
        cov_xcd81anmt.b[25][0]++;cov_xcd81anmt.s[73]++;return true;
      } else {
        cov_xcd81anmt.b[25][1]++;
      }cov_xcd81anmt.s[74]++;current = map[current];cov_xcd81anmt.s[75]++;next = map[next];cov_xcd81anmt.s[76]++;return (cov_xcd81anmt.b[26][0]++, current.start != next.start) || (cov_xcd81anmt.b[26][1]++, current.length != next.length) || (cov_xcd81anmt.b[26][2]++, current.file != next.file);
    }), isMultiline: (0, _reselectTree.createLeaf)(["./sourceRange"], ({ lines }) => {
      cov_xcd81anmt.f[17]++;cov_xcd81anmt.s[77]++;return lines.start.line != lines.end.line;
    }), willJump: (0, _reselectTree.createLeaf)([_selectors2.default.current.step.isJump], isJump => {
      cov_xcd81anmt.f[18]++;cov_xcd81anmt.s[78]++;return isJump;
    }), jumpDirection: (0, _reselectTree.createLeaf)(["./instruction"], (i = (cov_xcd81anmt.b[27][0]++, {})) => {
      cov_xcd81anmt.f[19]++;cov_xcd81anmt.s[79]++;return (cov_xcd81anmt.b[28][0]++, i.jump) || (cov_xcd81anmt.b[28][1]++, "-");
    }), willCall: (0, _reselectTree.createLeaf)([_selectors2.default.current.step.isCall], x => {
      cov_xcd81anmt.f[20]++;cov_xcd81anmt.s[80]++;return x;
    }), willCreate: (0, _reselectTree.createLeaf)([_selectors2.default.current.step.isCreate], x => {
      cov_xcd81anmt.f[21]++;cov_xcd81anmt.s[81]++;return x;
    }), callsPrecompile: (0, _reselectTree.createLeaf)([_selectors2.default.current.step.callsPrecompile], x => {
      cov_xcd81anmt.f[22]++;cov_xcd81anmt.s[82]++;return x;
    }), willReturn: (0, _reselectTree.createLeaf)([_selectors2.default.current.step.isHalting], isHalting => {
      cov_xcd81anmt.f[23]++;cov_xcd81anmt.s[83]++;return isHalting;
    }), pointer: (0, _reselectTree.createLeaf)(["./source", "./sourceRange"], ({ ast }, range) => {
      cov_xcd81anmt.f[24]++;cov_xcd81anmt.s[84]++;return (0, _map.findRange)(ast, range.start, range.length);
    }), node: (0, _reselectTree.createLeaf)(["./source", "./pointer"], ({ ast }, pointer) => {
      cov_xcd81anmt.f[25]++;cov_xcd81anmt.s[85]++;return pointer ? (cov_xcd81anmt.b[29][0]++, _jsonPointer2.default.get(ast, pointer)) : (cov_xcd81anmt.b[29][1]++, _jsonPointer2.default.get(ast, ""));
    }), isContractCall: (0, _reselectTree.createLeaf)(["./node"], node => {
      cov_xcd81anmt.f[26]++;cov_xcd81anmt.s[86]++;return (cov_xcd81anmt.b[30][0]++, node !== undefined) && (cov_xcd81anmt.b[30][1]++, node.nodeType === "FunctionCall") && (cov_xcd81anmt.b[30][2]++, node.expression !== undefined) && (cov_xcd81anmt.b[30][3]++, node.expression.nodeType === "MemberAccess") && (cov_xcd81anmt.b[30][4]++, node.expression.expression !== undefined) && ((cov_xcd81anmt.b[30][5]++, TruffleDecodeUtils.Definition.isContract(node.expression.expression)) || (cov_xcd81anmt.b[30][6]++, TruffleDecodeUtils.Definition.isContractType(node.expression.expression)));
    }), needsFunctionDepthWorkaround: (0, _reselectTree.createLeaf)([_selectors2.default.current.step.callContext], context => {
      cov_xcd81anmt.f[27]++;cov_xcd81anmt.s[87]++;return (cov_xcd81anmt.b[31][0]++, context.compiler !== undefined) && (cov_xcd81anmt.b[31][1]++, context.compiler.name === "solc") && (cov_xcd81anmt.b[31][2]++, semver.satisfies(context.compiler.version, "<0.5.1"));
    }) } }));cov_xcd81anmt.s[88]++;exports.default = solidity;

/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = require("chai");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gatherArtifacts = exports.migrate = exports.compile = exports.defaultMigrations = exports.addMigrations = exports.addContracts = exports.createSandbox = exports.prepareContracts = undefined;

var _promise = __webpack_require__(20);

var _promise2 = _interopRequireDefault(_promise);

var _keys = __webpack_require__(17);

var _keys2 = _interopRequireDefault(_keys);

var _asyncToGenerator2 = __webpack_require__(1);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

let prepareContracts = exports.prepareContracts = (() => {
  var _ref = (0, _asyncToGenerator3.default)(function* (provider, sources = {}, migrations) {
    let config = yield createSandbox();

    let accounts = yield getAccounts(provider);

    config.networks["debugger"] = {
      provider: provider,
      network_id: "*",
      from: accounts[0]
    };
    config.network = "debugger";

    config.compilers = {
      solc: {
        version: "0.5.1",
        settings: {
          optimizer: { enabled: false, runs: 200 },
          evmVersion: "byzantium"
        }
      }
    };

    yield addContracts(config, sources);
    let { contracts, files } = yield compile(config);
    let contractNames = (0, _keys2.default)(contracts);

    if (!migrations) {
      migrations = yield defaultMigrations(contractNames);
    }

    yield addMigrations(config, migrations);
    yield migrate(config);

    let artifacts = yield gatherArtifacts(config);
    debug("artifacts: %o", artifacts.map(function (a) {
      return a.contractName;
    }));

    let abstractions = {};
    contractNames.forEach(function (name) {
      abstractions[name] = config.resolver.require(name);
    });

    return {
      files,
      abstractions,
      artifacts,
      config
    };
  });

  return function prepareContracts(_x) {
    return _ref.apply(this, arguments);
  };
})();

let createSandbox = exports.createSandbox = (() => {
  var _ref2 = (0, _asyncToGenerator3.default)(function* () {
    let config = yield new _promise2.default(function (accept, reject) {
      _truffleBox2.default.sandbox({
        unsafeCleanup: true,
        setGracefulCleanup: true,
        name: "default"
      }, function (err, result) {
        if (err) return reject(err);
        result.resolver = new _truffleResolver2.default(result);
        result.artifactor = new _truffleArtifactor2.default(result.contracts_build_directory);
        result.networks = {};

        accept(result);
      });
    });

    yield _fsExtra2.default.remove(_path2.default.join(config.contracts_directory, "MetaCoin.sol"));
    yield _fsExtra2.default.remove(_path2.default.join(config.contracts_directory, "ConvertLib.sol"));
    yield _fsExtra2.default.remove(_path2.default.join(config.migrations_directory, "2_deploy_contracts.js"));

    return config;
  });

  return function createSandbox() {
    return _ref2.apply(this, arguments);
  };
})();

let addContracts = exports.addContracts = (() => {
  var _ref3 = (0, _asyncToGenerator3.default)(function* (config, sources = {}) {
    let promises = [];
    for (let filename of (0, _keys2.default)(sources)) {
      let source = sources[filename];
      promises.push(_fsExtra2.default.outputFile(_path2.default.join(config.contracts_directory, filename), source));
    }

    return yield _promise2.default.all(promises);
  });

  return function addContracts(_x2) {
    return _ref3.apply(this, arguments);
  };
})();

let addMigrations = exports.addMigrations = (() => {
  var _ref4 = (0, _asyncToGenerator3.default)(function* (config, migrations = {}) {
    let promises = [];
    for (let filename of (0, _keys2.default)(migrations)) {
      let source = migrations[filename];
      promises.push(_fsExtra2.default.outputFile(_path2.default.join(config.migrations_directory, filename), source));
    }

    return yield _promise2.default.all(promises);
  });

  return function addMigrations(_x3) {
    return _ref4.apply(this, arguments);
  };
})();

let defaultMigrations = exports.defaultMigrations = (() => {
  var _ref5 = (0, _asyncToGenerator3.default)(function* (contractNames) {
    contractNames = contractNames.filter(function (name) {
      return name !== "Migrations";
    });

    let migrations = {};

    contractNames.forEach(function (contractName, i) {
      let index = i + 2; // start at 2 cause Migrations migration
      let filename = `${index}_migrate_${contractName}.js`;
      let source = `
      var ${contractName} = artifacts.require("${contractName}");

      module.exports = function(deployer) {
        deployer.deploy(${contractName});
      };
    `;

      migrations[filename] = source;
    });

    return migrations;
  });

  return function defaultMigrations(_x4) {
    return _ref5.apply(this, arguments);
  };
})();

let compile = exports.compile = (() => {
  var _ref6 = (0, _asyncToGenerator3.default)(function* (config) {
    return new _promise2.default(function (accept, reject) {
      _truffleWorkflowCompile2.default.compile(config.with({
        all: true,
        quiet: true
      }), function (err, result) {
        if (err) return reject(err);
        const { contracts, outputs } = result;
        debug("result %O", result);
        return accept({ contracts, files: outputs.solc });
      });
    });
  });

  return function compile(_x5) {
    return _ref6.apply(this, arguments);
  };
})();

let migrate = exports.migrate = (() => {
  var _ref7 = (0, _asyncToGenerator3.default)(function* (config) {
    return new _promise2.default(function (accept, reject) {
      _truffleMigrate2.default.run(config.with({
        quiet: true
      }), function (err, contracts) {
        if (err) return reject(err);
        accept(contracts);
      });
    });
  });

  return function migrate(_x6) {
    return _ref7.apply(this, arguments);
  };
})();

let gatherArtifacts = exports.gatherArtifacts = (() => {
  var _ref8 = (0, _asyncToGenerator3.default)(function* (config) {
    return _truffleDebugUtils2.default.gatherArtifacts(config);
  });

  return function gatherArtifacts(_x7) {
    return _ref8.apply(this, arguments);
  };
})();

exports.getAccounts = getAccounts;

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _path = __webpack_require__(43);

var _path2 = _interopRequireDefault(_path);

var _fsExtra = __webpack_require__(44);

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _truffleWorkflowCompile = __webpack_require__(45);

var _truffleWorkflowCompile2 = _interopRequireDefault(_truffleWorkflowCompile);

var _truffleDebugUtils = __webpack_require__(46);

var _truffleDebugUtils2 = _interopRequireDefault(_truffleDebugUtils);

var _truffleArtifactor = __webpack_require__(47);

var _truffleArtifactor2 = _interopRequireDefault(_truffleArtifactor);

var _web = __webpack_require__(30);

var _web2 = _interopRequireDefault(_web);

var _truffleMigrate = __webpack_require__(48);

var _truffleMigrate2 = _interopRequireDefault(_truffleMigrate);

var _truffleBox = __webpack_require__(49);

var _truffleBox2 = _interopRequireDefault(_truffleBox);

var _truffleResolver = __webpack_require__(50);

var _truffleResolver2 = _interopRequireDefault(_truffleResolver);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("test:helpers");

function getAccounts(provider) {
  let web3 = new _web2.default(provider);
  return new _promise2.default(function (accept, reject) {
    web3.eth.getAccounts(function (err, accounts) {
      if (err) return reject(err);
      accept(accounts);
    });
  });
}

/***/ }),
/* 6 */
/***/ (function(module, exports) {

module.exports = require("ganache-core");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_1yvgdvxf3o = function () {
  var path = "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/debugger.js",
      hash = "b84c0c8f560000350d6955f8d6d8d7efdf58f095",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/debugger.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 25 }, end: { line: 7, column: 74 } }, "2": { start: { line: 9, column: 25 }, end: { line: 9, column: 67 } }, "3": { start: { line: 11, column: 13 }, end: { line: 11, column: 29 } }, "4": { start: { line: 13, column: 14 }, end: { line: 13, column: 44 } }, "5": { start: { line: 15, column: 21 }, end: { line: 15, column: 46 } }, "6": { start: { line: 17, column: 22 }, end: { line: 17, column: 60 } }, "7": { start: { line: 19, column: 15 }, end: { line: 19, column: 35 } }, "8": { start: { line: 21, column: 16 }, end: { line: 21, column: 48 } }, "9": { start: { line: 23, column: 20 }, end: { line: 23, column: 44 } }, "10": { start: { line: 25, column: 17 }, end: { line: 25, column: 44 } }, "11": { start: { line: 27, column: 18 }, end: { line: 27, column: 52 } }, "12": { start: { line: 29, column: 18 }, end: { line: 29, column: 44 } }, "13": { start: { line: 31, column: 18 }, end: { line: 31, column: 53 } }, "14": { start: { line: 33, column: 18 }, end: { line: 33, column: 46 } }, "15": { start: { line: 35, column: 18 }, end: { line: 35, column: 53 } }, "16": { start: { line: 37, column: 18 }, end: { line: 37, column: 44 } }, "17": { start: { line: 39, column: 18 }, end: { line: 39, column: 53 } }, "18": { start: { line: 41, column: 18 }, end: { line: 41, column: 49 } }, "19": { start: { line: 43, column: 19 }, end: { line: 43, column: 54 } }, "20": { start: { line: 45, column: 19 }, end: { line: 45, column: 49 } }, "21": { start: { line: 47, column: 19 }, end: { line: 47, column: 55 } }, "22": { start: { line: 49, column: 19 }, end: { line: 49, column: 52 } }, "23": { start: { line: 51, column: 19 }, end: { line: 51, column: 55 } }, "24": { start: { line: 53, column: 39 }, end: { line: 53, column: 93 } }, "25": { start: { line: 55, column: 14 }, end: { line: 55, column: 46 } }, "26": { start: { line: 75, column: 4 }, end: { line: 75, column: 28 } }, "27": { start: { line: 86, column: 16 }, end: { line: 86, column: 20 } }, "28": { start: { line: 88, column: 4 }, end: { line: 100, column: 9 } }, "29": { start: { line: 89, column: 6 }, end: { line: 89, column: 74 } }, "30": { start: { line: 91, column: 20 }, end: { line: 91, column: 101 } }, "31": { start: { line: 93, column: 6 }, end: { line: 97, column: 7 } }, "32": { start: { line: 94, column: 8 }, end: { line: 94, column: 30 } }, "33": { start: { line: 96, column: 8 }, end: { line: 96, column: 16 } }, "34": { start: { line: 99, column: 6 }, end: { line: 99, column: 32 } }, "35": { start: { line: 109, column: 4 }, end: { line: 109, column: 25 } }, "36": { start: { line: 127, column: 4 }, end: { line: 135, column: 7 } }, "37": { start: { line: 139, column: 0 }, end: { line: 139, column: 27 } } }, fnMap: { "0": { name: "_interopRequireDefault", decl: { start: { line: 53, column: 9 }, end: { line: 53, column: 31 } }, loc: { start: { line: 53, column: 37 }, end: { line: 53, column: 95 } }, line: 53 }, "1": { name: "(anonymous_1)", decl: { start: { line: 71, column: 2 }, end: { line: 71, column: 3 } }, loc: { start: { line: 71, column: 23 }, end: { line: 76, column: 3 } }, line: 71 }, "2": { name: "(anonymous_2)", decl: { start: { line: 85, column: 2 }, end: { line: 85, column: 3 } }, loc: { start: { line: 85, column: 37 }, end: { line: 101, column: 3 } }, line: 85 }, "3": { name: "(anonymous_3)", decl: { start: { line: 88, column: 43 }, end: { line: 88, column: 44 } }, loc: { start: { line: 88, column: 56 }, end: { line: 100, column: 5 } }, line: 88 }, "4": { name: "(anonymous_4)", decl: { start: { line: 108, column: 2 }, end: { line: 108, column: 3 } }, loc: { start: { line: 108, column: 12 }, end: { line: 110, column: 3 } }, line: 108 }, "5": { name: "(anonymous_5)", decl: { start: { line: 126, column: 2 }, end: { line: 126, column: 3 } }, loc: { start: { line: 126, column: 25 }, end: { line: 136, column: 3 } }, line: 126 } }, branchMap: { "0": { loc: { start: { line: 53, column: 46 }, end: { line: 53, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 53, column: 70 }, end: { line: 53, column: 73 } }, { start: { line: 53, column: 76 }, end: { line: 53, column: 92 } }], line: 53 }, "1": { loc: { start: { line: 53, column: 46 }, end: { line: 53, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 53, column: 46 }, end: { line: 53, column: 49 } }, { start: { line: 53, column: 53 }, end: { line: 53, column: 67 } }], line: 53 }, "2": { loc: { start: { line: 85, column: 23 }, end: { line: 85, column: 35 } }, type: "default-arg", locations: [{ start: { line: 85, column: 33 }, end: { line: 85, column: 35 } }], line: 85 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0] }, inputSourceMap: { version: 3, sources: ["lib/debugger.js"], names: ["debug", "Debugger", "constructor", "session", "_session", "forTx", "txHash", "options", "expect", "Session", "contracts", "files", "provider", "ready", "e", "connect", "selectors", "ast", "astSelector", "data", "dataSelector", "trace", "traceSelector", "evm", "evmSelector", "solidity", "soliditySelector", "sessionSelector", "controller", "controllerSelector"], mappings: ";;;;;;;;;;AAAA;;;;AACA;;;;AAEA;;;;AAEA;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,MAAMA,QAAQ,qBAAY,UAAZ,CAAd;;AAEA;;;;;;;;;AASe,MAAMC,QAAN,CAAe;AAC5B;;;;AAIAC,cAAYC,OAAZ,EAAqB;AACnB;;;AAGA,SAAKC,QAAL,GAAgBD,OAAhB;AACD;;AAED;;;;;;;AAOA,SAAaE,KAAb,CAAmBC,MAAnB,EAA2BC,UAAU,EAArC,EAAyC;AAAA;;AAAA;AACvCC,8BAAOD,OAAP,CAAeA,OAAf,EAAwB,CACtB,WADsB,EAEtB,UAFsB,CAAxB;;AAKA,UAAIJ,UAAU,IAAIM,iBAAJ,CACZF,QAAQG,SADI,EACOH,QAAQI,KADf,EAEZL,MAFY,EAEJC,QAAQK,QAFJ,CAAd;;AAKA,UAAI;AACF,cAAMT,QAAQU,KAAR,EAAN;AACD,OAFD,CAEE,OAAOC,CAAP,EAAU;AACV,cAAMA,CAAN;AACD;;AAED,aAAO,IAAI,KAAJ,CAASX,OAAT,CAAP;AAjBuC;AAkBxC;;AAGD;;;;;AAKAY,YAAU;AACR,WAAO,KAAKX,QAAZ;AACD;;AAED;;;;;;;;;;;;;;AAcA,aAAWY,SAAX,GAAuB;AACrB,WAAO,wCAAqB;AAC1BC,WAAKC,mBADqB;AAE1BC,YAAMC,mBAFoB;AAG1BC,aAAOC,mBAHmB;AAI1BC,WAAKC,mBAJqB;AAK1BC,gBAAUC,oBALgB;AAM1BvB,eAASwB,oBANiB;AAO1BC,kBAAYC;AAPc,KAArB,CAAP;AASD;AAzE2B;;kBAAT5B,Q,EA4ErB", file: "debugger.js", sourceRoot: "/Users/tyler/projects/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from 'debug';\nimport expect from \"truffle-expect\";\n\nimport Session from \"./session\";\n\nimport { createNestedSelector } from \"reselect-tree\";\n\nimport dataSelector from \"./data/selectors\";\nimport astSelector from \"./ast/selectors\";\nimport traceSelector from \"./trace/selectors\";\nimport evmSelector from \"./evm/selectors\";\nimport soliditySelector from \"./solidity/selectors\";\nimport sessionSelector from \"./session/selectors\";\nimport controllerSelector from \"./controller/selectors\";\n\nconst debug = debugModule(\"debugger\");\n\n/**\n * @example\n * let session = Debugger\n *   .forTx(<txHash>, {\n *     contracts: [<contract obj>, ...],\n *     provider: <provider instance>\n *   })\n *   .connect();\n */\nexport default class Debugger {\n  /**\n   * @param {Session} session - debugger session\n   * @private\n   */\n  constructor(session) {\n    /**\n     * @private\n     */\n    this._session = session;\n  }\n\n  /**\n   * Instantiates a Debugger for a given transaction hash.\n   *\n   * @param {String} txHash - transaction hash with leading \"0x\"\n   * @param {{contracts: Array<Contract>, files: Array<String>, provider: Web3Provider}} options -\n   * @return {Debugger} instance\n   */\n  static async forTx(txHash, options = {}) {\n    expect.options(options, [\n      \"contracts\",\n      \"provider\"\n    ]);\n\n    let session = new Session(\n      options.contracts, options.files,\n      txHash, options.provider\n    );\n\n    try {\n      await session.ready();\n    } catch (e) {\n      throw e;\n    }\n\n    return new this(session);\n  }\n\n\n  /**\n   * Connects to the instantiated Debugger.\n   *\n   * @return {Session} session instance\n   */\n  connect() {\n    return this._session;\n  }\n\n  /**\n   * Exported selectors\n   *\n   * See individual selector docs for full listing\n   *\n   * @example\n   * Debugger.selectors.ast.current.tree\n   *\n   * @example\n   * Debugger.selectors.solidity.current.instruction\n   *\n   * @example\n   * Debugger.selectors.trace.steps\n   */\n  static get selectors() {\n    return createNestedSelector({\n      ast: astSelector,\n      data: dataSelector,\n      trace: traceSelector,\n      evm: evmSelector,\n      solidity: soliditySelector,\n      session: sessionSelector,\n      controller: controllerSelector,\n    });\n  }\n}\n\n/**\n * @typedef {Object} Contract\n * @property {string} contractName contract name\n * @property {string} source solidity source code\n * @property {string} sourcePath path to source file\n * @property {string} binary 0x-prefixed hex string with create bytecode\n * @property {string} sourceMap solidity source map for create bytecode\n * @property {Object} ast Abstract Syntax Tree from Solidity\n * @property {string} deployedBinary 0x-prefixed compiled binary (on chain)\n * @property {string} deployedSourceMap solidity source map for on-chain bytecode\n */\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_1yvgdvxf3o.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _asyncToGenerator2 = (cov_1yvgdvxf3o.s[1]++, __webpack_require__(1));var _asyncToGenerator3 = (cov_1yvgdvxf3o.s[2]++, _interopRequireDefault(_asyncToGenerator2));var _debug = (cov_1yvgdvxf3o.s[3]++, __webpack_require__(0));var _debug2 = (cov_1yvgdvxf3o.s[4]++, _interopRequireDefault(_debug));var _truffleExpect = (cov_1yvgdvxf3o.s[5]++, __webpack_require__(51));var _truffleExpect2 = (cov_1yvgdvxf3o.s[6]++, _interopRequireDefault(_truffleExpect));var _session = (cov_1yvgdvxf3o.s[7]++, __webpack_require__(52));var _session2 = (cov_1yvgdvxf3o.s[8]++, _interopRequireDefault(_session));var _reselectTree = (cov_1yvgdvxf3o.s[9]++, __webpack_require__(13));var _selectors = (cov_1yvgdvxf3o.s[10]++, __webpack_require__(22));var _selectors2 = (cov_1yvgdvxf3o.s[11]++, _interopRequireDefault(_selectors));var _selectors3 = (cov_1yvgdvxf3o.s[12]++, __webpack_require__(18));var _selectors4 = (cov_1yvgdvxf3o.s[13]++, _interopRequireDefault(_selectors3));var _selectors5 = (cov_1yvgdvxf3o.s[14]++, __webpack_require__(11));var _selectors6 = (cov_1yvgdvxf3o.s[15]++, _interopRequireDefault(_selectors5));var _selectors7 = (cov_1yvgdvxf3o.s[16]++, __webpack_require__(10));var _selectors8 = (cov_1yvgdvxf3o.s[17]++, _interopRequireDefault(_selectors7));var _selectors9 = (cov_1yvgdvxf3o.s[18]++, __webpack_require__(3));var _selectors10 = (cov_1yvgdvxf3o.s[19]++, _interopRequireDefault(_selectors9));var _selectors11 = (cov_1yvgdvxf3o.s[20]++, __webpack_require__(29));var _selectors12 = (cov_1yvgdvxf3o.s[21]++, _interopRequireDefault(_selectors11));var _selectors13 = (cov_1yvgdvxf3o.s[22]++, __webpack_require__(38));var _selectors14 = (cov_1yvgdvxf3o.s[23]++, _interopRequireDefault(_selectors13));function _interopRequireDefault(obj) {
  cov_1yvgdvxf3o.f[0]++;cov_1yvgdvxf3o.s[24]++;return (cov_1yvgdvxf3o.b[1][0]++, obj) && (cov_1yvgdvxf3o.b[1][1]++, obj.__esModule) ? (cov_1yvgdvxf3o.b[0][0]++, obj) : (cov_1yvgdvxf3o.b[0][1]++, { default: obj });
}const debug = (cov_1yvgdvxf3o.s[25]++, (0, _debug2.default)("debugger"));class Debugger {
  constructor(session) {
    cov_1yvgdvxf3o.f[1]++;cov_1yvgdvxf3o.s[26]++;this._session = session;
  }static forTx(txHash, options = (cov_1yvgdvxf3o.b[2][0]++, {})) {
    cov_1yvgdvxf3o.f[2]++;var _this = (cov_1yvgdvxf3o.s[27]++, this);cov_1yvgdvxf3o.s[28]++;return (0, _asyncToGenerator3.default)(function* () {
      cov_1yvgdvxf3o.f[3]++;cov_1yvgdvxf3o.s[29]++;_truffleExpect2.default.options(options, ["contracts", "provider"]);let session = (cov_1yvgdvxf3o.s[30]++, new _session2.default(options.contracts, options.files, txHash, options.provider));cov_1yvgdvxf3o.s[31]++;try {
        cov_1yvgdvxf3o.s[32]++;yield session.ready();
      } catch (e) {
        cov_1yvgdvxf3o.s[33]++;throw e;
      }cov_1yvgdvxf3o.s[34]++;return new _this(session);
    })();
  }connect() {
    cov_1yvgdvxf3o.f[4]++;cov_1yvgdvxf3o.s[35]++;return this._session;
  }static get selectors() {
    cov_1yvgdvxf3o.f[5]++;cov_1yvgdvxf3o.s[36]++;return (0, _reselectTree.createNestedSelector)({ ast: _selectors4.default, data: _selectors2.default, trace: _selectors6.default, evm: _selectors8.default, solidity: _selectors10.default, session: _selectors12.default, controller: _selectors14.default });
  }
}cov_1yvgdvxf3o.s[37]++;exports.default = Debugger;

/***/ }),
/* 8 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/core-js/object/entries");

/***/ }),
/* 9 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/core-js/object/assign");

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_2niifnscya = function () {
  var path = "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/evm/selectors/index.js",
      hash = "a0fd96e49935e64bfe10a728b74b2c3b994a8c22",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/evm/selectors/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 15 }, end: { line: 7, column: 62 } }, "2": { start: { line: 9, column: 16 }, end: { line: 9, column: 48 } }, "3": { start: { line: 11, column: 14 }, end: { line: 11, column: 60 } }, "4": { start: { line: 13, column: 15 }, end: { line: 13, column: 46 } }, "5": { start: { line: 15, column: 16 }, end: { line: 15, column: 56 } }, "6": { start: { line: 17, column: 16 }, end: { line: 17, column: 49 } }, "7": { start: { line: 19, column: 13 }, end: { line: 19, column: 29 } }, "8": { start: { line: 21, column: 14 }, end: { line: 21, column: 44 } }, "9": { start: { line: 23, column: 20 }, end: { line: 23, column: 44 } }, "10": { start: { line: 25, column: 23 }, end: { line: 25, column: 50 } }, "11": { start: { line: 27, column: 24 }, end: { line: 27, column: 64 } }, "12": { start: { line: 29, column: 17 }, end: { line: 29, column: 47 } }, "13": { start: { line: 31, column: 18 }, end: { line: 31, column: 52 } }, "14": { start: { line: 33, column: 15 }, end: { line: 33, column: 37 } }, "15": { start: { line: 35, column: 39 }, end: { line: 35, column: 93 } }, "16": { start: { line: 37, column: 14 }, end: { line: 37, column: 60 } }, "17": { start: { line: 41, column: 2 }, end: { line: 49, column: 3 } }, "18": { start: { line: 42, column: 4 }, end: { line: 42, column: 32 } }, "19": { start: { line: 43, column: 4 }, end: { line: 45, column: 5 } }, "20": { start: { line: 44, column: 6 }, end: { line: 44, column: 25 } }, "21": { start: { line: 46, column: 4 }, end: { line: 46, column: 27 } }, "22": { start: { line: 48, column: 4 }, end: { line: 48, column: 28 } }, "23": { start: { line: 51, column: 16 }, end: { line: 51, column: 48 } }, "24": { start: { line: 53, column: 2 }, end: { line: 55, column: 5 } }, "25": { start: { line: 63, column: 13 }, end: { line: 99, column: 3 } }, "26": { start: { line: 69, column: 75 }, end: { line: 69, column: 94 } }, "27": { start: { line: 74, column: 71 }, end: { line: 74, column: 78 } }, "28": { start: { line: 79, column: 63 }, end: { line: 79, column: 116 } }, "29": { start: { line: 86, column: 63 }, end: { line: 86, column: 100 } }, "30": { start: { line: 91, column: 65 }, end: { line: 91, column: 104 } }, "31": { start: { line: 98, column: 66 }, end: { line: 98, column: 106 } }, "32": { start: { line: 101, column: 2 }, end: { line: 159, column: 3 } }, "33": { start: { line: 102, column: 23 }, end: { line: 102, column: 107 } }, "34": { start: { line: 102, column: 31 }, end: { line: 102, column: 107 } }, "35": { start: { line: 104, column: 4 }, end: { line: 106, column: 5 } }, "36": { start: { line: 105, column: 6 }, end: { line: 105, column: 28 } }, "37": { start: { line: 108, column: 4 }, end: { line: 158, column: 7 } }, "38": { start: { line: 115, column: 8 }, end: { line: 115, column: 34 } }, "39": { start: { line: 115, column: 22 }, end: { line: 115, column: 34 } }, "40": { start: { line: 117, column: 22 }, end: { line: 117, column: 45 } }, "41": { start: { line: 118, column: 8 }, end: { line: 118, column: 47 } }, "42": { start: { line: 119, column: 8 }, end: { line: 119, column: 23 } }, "43": { start: { line: 128, column: 8 }, end: { line: 128, column: 34 } }, "44": { start: { line: 128, column: 22 }, end: { line: 128, column: 34 } }, "45": { start: { line: 132, column: 23 }, end: { line: 132, column: 64 } }, "46": { start: { line: 133, column: 23 }, end: { line: 133, column: 64 } }, "47": { start: { line: 135, column: 8 }, end: { line: 135, column: 73 } }, "48": { start: { line: 143, column: 198 }, end: { line: 143, column: 259 } }, "49": { start: { line: 152, column: 8 }, end: { line: 152, column: 34 } }, "50": { start: { line: 152, column: 22 }, end: { line: 152, column: 34 } }, "51": { start: { line: 154, column: 26 }, end: { line: 154, column: 50 } }, "52": { start: { line: 155, column: 25 }, end: { line: 155, column: 48 } }, "53": { start: { line: 156, column: 8 }, end: { line: 156, column: 23 } }, "54": { start: { line: 161, column: 2 }, end: { line: 161, column: 14 } }, "55": { start: { line: 164, column: 12 }, end: { line: 280, column: 2 } }, "56": { start: { line: 168, column: 18 }, end: { line: 168, column: 27 } }, "57": { start: { line: 177, column: 65 }, end: { line: 177, column: 94 } }, "58": { start: { line: 182, column: 66 }, end: { line: 182, column: 96 } }, "59": { start: { line: 188, column: 60 }, end: { line: 188, column: 88 } }, "60": { start: { line: 195, column: 65 }, end: { line: 221, column: 7 } }, "61": { start: { line: 203, column: 26 }, end: { line: 203, column: 30 } }, "62": { start: { line: 206, column: 8 }, end: { line: 208, column: 9 } }, "63": { start: { line: 207, column: 10 }, end: { line: 207, column: 20 } }, "64": { start: { line: 210, column: 24 }, end: { line: 213, column: 125 } }, "65": { start: { line: 210, column: 94 }, end: { line: 213, column: 9 } }, "66": { start: { line: 213, column: 37 }, end: { line: 213, column: 74 } }, "67": { start: { line: 213, column: 119 }, end: { line: 213, column: 124 } }, "68": { start: { line: 215, column: 8 }, end: { line: 218, column: 9 } }, "69": { start: { line: 216, column: 30 }, end: { line: 216, column: 40 } }, "70": { start: { line: 217, column: 10 }, end: { line: 217, column: 29 } }, "71": { start: { line: 220, column: 8 }, end: { line: 220, column: 18 } }, "72": { start: { line: 232, column: 24 }, end: { line: 232, column: 48 } }, "73": { start: { line: 237, column: 66 }, end: { line: 237, column: 109 } }, "74": { start: { line: 243, column: 75 }, end: { line: 243, column: 130 } }, "75": { start: { line: 243, column: 96 }, end: { line: 243, column: 122 } }, "76": { start: { line: 255, column: 110 }, end: { line: 257, column: 5 } }, "77": { start: { line: 256, column: 81 }, end: { line: 256, column: 92 } }, "78": { start: { line: 274, column: 110 }, end: { line: 276, column: 5 } }, "79": { start: { line: 275, column: 81 }, end: { line: 275, column: 92 } }, "80": { start: { line: 282, column: 0 }, end: { line: 282, column: 22 } } }, fnMap: { "0": { name: "_interopRequireDefault", decl: { start: { line: 35, column: 9 }, end: { line: 35, column: 31 } }, loc: { start: { line: 35, column: 37 }, end: { line: 35, column: 95 } }, line: 35 }, "1": { name: "findContext", decl: { start: { line: 39, column: 9 }, end: { line: 39, column: 20 } }, loc: { start: { line: 39, column: 71 }, end: { line: 56, column: 1 } }, line: 39 }, "2": { name: "createStepSelectors", decl: { start: { line: 62, column: 9 }, end: { line: 62, column: 28 } }, loc: { start: { line: 62, column: 49 }, end: { line: 162, column: 1 } }, line: 62 }, "3": { name: "(anonymous_3)", decl: { start: { line: 69, column: 49 }, end: { line: 69, column: 50 } }, loc: { start: { line: 69, column: 75 }, end: { line: 69, column: 94 } }, line: 69 }, "4": { name: "(anonymous_4)", decl: { start: { line: 74, column: 63 }, end: { line: 74, column: 64 } }, loc: { start: { line: 74, column: 71 }, end: { line: 74, column: 78 } }, line: 74 }, "5": { name: "(anonymous_5)", decl: { start: { line: 79, column: 55 }, end: { line: 79, column: 56 } }, loc: { start: { line: 79, column: 63 }, end: { line: 79, column: 116 } }, line: 79 }, "6": { name: "(anonymous_6)", decl: { start: { line: 86, column: 55 }, end: { line: 86, column: 56 } }, loc: { start: { line: 86, column: 63 }, end: { line: 86, column: 100 } }, line: 86 }, "7": { name: "(anonymous_7)", decl: { start: { line: 91, column: 57 }, end: { line: 91, column: 58 } }, loc: { start: { line: 91, column: 65 }, end: { line: 91, column: 104 } }, line: 91 }, "8": { name: "(anonymous_8)", decl: { start: { line: 98, column: 58 }, end: { line: 98, column: 59 } }, loc: { start: { line: 98, column: 66 }, end: { line: 98, column: 106 } }, line: 98 }, "9": { name: "(anonymous_9)", decl: { start: { line: 102, column: 23 }, end: { line: 102, column: 24 } }, loc: { start: { line: 102, column: 31 }, end: { line: 102, column: 107 } }, line: 102 }, "10": { name: "(anonymous_10)", decl: { start: { line: 114, column: 81 }, end: { line: 114, column: 82 } }, loc: { start: { line: 114, column: 111 }, end: { line: 120, column: 7 } }, line: 114 }, "11": { name: "(anonymous_11)", decl: { start: { line: 127, column: 84 }, end: { line: 127, column: 85 } }, loc: { start: { line: 127, column: 122 }, end: { line: 136, column: 7 } }, line: 127 }, "12": { name: "(anonymous_12)", decl: { start: { line: 143, column: 148 }, end: { line: 143, column: 149 } }, loc: { start: { line: 143, column: 198 }, end: { line: 143, column: 259 } }, line: 143 }, "13": { name: "(anonymous_13)", decl: { start: { line: 151, column: 109 }, end: { line: 151, column: 110 } }, loc: { start: { line: 151, column: 143 }, end: { line: 157, column: 7 } }, line: 151 }, "14": { name: "(anonymous_14)", decl: { start: { line: 168, column: 9 }, end: { line: 168, column: 10 } }, loc: { start: { line: 168, column: 18 }, end: { line: 168, column: 27 } }, line: 168 }, "15": { name: "(anonymous_15)", decl: { start: { line: 177, column: 56 }, end: { line: 177, column: 57 } }, loc: { start: { line: 177, column: 65 }, end: { line: 177, column: 94 } }, line: 177 }, "16": { name: "(anonymous_16)", decl: { start: { line: 182, column: 57 }, end: { line: 182, column: 58 } }, loc: { start: { line: 182, column: 66 }, end: { line: 182, column: 96 } }, line: 182 }, "17": { name: "(anonymous_17)", decl: { start: { line: 188, column: 51 }, end: { line: 188, column: 52 } }, loc: { start: { line: 188, column: 60 }, end: { line: 188, column: 88 } }, line: 188 }, "18": { name: "(anonymous_18)", decl: { start: { line: 195, column: 53 }, end: { line: 195, column: 54 } }, loc: { start: { line: 195, column: 65 }, end: { line: 221, column: 7 } }, line: 195 }, "19": { name: "(anonymous_19)", decl: { start: { line: 195, column: 65 }, end: { line: 195, column: 66 } }, loc: { start: { line: 195, column: 75 }, end: { line: 221, column: 7 } }, line: 195 }, "20": { name: "(anonymous_20)", decl: { start: { line: 210, column: 61 }, end: { line: 210, column: 62 } }, loc: { start: { line: 210, column: 94 }, end: { line: 213, column: 9 } }, line: 210 }, "21": { name: "(anonymous_21)", decl: { start: { line: 213, column: 19 }, end: { line: 213, column: 20 } }, loc: { start: { line: 213, column: 37 }, end: { line: 213, column: 74 } }, line: 213 }, "22": { name: "(anonymous_22)", decl: { start: { line: 213, column: 81 }, end: { line: 213, column: 82 } }, loc: { start: { line: 213, column: 119 }, end: { line: 213, column: 124 } }, line: 213 }, "23": { name: "(anonymous_23)", decl: { start: { line: 232, column: 15 }, end: { line: 232, column: 16 } }, loc: { start: { line: 232, column: 24 }, end: { line: 232, column: 48 } }, line: 232 }, "24": { name: "(anonymous_24)", decl: { start: { line: 237, column: 57 }, end: { line: 237, column: 58 } }, loc: { start: { line: 237, column: 66 }, end: { line: 237, column: 109 } }, line: 237 }, "25": { name: "(anonymous_25)", decl: { start: { line: 243, column: 66 }, end: { line: 243, column: 67 } }, loc: { start: { line: 243, column: 75 }, end: { line: 243, column: 130 } }, line: 243 }, "26": { name: "(anonymous_26)", decl: { start: { line: 243, column: 88 }, end: { line: 243, column: 89 } }, loc: { start: { line: 243, column: 96 }, end: { line: 243, column: 122 } }, line: 243 }, "27": { name: "(anonymous_27)", decl: { start: { line: 255, column: 100 }, end: { line: 255, column: 101 } }, loc: { start: { line: 255, column: 110 }, end: { line: 257, column: 5 } }, line: 255 }, "28": { name: "(anonymous_28)", decl: { start: { line: 256, column: 73 }, end: { line: 256, column: 74 } }, loc: { start: { line: 256, column: 81 }, end: { line: 256, column: 92 } }, line: 256 }, "29": { name: "(anonymous_29)", decl: { start: { line: 274, column: 100 }, end: { line: 274, column: 101 } }, loc: { start: { line: 274, column: 110 }, end: { line: 276, column: 5 } }, line: 274 }, "30": { name: "(anonymous_30)", decl: { start: { line: 275, column: 73 }, end: { line: 275, column: 74 } }, loc: { start: { line: 275, column: 81 }, end: { line: 275, column: 92 } }, line: 275 } }, branchMap: { "0": { loc: { start: { line: 35, column: 46 }, end: { line: 35, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 35, column: 70 }, end: { line: 35, column: 73 } }, { start: { line: 35, column: 76 }, end: { line: 35, column: 92 } }], line: 35 }, "1": { loc: { start: { line: 35, column: 46 }, end: { line: 35, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 35, column: 46 }, end: { line: 35, column: 49 } }, { start: { line: 35, column: 53 }, end: { line: 35, column: 67 } }], line: 35 }, "2": { loc: { start: { line: 41, column: 2 }, end: { line: 49, column: 3 } }, type: "if", locations: [{ start: { line: 41, column: 2 }, end: { line: 49, column: 3 } }, { start: { line: 41, column: 2 }, end: { line: 49, column: 3 } }], line: 41 }, "3": { loc: { start: { line: 43, column: 4 }, end: { line: 45, column: 5 } }, type: "if", locations: [{ start: { line: 43, column: 4 }, end: { line: 45, column: 5 } }, { start: { line: 43, column: 4 }, end: { line: 45, column: 5 } }], line: 43 }, "4": { loc: { start: { line: 51, column: 26 }, end: { line: 51, column: 38 } }, type: "binary-expr", locations: [{ start: { line: 51, column: 26 }, end: { line: 51, column: 32 } }, { start: { line: 51, column: 36 }, end: { line: 51, column: 38 } }], line: 51 }, "5": { loc: { start: { line: 62, column: 35 }, end: { line: 62, column: 47 } }, type: "default-arg", locations: [{ start: { line: 62, column: 43 }, end: { line: 62, column: 47 } }], line: 62 }, "6": { loc: { start: { line: 79, column: 63 }, end: { line: 79, column: 116 } }, type: "binary-expr", locations: [{ start: { line: 79, column: 63 }, end: { line: 79, column: 84 } }, { start: { line: 79, column: 88 }, end: { line: 79, column: 116 } }], line: 79 }, "7": { loc: { start: { line: 98, column: 66 }, end: { line: 98, column: 106 } }, type: "binary-expr", locations: [{ start: { line: 98, column: 66 }, end: { line: 98, column: 83 } }, { start: { line: 98, column: 87 }, end: { line: 98, column: 106 } }], line: 98 }, "8": { loc: { start: { line: 101, column: 2 }, end: { line: 159, column: 3 } }, type: "if", locations: [{ start: { line: 101, column: 2 }, end: { line: 159, column: 3 } }, { start: { line: 101, column: 2 }, end: { line: 159, column: 3 } }], line: 101 }, "9": { loc: { start: { line: 102, column: 31 }, end: { line: 102, column: 107 } }, type: "binary-expr", locations: [{ start: { line: 102, column: 31 }, end: { line: 102, column: 54 } }, { start: { line: 102, column: 59 }, end: { line: 102, column: 80 } }, { start: { line: 102, column: 84 }, end: { line: 102, column: 106 } }], line: 102 }, "10": { loc: { start: { line: 104, column: 4 }, end: { line: 106, column: 5 } }, type: "if", locations: [{ start: { line: 104, column: 4 }, end: { line: 106, column: 5 } }, { start: { line: 104, column: 4 }, end: { line: 106, column: 5 } }], line: 104 }, "11": { loc: { start: { line: 115, column: 8 }, end: { line: 115, column: 34 } }, type: "if", locations: [{ start: { line: 115, column: 8 }, end: { line: 115, column: 34 } }, { start: { line: 115, column: 8 }, end: { line: 115, column: 34 } }], line: 115 }, "12": { loc: { start: { line: 128, column: 8 }, end: { line: 128, column: 34 } }, type: "if", locations: [{ start: { line: 128, column: 8 }, end: { line: 128, column: 34 } }, { start: { line: 128, column: 8 }, end: { line: 128, column: 34 } }], line: 128 }, "13": { loc: { start: { line: 152, column: 8 }, end: { line: 152, column: 34 } }, type: "if", locations: [{ start: { line: 152, column: 8 }, end: { line: 152, column: 34 } }, { start: { line: 152, column: 8 }, end: { line: 152, column: 34 } }], line: 152 }, "14": { loc: { start: { line: 154, column: 26 }, end: { line: 154, column: 50 } }, type: "binary-expr", locations: [{ start: { line: 154, column: 26 }, end: { line: 154, column: 44 } }, { start: { line: 154, column: 48 }, end: { line: 154, column: 50 } }], line: 154 }, "15": { loc: { start: { line: 155, column: 25 }, end: { line: 155, column: 48 } }, type: "binary-expr", locations: [{ start: { line: 155, column: 25 }, end: { line: 155, column: 42 } }, { start: { line: 155, column: 46 }, end: { line: 155, column: 48 } }], line: 155 }, "16": { loc: { start: { line: 206, column: 8 }, end: { line: 208, column: 9 } }, type: "if", locations: [{ start: { line: 206, column: 8 }, end: { line: 208, column: 9 } }, { start: { line: 206, column: 8 }, end: { line: 208, column: 9 } }], line: 206 }, "17": { loc: { start: { line: 206, column: 12 }, end: { line: 206, column: 38 } }, type: "binary-expr", locations: [{ start: { line: 206, column: 12 }, end: { line: 206, column: 19 } }, { start: { line: 206, column: 23 }, end: { line: 206, column: 38 } }], line: 206 }, "18": { loc: { start: { line: 215, column: 8 }, end: { line: 218, column: 9 } }, type: "if", locations: [{ start: { line: 215, column: 8 }, end: { line: 218, column: 9 } }, { start: { line: 215, column: 8 }, end: { line: 218, column: 9 } }], line: 215 }, "19": { loc: { start: { line: 237, column: 66 }, end: { line: 237, column: 109 } }, type: "cond-expr", locations: [{ start: { line: 237, column: 81 }, end: { line: 237, column: 104 } }, { start: { line: 237, column: 107 }, end: { line: 237, column: 109 } }], line: 237 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0, "57": 0, "58": 0, "59": 0, "60": 0, "61": 0, "62": 0, "63": 0, "64": 0, "65": 0, "66": 0, "67": 0, "68": 0, "69": 0, "70": 0, "71": 0, "72": 0, "73": 0, "74": 0, "75": 0, "76": 0, "77": 0, "78": 0, "79": 0, "80": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0], "6": [0, 0], "7": [0, 0], "8": [0, 0], "9": [0, 0, 0], "10": [0, 0], "11": [0, 0], "12": [0, 0], "13": [0, 0], "14": [0, 0], "15": [0, 0], "16": [0, 0], "17": [0, 0], "18": [0, 0], "19": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/evm/selectors/index.js"], names: ["debug", "findContext", "address", "binary", "instances", "search", "contexts", "record", "context", "createStepSelectors", "step", "state", "base", "trace", "gasCost", "op", "pc", "programCounter", "isJump", "indexOf", "isCall", "isCreate", "isHalting", "isRelative", "path", "startsWith", "callAddress", "matches", "stack", "length", "substring", "createBinary", "memory", "offset", "parseInt", "join", "callContext", "callsPrecompile", "evm", "info", "byContext", "byAddress", "binaries", "_", "byBinary", "threshold", "results", "map", "knownBinary", "distance", "levenshtein", "get", "filter", "sort", "a", "b", "current", "callstack", "proc", "call", "creationDepth", "undefined", "param", "next"], mappings: "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", file: "index.js", sourceRoot: "/Users/tyler/projects/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:evm:selectors\"); // eslint-disable-line no-unused-vars\n\nimport { createSelectorTree, createLeaf } from \"reselect-tree\";\nimport levenshtein from \"fast-levenshtein\";\n\nimport trace from \"lib/trace/selectors\";\n\nimport { isCallMnemonic, isCreateMnemonic } from \"lib/helpers\";\n\nfunction findContext({ address, binary }, instances, search, contexts) {\n  let record;\n  if (address) {\n    record = instances[address];\n    if (!record) {\n      return { address };\n    }\n    binary = record.binary;\n  } else {\n    record = search(binary);\n  }\n\n  let context = contexts[(record || {}).context];\n\n  return {\n    ...context,\n    binary\n  };\n}\n\n/**\n * create EVM-level selectors for a given trace step selector\n * may specify additional selectors to include\n */\nfunction createStepSelectors(step, state = null) {\n  let base = {\n    /**\n     * .trace\n     *\n     * trace step info related to operation\n     */\n    trace: createLeaf([step], ({ gasCost, op, pc }) => ({ gasCost, op, pc })),\n\n    /**\n     * .programCounter\n     */\n    programCounter: createLeaf([\"./trace\"], step => step.pc),\n\n    /**\n     * .isJump\n     */\n    isJump: createLeaf(\n      [\"./trace\"],\n      step => step.op != \"JUMPDEST\" && step.op.indexOf(\"JUMP\") == 0\n    ),\n\n    /**\n     * .isCall\n     *\n     * whether the opcode will switch to another calling context\n     */\n    isCall: createLeaf([\"./trace\"], step => isCallMnemonic(step.op)),\n\n    /**\n     * .isCreate\n     */\n    isCreate: createLeaf([\"./trace\"], step => isCreateMnemonic(step.op)),\n\n    /**\n     * .isHalting\n     *\n     * whether the instruction halts or returns from a calling context\n     */\n    isHalting: createLeaf(\n      [\"./trace\"],\n      step => step.op == \"STOP\" || step.op == \"RETURN\"\n    )\n  };\n\n  if (state) {\n    const isRelative = path =>\n      typeof path == \"string\" &&\n      (path.startsWith(\"./\") || path.startsWith(\"../\"));\n\n    if (isRelative(state)) {\n      state = `../${state}`;\n    }\n\n    Object.assign(base, {\n      /**\n       * .callAddress\n       *\n       * address transferred to by call operation\n       */\n      callAddress: createLeaf(\n        [\"./isCall\", \"./trace\", state],\n\n        (matches, step, { stack }) => {\n          if (!matches) return null;\n\n          let address = stack[stack.length - 2];\n          address = \"0x\" + address.substring(24);\n          return address;\n        }\n      ),\n\n      /**\n       * .createBinary\n       *\n       * binary code to execute via create operation\n       */\n      createBinary: createLeaf(\n        [\"./isCreate\", \"./trace\", state],\n\n        (matches, step, { stack, memory }) => {\n          if (!matches) return null;\n\n          // Get the code that's going to be created from memory.\n          // Note we multiply by 2 because these offsets are in bytes.\n          const offset = parseInt(stack[stack.length - 2], 16) * 2;\n          const length = parseInt(stack[stack.length - 3], 16) * 2;\n\n          return \"0x\" + memory.join(\"\").substring(offset, offset + length);\n        }\n      ),\n\n      /**\n       * .callContext\n       *\n       * context for what we're about to call into (or create)\n       */\n      callContext: createLeaf(\n        [\n          \"./callAddress\",\n          \"./createBinary\",\n          \"/info/instances\",\n          \"/info/binaries/search\",\n          \"/info/contexts\"\n        ],\n        (address, binary, instances, search, contexts) =>\n          findContext({ address, binary }, instances, search, contexts)\n      ),\n\n      /**\n       * .callsPrecompile\n       *\n       * is the call address to a precompiled contract?\n       * HACK\n       */\n      callsPrecompile: createLeaf(\n        [\"./callAddress\", \"/info/contexts\", \"/info/instances\"],\n\n        (address, contexts, instances) => {\n          if (!address) return null;\n\n          let { context } = instances[address] || {};\n          let { binary } = contexts[context] || {};\n          return !binary;\n        }\n      )\n    });\n  }\n\n  return base;\n}\n\nconst evm = createSelectorTree({\n  /**\n   * evm.state\n   */\n  state: state => state.evm,\n\n  /**\n   * evm.info\n   */\n  info: {\n    /**\n     * evm.info.contexts\n     */\n    contexts: createLeaf([\"/state\"], state => state.info.contexts.byContext),\n\n    /**\n     * evm.info.instances\n     */\n    instances: createLeaf([\"/state\"], state => state.info.instances.byAddress),\n\n    /**\n     * evm.info.binaries\n     */\n    binaries: {\n      _: createLeaf([\"/state\"], state => state.info.contexts.byBinary),\n\n      /**\n       * evm.info.binaries.search\n       *\n       * returns function (binary) => context\n       */\n      search: createLeaf([\"./_\"], binaries => binary => {\n        // search for a given binary based on levenshtein distances to\n        // existing (known) context binaries.\n        //\n        // levenshtein distance is the number of textual modifications\n        // (insert, change, delete) required to convert string a to b\n        //\n        // filter by a percentage threshold\n        const threshold = 0.25;\n\n        // skip levenshtein check for undefined binaries\n        if (!binary || binary == \"0x0\") {\n          return {};\n        }\n\n        const results = Object.entries(binaries)\n          .map(([knownBinary, { context }]) => ({\n            context,\n            distance: levenshtein.get(knownBinary, binary)\n          }))\n          .filter(({ distance }) => distance <= binary.length * threshold)\n          .sort(({ distance: a }, { distance: b }) => a - b);\n\n        if (results[0]) {\n          const { context } = results[0];\n          return { context };\n        }\n\n        return {};\n      })\n    }\n  },\n\n  /**\n   * evm.current\n   */\n  current: {\n    /**\n     * evm.current.callstack\n     */\n    callstack: state => state.evm.proc.callstack,\n\n    /**\n     * evm.current.call\n     */\n    call: createLeaf(\n      [\"./callstack\"],\n\n      stack => (stack.length ? stack[stack.length - 1] : {})\n    ),\n\n    /**\n     * evm.current.creationDepth\n     * how many creation calls are currently on the call stack?\n     */\n    creationDepth: createLeaf(\n      [\"./callstack\"],\n\n      stack => stack.filter(call => call.address === undefined).length\n    ),\n\n    /**\n     * evm.current.context\n     */\n    context: createLeaf(\n      [\"./call\", \"/info/instances\", \"/info/binaries/search\", \"/info/contexts\"],\n      findContext\n    ),\n\n    /**\n     * evm.current.state\n     *\n     * evm state info: as of last operation, before op defined in step\n     */\n    state: Object.assign(\n      {},\n      ...[\"depth\", \"error\", \"gas\", \"memory\", \"stack\", \"storage\"].map(param => ({\n        [param]: createLeaf([trace.step], step => step[param])\n      }))\n    ),\n\n    /**\n     * evm.current.step\n     */\n    step: createStepSelectors(trace.step, \"./state\")\n  },\n\n  /**\n   * evm.next\n   */\n  next: {\n    /**\n     * evm.next.state\n     *\n     * evm state as a result of next step operation\n     */\n    state: Object.assign(\n      {},\n      ...[\"depth\", \"error\", \"gas\", \"memory\", \"stack\", \"storage\"].map(param => ({\n        [param]: createLeaf([trace.next], step => step[param])\n      }))\n    ),\n\n    step: createStepSelectors(trace.next, \"./state\")\n  }\n});\n\nexport default evm;\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_2niifnscya.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _entries = (cov_2niifnscya.s[1]++, __webpack_require__(8));var _entries2 = (cov_2niifnscya.s[2]++, _interopRequireDefault(_entries));var _assign = (cov_2niifnscya.s[3]++, __webpack_require__(9));var _assign2 = (cov_2niifnscya.s[4]++, _interopRequireDefault(_assign));var _extends2 = (cov_2niifnscya.s[5]++, __webpack_require__(12));var _extends3 = (cov_2niifnscya.s[6]++, _interopRequireDefault(_extends2));var _debug = (cov_2niifnscya.s[7]++, __webpack_require__(0));var _debug2 = (cov_2niifnscya.s[8]++, _interopRequireDefault(_debug));var _reselectTree = (cov_2niifnscya.s[9]++, __webpack_require__(13));var _fastLevenshtein = (cov_2niifnscya.s[10]++, __webpack_require__(66));var _fastLevenshtein2 = (cov_2niifnscya.s[11]++, _interopRequireDefault(_fastLevenshtein));var _selectors = (cov_2niifnscya.s[12]++, __webpack_require__(11));var _selectors2 = (cov_2niifnscya.s[13]++, _interopRequireDefault(_selectors));var _helpers = (cov_2niifnscya.s[14]++, __webpack_require__(2));function _interopRequireDefault(obj) {
  cov_2niifnscya.f[0]++;cov_2niifnscya.s[15]++;return (cov_2niifnscya.b[1][0]++, obj) && (cov_2niifnscya.b[1][1]++, obj.__esModule) ? (cov_2niifnscya.b[0][0]++, obj) : (cov_2niifnscya.b[0][1]++, { default: obj });
}const debug = (cov_2niifnscya.s[16]++, (0, _debug2.default)("debugger:evm:selectors"));function findContext({ address, binary }, instances, search, contexts) {
  cov_2niifnscya.f[1]++;let record;cov_2niifnscya.s[17]++;if (address) {
    cov_2niifnscya.b[2][0]++;cov_2niifnscya.s[18]++;record = instances[address];cov_2niifnscya.s[19]++;if (!record) {
      cov_2niifnscya.b[3][0]++;cov_2niifnscya.s[20]++;return { address };
    } else {
      cov_2niifnscya.b[3][1]++;
    }cov_2niifnscya.s[21]++;binary = record.binary;
  } else {
    cov_2niifnscya.b[2][1]++;cov_2niifnscya.s[22]++;record = search(binary);
  }let context = (cov_2niifnscya.s[23]++, contexts[((cov_2niifnscya.b[4][0]++, record) || (cov_2niifnscya.b[4][1]++, {})).context]);cov_2niifnscya.s[24]++;return (0, _extends3.default)({}, context, { binary });
}function createStepSelectors(step, state = (cov_2niifnscya.b[5][0]++, null)) {
  cov_2niifnscya.f[2]++;let base = (cov_2niifnscya.s[25]++, { trace: (0, _reselectTree.createLeaf)([step], ({ gasCost, op, pc }) => {
      cov_2niifnscya.f[3]++;cov_2niifnscya.s[26]++;return { gasCost, op, pc };
    }), programCounter: (0, _reselectTree.createLeaf)(["./trace"], step => {
      cov_2niifnscya.f[4]++;cov_2niifnscya.s[27]++;return step.pc;
    }), isJump: (0, _reselectTree.createLeaf)(["./trace"], step => {
      cov_2niifnscya.f[5]++;cov_2niifnscya.s[28]++;return (cov_2niifnscya.b[6][0]++, step.op != "JUMPDEST") && (cov_2niifnscya.b[6][1]++, step.op.indexOf("JUMP") == 0);
    }), isCall: (0, _reselectTree.createLeaf)(["./trace"], step => {
      cov_2niifnscya.f[6]++;cov_2niifnscya.s[29]++;return (0, _helpers.isCallMnemonic)(step.op);
    }), isCreate: (0, _reselectTree.createLeaf)(["./trace"], step => {
      cov_2niifnscya.f[7]++;cov_2niifnscya.s[30]++;return (0, _helpers.isCreateMnemonic)(step.op);
    }), isHalting: (0, _reselectTree.createLeaf)(["./trace"], step => {
      cov_2niifnscya.f[8]++;cov_2niifnscya.s[31]++;return (cov_2niifnscya.b[7][0]++, step.op == "STOP") || (cov_2niifnscya.b[7][1]++, step.op == "RETURN");
    }) });cov_2niifnscya.s[32]++;if (state) {
    cov_2niifnscya.b[8][0]++;cov_2niifnscya.s[33]++;const isRelative = path => {
      cov_2niifnscya.f[9]++;cov_2niifnscya.s[34]++;return (cov_2niifnscya.b[9][0]++, typeof path == "string") && ((cov_2niifnscya.b[9][1]++, path.startsWith("./")) || (cov_2niifnscya.b[9][2]++, path.startsWith("../")));
    };cov_2niifnscya.s[35]++;if (isRelative(state)) {
      cov_2niifnscya.b[10][0]++;cov_2niifnscya.s[36]++;state = `../${state}`;
    } else {
      cov_2niifnscya.b[10][1]++;
    }cov_2niifnscya.s[37]++;(0, _assign2.default)(base, { callAddress: (0, _reselectTree.createLeaf)(["./isCall", "./trace", state], (matches, step, { stack }) => {
        cov_2niifnscya.f[10]++;cov_2niifnscya.s[38]++;if (!matches) {
          cov_2niifnscya.b[11][0]++;cov_2niifnscya.s[39]++;return null;
        } else {
          cov_2niifnscya.b[11][1]++;
        }let address = (cov_2niifnscya.s[40]++, stack[stack.length - 2]);cov_2niifnscya.s[41]++;address = "0x" + address.substring(24);cov_2niifnscya.s[42]++;return address;
      }), createBinary: (0, _reselectTree.createLeaf)(["./isCreate", "./trace", state], (matches, step, { stack, memory }) => {
        cov_2niifnscya.f[11]++;cov_2niifnscya.s[43]++;if (!matches) {
          cov_2niifnscya.b[12][0]++;cov_2niifnscya.s[44]++;return null;
        } else {
          cov_2niifnscya.b[12][1]++;
        }const offset = (cov_2niifnscya.s[45]++, parseInt(stack[stack.length - 2], 16) * 2);const length = (cov_2niifnscya.s[46]++, parseInt(stack[stack.length - 3], 16) * 2);cov_2niifnscya.s[47]++;return "0x" + memory.join("").substring(offset, offset + length);
      }), callContext: (0, _reselectTree.createLeaf)(["./callAddress", "./createBinary", "/info/instances", "/info/binaries/search", "/info/contexts"], (address, binary, instances, search, contexts) => {
        cov_2niifnscya.f[12]++;cov_2niifnscya.s[48]++;return findContext({ address, binary }, instances, search, contexts);
      }), callsPrecompile: (0, _reselectTree.createLeaf)(["./callAddress", "/info/contexts", "/info/instances"], (address, contexts, instances) => {
        cov_2niifnscya.f[13]++;cov_2niifnscya.s[49]++;if (!address) {
          cov_2niifnscya.b[13][0]++;cov_2niifnscya.s[50]++;return null;
        } else {
          cov_2niifnscya.b[13][1]++;
        }let { context } = (cov_2niifnscya.s[51]++, (cov_2niifnscya.b[14][0]++, instances[address]) || (cov_2niifnscya.b[14][1]++, {}));let { binary } = (cov_2niifnscya.s[52]++, (cov_2niifnscya.b[15][0]++, contexts[context]) || (cov_2niifnscya.b[15][1]++, {}));cov_2niifnscya.s[53]++;return !binary;
      }) });
  } else {
    cov_2niifnscya.b[8][1]++;
  }cov_2niifnscya.s[54]++;return base;
}const evm = (cov_2niifnscya.s[55]++, (0, _reselectTree.createSelectorTree)({ state: state => {
    cov_2niifnscya.f[14]++;cov_2niifnscya.s[56]++;return state.evm;
  }, info: { contexts: (0, _reselectTree.createLeaf)(["/state"], state => {
      cov_2niifnscya.f[15]++;cov_2niifnscya.s[57]++;return state.info.contexts.byContext;
    }), instances: (0, _reselectTree.createLeaf)(["/state"], state => {
      cov_2niifnscya.f[16]++;cov_2niifnscya.s[58]++;return state.info.instances.byAddress;
    }), binaries: { _: (0, _reselectTree.createLeaf)(["/state"], state => {
        cov_2niifnscya.f[17]++;cov_2niifnscya.s[59]++;return state.info.contexts.byBinary;
      }), search: (0, _reselectTree.createLeaf)(["./_"], binaries => {
        cov_2niifnscya.f[18]++;cov_2niifnscya.s[60]++;return binary => {
          cov_2niifnscya.f[19]++;const threshold = (cov_2niifnscya.s[61]++, 0.25);cov_2niifnscya.s[62]++;if ((cov_2niifnscya.b[17][0]++, !binary) || (cov_2niifnscya.b[17][1]++, binary == "0x0")) {
            cov_2niifnscya.b[16][0]++;cov_2niifnscya.s[63]++;return {};
          } else {
            cov_2niifnscya.b[16][1]++;
          }const results = (cov_2niifnscya.s[64]++, (0, _entries2.default)(binaries).map(([knownBinary, { context }]) => {
            cov_2niifnscya.f[20]++;cov_2niifnscya.s[65]++;return { context, distance: _fastLevenshtein2.default.get(knownBinary, binary) };
          }).filter(({ distance }) => {
            cov_2niifnscya.f[21]++;cov_2niifnscya.s[66]++;return distance <= binary.length * threshold;
          }).sort(({ distance: a }, { distance: b }) => {
            cov_2niifnscya.f[22]++;cov_2niifnscya.s[67]++;return a - b;
          }));cov_2niifnscya.s[68]++;if (results[0]) {
            cov_2niifnscya.b[18][0]++;const { context } = (cov_2niifnscya.s[69]++, results[0]);cov_2niifnscya.s[70]++;return { context };
          } else {
            cov_2niifnscya.b[18][1]++;
          }cov_2niifnscya.s[71]++;return {};
        };
      }) } }, current: { callstack: state => {
      cov_2niifnscya.f[23]++;cov_2niifnscya.s[72]++;return state.evm.proc.callstack;
    }, call: (0, _reselectTree.createLeaf)(["./callstack"], stack => {
      cov_2niifnscya.f[24]++;cov_2niifnscya.s[73]++;return stack.length ? (cov_2niifnscya.b[19][0]++, stack[stack.length - 1]) : (cov_2niifnscya.b[19][1]++, {});
    }), creationDepth: (0, _reselectTree.createLeaf)(["./callstack"], stack => {
      cov_2niifnscya.f[25]++;cov_2niifnscya.s[74]++;return stack.filter(call => {
        cov_2niifnscya.f[26]++;cov_2niifnscya.s[75]++;return call.address === undefined;
      }).length;
    }), context: (0, _reselectTree.createLeaf)(["./call", "/info/instances", "/info/binaries/search", "/info/contexts"], findContext), state: (0, _assign2.default)({}, ...["depth", "error", "gas", "memory", "stack", "storage"].map(param => {
      cov_2niifnscya.f[27]++;cov_2niifnscya.s[76]++;return { [param]: (0, _reselectTree.createLeaf)([_selectors2.default.step], step => {
          cov_2niifnscya.f[28]++;cov_2niifnscya.s[77]++;return step[param];
        }) };
    })), step: createStepSelectors(_selectors2.default.step, "./state") }, next: { state: (0, _assign2.default)({}, ...["depth", "error", "gas", "memory", "stack", "storage"].map(param => {
      cov_2niifnscya.f[29]++;cov_2niifnscya.s[78]++;return { [param]: (0, _reselectTree.createLeaf)([_selectors2.default.next], step => {
          cov_2niifnscya.f[30]++;cov_2niifnscya.s[79]++;return step[param];
        }) };
    })), step: createStepSelectors(_selectors2.default.next, "./state") } }));cov_2niifnscya.s[80]++;exports.default = evm;

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_rucfyyakh = function () {
  var path = "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/trace/selectors/index.js",
      hash = "8dee4e710fd6910e2035341e72d5245965aa866e",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/trace/selectors/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 20 }, end: { line: 7, column: 44 } }, "2": { start: { line: 9, column: 12 }, end: { line: 53, column: 2 } }, "3": { start: { line: 15, column: 18 }, end: { line: 15, column: 40 } }, "4": { start: { line: 22, column: 21 }, end: { line: 22, column: 46 } }, "5": { start: { line: 29, column: 18 }, end: { line: 29, column: 40 } }, "6": { start: { line: 36, column: 90 }, end: { line: 36, column: 110 } }, "7": { start: { line: 43, column: 80 }, end: { line: 43, column: 92 } }, "8": { start: { line: 52, column: 80 }, end: { line: 52, column: 138 } }, "9": { start: { line: 55, column: 0 }, end: { line: 55, column: 24 } } }, fnMap: { "0": { name: "(anonymous_0)", decl: { start: { line: 15, column: 9 }, end: { line: 15, column: 10 } }, loc: { start: { line: 15, column: 18 }, end: { line: 15, column: 40 } }, line: 15 }, "1": { name: "(anonymous_1)", decl: { start: { line: 22, column: 12 }, end: { line: 22, column: 13 } }, loc: { start: { line: 22, column: 21 }, end: { line: 22, column: 46 } }, line: 22 }, "2": { name: "(anonymous_2)", decl: { start: { line: 29, column: 9 }, end: { line: 29, column: 10 } }, loc: { start: { line: 29, column: 18 }, end: { line: 29, column: 40 } }, line: 29 }, "3": { name: "(anonymous_3)", decl: { start: { line: 36, column: 72 }, end: { line: 36, column: 73 } }, loc: { start: { line: 36, column: 90 }, end: { line: 36, column: 110 } }, line: 36 }, "4": { name: "(anonymous_4)", decl: { start: { line: 43, column: 62 }, end: { line: 43, column: 63 } }, loc: { start: { line: 43, column: 80 }, end: { line: 43, column: 92 } }, line: 43 }, "5": { name: "(anonymous_5)", decl: { start: { line: 52, column: 62 }, end: { line: 52, column: 63 } }, loc: { start: { line: 52, column: 80 }, end: { line: 52, column: 138 } }, line: 52 } }, branchMap: { "0": { loc: { start: { line: 52, column: 80 }, end: { line: 52, column: 138 } }, type: "cond-expr", locations: [{ start: { line: 52, column: 107 }, end: { line: 52, column: 123 } }, { start: { line: 52, column: 126 }, end: { line: 52, column: 138 } }], line: 52 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0 }, b: { "0": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/trace/selectors/index.js"], names: ["trace", "index", "state", "proc", "finished", "steps", "info", "stepsRemaining", "length", "step", "next"], mappings: ";;;;;;AAAA;;AAEA,IAAIA,QAAQ,sCAAmB;AAC7B;;;;;AAKAC,SAAQC,KAAD,IAAWA,MAAMF,KAAN,CAAYG,IAAZ,CAAiBF,KANN;;AAQ7B;;;;;AAKAG,YAAWF,KAAD,IAAWA,MAAMF,KAAN,CAAYG,IAAZ,CAAiBC,QAbT;;AAe7B;;;;;AAKAC,SAAQH,KAAD,IAAWA,MAAMF,KAAN,CAAYM,IAAZ,CAAiBD,KApBN;;AAsB7B;;;;;AAKAE,kBAAgB,8BACd,CAAC,SAAD,EAAY,SAAZ,CADc,EACU,CAACF,KAAD,EAAQJ,KAAR,KAAkBI,MAAMG,MAAN,GAAeP,KAD3C,CA3Ba;;AA+B7B;;;;;AAKAQ,QAAM,8BACJ,CAAC,SAAD,EAAY,SAAZ,CADI,EACoB,CAACJ,KAAD,EAAQJ,KAAR,KAAkBI,MAAMJ,KAAN,CADtC,CApCuB;;AAwC7B;;;;;;;AAOAS,QAAM,8BACJ,CAAC,SAAD,EAAY,SAAZ,CADI,EACoB,CAACL,KAAD,EAAQJ,KAAR,KACtBA,QAAQI,MAAMG,MAAN,GAAe,CAAvB,GAA2BH,MAAMJ,QAAQ,CAAd,CAA3B,GAA8CI,MAAMJ,KAAN,CAF5C;AA/CuB,CAAnB,CAAZ;;kBAqDeD,K", file: "index.js", sourceRoot: "/Users/tyler/projects/truffle/packages/truffle-debugger", sourcesContent: ["import { createSelectorTree, createLeaf } from \"reselect-tree\";\n\nlet trace = createSelectorTree({\n  /**\n   * trace.index\n   *\n   * current step index\n   */\n  index: (state) => state.trace.proc.index,\n\n  /**\n   * trace.finished\n   *\n   * is the trace finished?\n   */\n  finished: (state) => state.trace.proc.finished,\n\n  /**\n   * trace.steps\n   *\n   * all trace steps\n   */\n  steps: (state) => state.trace.info.steps,\n\n  /**\n   * trace.stepsRemaining\n   *\n   * number of steps remaining in trace\n   */\n  stepsRemaining: createLeaf(\n    [\"./steps\", \"./index\"], (steps, index) => steps.length - index\n  ),\n\n  /**\n   * trace.step\n   *\n   * current trace step\n   */\n  step: createLeaf(\n    [\"./steps\", \"./index\"], (steps, index) => steps[index]\n  ),\n\n  /**\n   * trace.next\n   *\n   * next trace step\n   * HACK: if at the end,\n   * we will return the *same* trace step\n   */\n  next: createLeaf(\n    [\"./steps\", \"./index\"], (steps, index) =>\n      index < steps.length - 1 ? steps[index + 1] : steps[index]\n  )\n});\n\nexport default trace;\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_rucfyyakh.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _reselectTree = (cov_rucfyyakh.s[1]++, __webpack_require__(13));let trace = (cov_rucfyyakh.s[2]++, (0, _reselectTree.createSelectorTree)({ index: state => {
    cov_rucfyyakh.f[0]++;cov_rucfyyakh.s[3]++;return state.trace.proc.index;
  }, finished: state => {
    cov_rucfyyakh.f[1]++;cov_rucfyyakh.s[4]++;return state.trace.proc.finished;
  }, steps: state => {
    cov_rucfyyakh.f[2]++;cov_rucfyyakh.s[5]++;return state.trace.info.steps;
  }, stepsRemaining: (0, _reselectTree.createLeaf)(["./steps", "./index"], (steps, index) => {
    cov_rucfyyakh.f[3]++;cov_rucfyyakh.s[6]++;return steps.length - index;
  }), step: (0, _reselectTree.createLeaf)(["./steps", "./index"], (steps, index) => {
    cov_rucfyyakh.f[4]++;cov_rucfyyakh.s[7]++;return steps[index];
  }), next: (0, _reselectTree.createLeaf)(["./steps", "./index"], (steps, index) => {
    cov_rucfyyakh.f[5]++;cov_rucfyyakh.s[8]++;return index < steps.length - 1 ? (cov_rucfyyakh.b[0][0]++, steps[index + 1]) : (cov_rucfyyakh.b[0][1]++, steps[index]);
  }) }));cov_rucfyyakh.s[9]++;exports.default = trace;

/***/ }),
/* 12 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/helpers/extends");

/***/ }),
/* 13 */
/***/ (function(module, exports) {

module.exports = require("reselect-tree");

/***/ }),
/* 14 */
/***/ (function(module, exports) {

module.exports = require("truffle-decode-utils");

/***/ }),
/* 15 */
/***/ (function(module, exports) {

module.exports = require("redux-saga/effects");

/***/ }),
/* 16 */
/***/ (function(module, exports) {

module.exports = require("redux");

/***/ }),
/* 17 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/core-js/object/keys");

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_1au21g2jtc = function () {
  var path = "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/ast/selectors/index.js",
      hash = "c41be9dd701f2c6b8eb03f1055b47afa532ffe08",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/ast/selectors/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 13 }, end: { line: 7, column: 29 } }, "2": { start: { line: 9, column: 14 }, end: { line: 9, column: 44 } }, "3": { start: { line: 11, column: 20 }, end: { line: 11, column: 44 } }, "4": { start: { line: 13, column: 19 }, end: { line: 13, column: 42 } }, "5": { start: { line: 15, column: 20 }, end: { line: 15, column: 56 } }, "6": { start: { line: 17, column: 17 }, end: { line: 17, column: 50 } }, "7": { start: { line: 19, column: 18 }, end: { line: 19, column: 52 } }, "8": { start: { line: 21, column: 11 }, end: { line: 21, column: 28 } }, "9": { start: { line: 23, column: 39 }, end: { line: 23, column: 93 } }, "10": { start: { line: 25, column: 14 }, end: { line: 25, column: 60 } }, "11": { start: { line: 30, column: 12 }, end: { line: 75, column: 2 } }, "12": { start: { line: 38, column: 90 }, end: { line: 38, column: 97 } }, "13": { start: { line: 51, column: 91 }, end: { line: 51, column: 94 } }, "14": { start: { line: 58, column: 91 }, end: { line: 58, column: 93 } }, "15": { start: { line: 65, column: 112 }, end: { line: 65, column: 163 } }, "16": { start: { line: 72, column: 83 }, end: { line: 72, column: 169 } }, "17": { start: { line: 77, column: 0 }, end: { line: 77, column: 22 } } }, fnMap: { "0": { name: "_interopRequireDefault", decl: { start: { line: 23, column: 9 }, end: { line: 23, column: 31 } }, loc: { start: { line: 23, column: 37 }, end: { line: 23, column: 95 } }, line: 23 }, "1": { name: "(anonymous_1)", decl: { start: { line: 38, column: 79 }, end: { line: 38, column: 80 } }, loc: { start: { line: 38, column: 90 }, end: { line: 38, column: 97 } }, line: 38 }, "2": { name: "(anonymous_2)", decl: { start: { line: 51, column: 78 }, end: { line: 51, column: 79 } }, loc: { start: { line: 51, column: 91 }, end: { line: 51, column: 94 } }, line: 51 }, "3": { name: "(anonymous_3)", decl: { start: { line: 58, column: 79 }, end: { line: 58, column: 80 } }, loc: { start: { line: 58, column: 91 }, end: { line: 58, column: 93 } }, line: 58 }, "4": { name: "(anonymous_4)", decl: { start: { line: 65, column: 96 }, end: { line: 65, column: 97 } }, loc: { start: { line: 65, column: 112 }, end: { line: 65, column: 163 } }, line: 65 }, "5": { name: "(anonymous_5)", decl: { start: { line: 72, column: 65 }, end: { line: 72, column: 66 } }, loc: { start: { line: 72, column: 83 }, end: { line: 72, column: 169 } }, line: 72 } }, branchMap: { "0": { loc: { start: { line: 23, column: 46 }, end: { line: 23, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 23, column: 70 }, end: { line: 23, column: 73 } }, { start: { line: 23, column: 76 }, end: { line: 23, column: 92 } }], line: 23 }, "1": { loc: { start: { line: 23, column: 46 }, end: { line: 23, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 23, column: 46 }, end: { line: 23, column: 49 } }, { start: { line: 23, column: 53 }, end: { line: 23, column: 67 } }], line: 23 }, "2": { loc: { start: { line: 72, column: 83 }, end: { line: 72, column: 169 } }, type: "cond-expr", locations: [{ start: { line: 72, column: 93 }, end: { line: 72, column: 132 } }, { start: { line: 72, column: 135 }, end: { line: 72, column: 169 } }], line: 72 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/ast/selectors/index.js"], names: ["debug", "ast", "views", "sources", "solidity", "info", "current", "tree", "source", "index", "id", "pointer", "sourceRange", "range", "start", "length", "node", "jsonpointer", "get"], mappings: ";;;;;;AAAA;;;;AAGA;;AACA;;;;AAEA;;;;AAEA;;;;AAPA,MAAMA,QAAQ,qBAAY,wBAAZ,CAAd;;AAUA;;;AAGA,MAAMC,MAAM,sCAAmB;AAC7B;;;AAGAC,SAAO;AACL;;;AAGAC,aAAS,8BAAW,CAACC,oBAASC,IAAT,CAAcF,OAAf,CAAX,EAAoCA,WAAWA,OAA/C;AAJJ,GAJsB;;AAW7B;;;AAGAG,WAAS;;AAEP;;;;;AAKAC,UAAM,8BACJ,CAACH,oBAASE,OAAT,CAAiBE,MAAlB,CADI,EACuB,CAAC,EAACP,GAAD,EAAD,KAAWA,GADlC,CAPC;;AAWP;;;;;AAKAQ,WAAO,8BACL,CAACL,oBAASE,OAAT,CAAiBE,MAAlB,CADK,EACsB,CAAC,EAACE,EAAD,EAAD,KAAUA,EADhC,CAhBA;;AAoBP;;;;;AAKAC,aAAS,8BACP,CAAC,QAAD,EAAWP,oBAASE,OAAT,CAAiBM,WAA5B,CADO,EAGP,CAACX,GAAD,EAAMY,KAAN,KAAgB,oBAAUZ,GAAV,EAAeY,MAAMC,KAArB,EAA4BD,MAAME,MAAlC,CAHT,CAzBF;;AA+BP;;;;;AAKAC,UAAM,8BACJ,CAAC,QAAD,EAAW,WAAX,CADI,EACqB,CAACf,GAAD,EAAMU,OAAN,KACtBA,OAAD,GACIM,sBAAYC,GAAZ,CAAgBjB,GAAhB,EAAqBU,OAArB,CADJ,GAEIM,sBAAYC,GAAZ,CAAgBjB,GAAhB,EAAqB,EAArB,CAJF;;AApCC;AAdoB,CAAnB,CAAZ;;kBA4DeA,G", file: "index.js", sourceRoot: "/Users/tyler/projects/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:ast:selectors\");\n\nimport { createSelectorTree, createLeaf } from \"reselect-tree\";\nimport jsonpointer from \"json-pointer\";\n\nimport solidity from \"lib/solidity/selectors\";\n\nimport { findRange } from \"../map\";\n\n\n/**\n * ast\n */\nconst ast = createSelectorTree({\n  /**\n   * ast.views\n   */\n  views: {\n    /**\n     * ast.views.sources\n     */\n    sources: createLeaf([solidity.info.sources], sources => sources)\n  },\n\n  /**\n   * ast.current\n   */\n  current: {\n\n    /**\n     * ast.current.tree\n     *\n     * ast for current source\n     */\n    tree: createLeaf(\n      [solidity.current.source], ({ast}) => ast\n    ),\n\n    /**\n     * ast.current.index\n     *\n     * source ID\n     */\n    index: createLeaf(\n      [solidity.current.source], ({id}) => id\n    ),\n\n    /**\n     * ast.current.pointer\n     *\n     * jsonpointer for current ast node\n     */\n    pointer: createLeaf(\n      [\"./tree\", solidity.current.sourceRange],\n\n      (ast, range) => findRange(ast, range.start, range.length)\n    ),\n\n    /**\n     * ast.current.node\n     *\n     * current ast node to execute\n     */\n    node: createLeaf(\n      [\"./tree\", \"./pointer\"], (ast, pointer) =>\n        (pointer)\n          ? jsonpointer.get(ast, pointer)\n          : jsonpointer.get(ast, \"\")\n    ),\n\n  }\n});\n\nexport default ast;\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_1au21g2jtc.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _debug = (cov_1au21g2jtc.s[1]++, __webpack_require__(0));var _debug2 = (cov_1au21g2jtc.s[2]++, _interopRequireDefault(_debug));var _reselectTree = (cov_1au21g2jtc.s[3]++, __webpack_require__(13));var _jsonPointer = (cov_1au21g2jtc.s[4]++, __webpack_require__(23));var _jsonPointer2 = (cov_1au21g2jtc.s[5]++, _interopRequireDefault(_jsonPointer));var _selectors = (cov_1au21g2jtc.s[6]++, __webpack_require__(3));var _selectors2 = (cov_1au21g2jtc.s[7]++, _interopRequireDefault(_selectors));var _map = (cov_1au21g2jtc.s[8]++, __webpack_require__(28));function _interopRequireDefault(obj) {
  cov_1au21g2jtc.f[0]++;cov_1au21g2jtc.s[9]++;return (cov_1au21g2jtc.b[1][0]++, obj) && (cov_1au21g2jtc.b[1][1]++, obj.__esModule) ? (cov_1au21g2jtc.b[0][0]++, obj) : (cov_1au21g2jtc.b[0][1]++, { default: obj });
}const debug = (cov_1au21g2jtc.s[10]++, (0, _debug2.default)("debugger:ast:selectors"));const ast = (cov_1au21g2jtc.s[11]++, (0, _reselectTree.createSelectorTree)({ views: { sources: (0, _reselectTree.createLeaf)([_selectors2.default.info.sources], sources => {
      cov_1au21g2jtc.f[1]++;cov_1au21g2jtc.s[12]++;return sources;
    }) }, current: { tree: (0, _reselectTree.createLeaf)([_selectors2.default.current.source], ({ ast }) => {
      cov_1au21g2jtc.f[2]++;cov_1au21g2jtc.s[13]++;return ast;
    }), index: (0, _reselectTree.createLeaf)([_selectors2.default.current.source], ({ id }) => {
      cov_1au21g2jtc.f[3]++;cov_1au21g2jtc.s[14]++;return id;
    }), pointer: (0, _reselectTree.createLeaf)(["./tree", _selectors2.default.current.sourceRange], (ast, range) => {
      cov_1au21g2jtc.f[4]++;cov_1au21g2jtc.s[15]++;return (0, _map.findRange)(ast, range.start, range.length);
    }), node: (0, _reselectTree.createLeaf)(["./tree", "./pointer"], (ast, pointer) => {
      cov_1au21g2jtc.f[5]++;cov_1au21g2jtc.s[16]++;return pointer ? (cov_1au21g2jtc.b[2][0]++, _jsonPointer2.default.get(ast, pointer)) : (cov_1au21g2jtc.b[2][1]++, _jsonPointer2.default.get(ast, ""));
    }) } }));cov_1au21g2jtc.s[17]++;exports.default = ast;

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_zhkun8i5r = function () {
  var path = "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/trace/actions/index.js",
      hash = "774c1893f4413da5b24d8bafe9d7ef60b47c7bf1",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/trace/actions/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 6, column: 0 }, end: { line: 6, column: 30 } }, "2": { start: { line: 7, column: 0 }, end: { line: 7, column: 44 } }, "3": { start: { line: 8, column: 0 }, end: { line: 8, column: 20 } }, "4": { start: { line: 9, column: 0 }, end: { line: 9, column: 20 } }, "5": { start: { line: 10, column: 0 }, end: { line: 10, column: 20 } }, "6": { start: { line: 11, column: 0 }, end: { line: 11, column: 28 } }, "7": { start: { line: 12, column: 0 }, end: { line: 12, column: 22 } }, "8": { start: { line: 13, column: 19 }, end: { line: 13, column: 52 } }, "9": { start: { line: 15, column: 2 }, end: { line: 18, column: 4 } }, "10": { start: { line: 21, column: 26 }, end: { line: 21, column: 73 } }, "11": { start: { line: 23, column: 2 }, end: { line: 26, column: 4 } }, "12": { start: { line: 29, column: 13 }, end: { line: 29, column: 34 } }, "13": { start: { line: 31, column: 2 }, end: { line: 31, column: 24 } }, "14": { start: { line: 34, column: 13 }, end: { line: 34, column: 34 } }, "15": { start: { line: 36, column: 2 }, end: { line: 36, column: 24 } }, "16": { start: { line: 39, column: 13 }, end: { line: 39, column: 34 } }, "17": { start: { line: 41, column: 2 }, end: { line: 41, column: 24 } }, "18": { start: { line: 44, column: 21 }, end: { line: 44, column: 49 } }, "19": { start: { line: 46, column: 2 }, end: { line: 46, column: 32 } }, "20": { start: { line: 49, column: 14 }, end: { line: 49, column: 43 } }, "21": { start: { line: 51, column: 2 }, end: { line: 51, column: 25 } } }, fnMap: { "0": { name: "saveSteps", decl: { start: { line: 14, column: 9 }, end: { line: 14, column: 18 } }, loc: { start: { line: 14, column: 26 }, end: { line: 19, column: 1 } }, line: 14 }, "1": { name: "receiveAddresses", decl: { start: { line: 22, column: 9 }, end: { line: 22, column: 25 } }, loc: { start: { line: 22, column: 37 }, end: { line: 27, column: 1 } }, line: 22 }, "2": { name: "next", decl: { start: { line: 30, column: 9 }, end: { line: 30, column: 13 } }, loc: { start: { line: 30, column: 16 }, end: { line: 32, column: 1 } }, line: 30 }, "3": { name: "tick", decl: { start: { line: 35, column: 9 }, end: { line: 35, column: 13 } }, loc: { start: { line: 35, column: 16 }, end: { line: 37, column: 1 } }, line: 35 }, "4": { name: "tock", decl: { start: { line: 40, column: 9 }, end: { line: 40, column: 13 } }, loc: { start: { line: 40, column: 16 }, end: { line: 42, column: 1 } }, line: 40 }, "5": { name: "endTrace", decl: { start: { line: 45, column: 9 }, end: { line: 45, column: 17 } }, loc: { start: { line: 45, column: 20 }, end: { line: 47, column: 1 } }, line: 45 }, "6": { name: "reset", decl: { start: { line: 50, column: 9 }, end: { line: 50, column: 14 } }, loc: { start: { line: 50, column: 17 }, end: { line: 52, column: 1 } }, line: 50 } }, branchMap: {}, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0 }, b: {}, inputSourceMap: { version: 3, sources: ["lib/trace/actions/index.js"], names: ["saveSteps", "receiveAddresses", "next", "tick", "tock", "endTrace", "reset", "SAVE_STEPS", "steps", "type", "RECEIVE_ADDRESSES", "addresses", "NEXT", "TICK", "TOCK", "END_OF_TRACE", "RESET"], mappings: ";;;;;QACgBA,S,GAAAA,S;QAQAC,gB,GAAAA,gB;QAQAC,I,GAAAA,I;QAKAC,I,GAAAA,I;QAKAC,I,GAAAA,I;QAKAC,Q,GAAAA,Q;QAKAC,K,GAAAA,K;AArCT,MAAMC,kCAAa,YAAnB;AACA,SAASP,SAAT,CAAmBQ,KAAnB,EAA0B;AAC/B,SAAO;AACLC,UAAMF,UADD;AAELC;AAFK,GAAP;AAID;;AAEM,MAAME,gDAAoB,mBAA1B;AACA,SAAST,gBAAT,CAA0BU,SAA1B,EAAqC;AAC1C,SAAO;AACLF,UAAMC,iBADD;AAELC;AAFK,GAAP;AAID;;AAEM,MAAMC,sBAAO,MAAb;AACA,SAASV,IAAT,GAAgB;AACrB,SAAO,EAAEO,MAAMG,IAAR,EAAP;AACD;;AAEM,MAAMC,sBAAO,MAAb;AACA,SAASV,IAAT,GAAgB;AACrB,SAAO,EAAEM,MAAMI,IAAR,EAAP;AACD;;AAEM,MAAMC,sBAAO,MAAb;AACA,SAASV,IAAT,GAAgB;AACrB,SAAO,EAAEK,MAAMK,IAAR,EAAP;AACD;;AAEM,MAAMC,sCAAe,KAArB;AACA,SAASV,QAAT,GAAoB;AACzB,SAAO,EAAEI,MAAMM,YAAR,EAAP;AACD;;AAEM,MAAMC,wBAAQ,aAAd;AACA,SAASV,KAAT,GAAiB;AACtB,SAAO,EAAEG,MAAMO,KAAR,EAAP;AACD", file: "index.js", sourceRoot: "/Users/tyler/projects/truffle/packages/truffle-debugger", sourcesContent: ["export const SAVE_STEPS = \"SAVE_STEPS\";\nexport function saveSteps(steps) {\n  return {\n    type: SAVE_STEPS,\n    steps\n  };\n}\n\nexport const RECEIVE_ADDRESSES = \"RECEIVE_ADDRESSES\";\nexport function receiveAddresses(addresses) {\n  return {\n    type: RECEIVE_ADDRESSES,\n    addresses\n  };\n}\n\nexport const NEXT = \"NEXT\";\nexport function next() {\n  return { type: NEXT };\n}\n\nexport const TICK = \"TICK\";\nexport function tick() {\n  return { type: TICK };\n}\n\nexport const TOCK = \"TOCK\";\nexport function tock() {\n  return { type: TOCK };\n}\n\nexport const END_OF_TRACE = \"EOT\";\nexport function endTrace() {\n  return { type: END_OF_TRACE };\n}\n\nexport const RESET = \"TRACE_RESET\";\nexport function reset() {\n  return { type: RESET };\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_zhkun8i5r.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });cov_zhkun8i5r.s[1]++;exports.saveSteps = saveSteps;cov_zhkun8i5r.s[2]++;exports.receiveAddresses = receiveAddresses;cov_zhkun8i5r.s[3]++;exports.next = next;cov_zhkun8i5r.s[4]++;exports.tick = tick;cov_zhkun8i5r.s[5]++;exports.tock = tock;cov_zhkun8i5r.s[6]++;exports.endTrace = endTrace;cov_zhkun8i5r.s[7]++;exports.reset = reset;const SAVE_STEPS = (cov_zhkun8i5r.s[8]++, exports.SAVE_STEPS = "SAVE_STEPS");function saveSteps(steps) {
  cov_zhkun8i5r.f[0]++;cov_zhkun8i5r.s[9]++;return { type: SAVE_STEPS, steps };
}const RECEIVE_ADDRESSES = (cov_zhkun8i5r.s[10]++, exports.RECEIVE_ADDRESSES = "RECEIVE_ADDRESSES");function receiveAddresses(addresses) {
  cov_zhkun8i5r.f[1]++;cov_zhkun8i5r.s[11]++;return { type: RECEIVE_ADDRESSES, addresses };
}const NEXT = (cov_zhkun8i5r.s[12]++, exports.NEXT = "NEXT");function next() {
  cov_zhkun8i5r.f[2]++;cov_zhkun8i5r.s[13]++;return { type: NEXT };
}const TICK = (cov_zhkun8i5r.s[14]++, exports.TICK = "TICK");function tick() {
  cov_zhkun8i5r.f[3]++;cov_zhkun8i5r.s[15]++;return { type: TICK };
}const TOCK = (cov_zhkun8i5r.s[16]++, exports.TOCK = "TOCK");function tock() {
  cov_zhkun8i5r.f[4]++;cov_zhkun8i5r.s[17]++;return { type: TOCK };
}const END_OF_TRACE = (cov_zhkun8i5r.s[18]++, exports.END_OF_TRACE = "EOT");function endTrace() {
  cov_zhkun8i5r.f[5]++;cov_zhkun8i5r.s[19]++;return { type: END_OF_TRACE };
}const RESET = (cov_zhkun8i5r.s[20]++, exports.RESET = "TRACE_RESET");function reset() {
  cov_zhkun8i5r.f[6]++;cov_zhkun8i5r.s[21]++;return { type: RESET };
}

/***/ }),
/* 20 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/core-js/promise");

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_1zoj3rxq3b = function () {
  var path = "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/session/actions/index.js",
      hash = "480051a8042686db5335c3ac8ebe346baa27e681",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/session/actions/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 6, column: 0 }, end: { line: 6, column: 22 } }, "2": { start: { line: 7, column: 0 }, end: { line: 7, column: 22 } }, "3": { start: { line: 8, column: 0 }, end: { line: 8, column: 22 } }, "4": { start: { line: 9, column: 0 }, end: { line: 9, column: 42 } }, "5": { start: { line: 10, column: 0 }, end: { line: 10, column: 42 } }, "6": { start: { line: 11, column: 0 }, end: { line: 11, column: 34 } }, "7": { start: { line: 12, column: 14 }, end: { line: 12, column: 45 } }, "8": { start: { line: 14, column: 2 }, end: { line: 18, column: 4 } }, "9": { start: { line: 21, column: 14 }, end: { line: 21, column: 45 } }, "10": { start: { line: 23, column: 2 }, end: { line: 25, column: 4 } }, "11": { start: { line: 28, column: 14 }, end: { line: 28, column: 45 } }, "12": { start: { line: 30, column: 2 }, end: { line: 33, column: 4 } }, "13": { start: { line: 36, column: 25 }, end: { line: 36, column: 70 } }, "14": { start: { line: 38, column: 2 }, end: { line: 42, column: 4 } }, "15": { start: { line: 45, column: 25 }, end: { line: 45, column: 70 } }, "16": { start: { line: 47, column: 2 }, end: { line: 50, column: 4 } }, "17": { start: { line: 53, column: 21 }, end: { line: 53, column: 58 } }, "18": { start: { line: 55, column: 2 }, end: { line: 58, column: 4 } } }, fnMap: { "0": { name: "start", decl: { start: { line: 13, column: 9 }, end: { line: 13, column: 14 } }, loc: { start: { line: 13, column: 33 }, end: { line: 19, column: 1 } }, line: 13 }, "1": { name: "ready", decl: { start: { line: 22, column: 9 }, end: { line: 22, column: 14 } }, loc: { start: { line: 22, column: 17 }, end: { line: 26, column: 1 } }, line: 22 }, "2": { name: "error", decl: { start: { line: 29, column: 9 }, end: { line: 29, column: 14 } }, loc: { start: { line: 29, column: 22 }, end: { line: 34, column: 1 } }, line: 29 }, "3": { name: "recordContracts", decl: { start: { line: 37, column: 9 }, end: { line: 37, column: 24 } }, loc: { start: { line: 37, column: 44 }, end: { line: 43, column: 1 } }, line: 37 }, "4": { name: "saveTransaction", decl: { start: { line: 46, column: 9 }, end: { line: 46, column: 24 } }, loc: { start: { line: 46, column: 38 }, end: { line: 51, column: 1 } }, line: 46 }, "5": { name: "saveReceipt", decl: { start: { line: 54, column: 9 }, end: { line: 54, column: 20 } }, loc: { start: { line: 54, column: 30 }, end: { line: 59, column: 1 } }, line: 54 } }, branchMap: {}, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0 }, b: {}, inputSourceMap: { version: 3, sources: ["lib/session/actions/index.js"], names: ["start", "ready", "error", "recordContracts", "saveTransaction", "saveReceipt", "START", "txHash", "provider", "type", "READY", "ERROR", "RECORD_CONTRACTS", "contexts", "sources", "SAVE_TRANSACTION", "transaction", "SAVE_RECEIPT", "receipt"], mappings: ";;;;;QACgBA,K,GAAAA,K;QASAC,K,GAAAA,K;QAOAC,K,GAAAA,K;QAQAC,e,GAAAA,e;QASAC,e,GAAAA,e;QAQAC,W,GAAAA,W;AA1CT,MAAMC,wBAAQ,eAAd;AACA,SAASN,KAAT,CAAeO,MAAf,EAAuBC,QAAvB,EAAiC;AACtC,SAAO;AACLC,UAAMH,KADD;AAELC,UAFK;AAGTC;AAHS,GAAP;AAKD;;AAEM,MAAME,wBAAQ,eAAd;AACA,SAAST,KAAT,GAAiB;AACtB,SAAO;AACLQ,UAAMC;AADD,GAAP;AAGD;;AAEM,MAAMC,wBAAQ,eAAd;AACA,SAAST,KAAT,CAAeA,KAAf,EAAsB;AAC3B,SAAO;AACLO,UAAME,KADD;AAELT;AAFK,GAAP;AAID;;AAEM,MAAMU,8CAAmB,kBAAzB;AACA,SAAST,eAAT,CAAyBU,QAAzB,EAAmCC,OAAnC,EAA4C;AACjD,SAAO;AACLL,UAAMG,gBADD;AAELC,YAFK;AAGTC;AAHS,GAAP;AAKD;;AAEM,MAAMC,8CAAmB,kBAAzB;AACA,SAASX,eAAT,CAAyBY,WAAzB,EAAsC;AAC3C,SAAO;AACLP,UAAMM,gBADD;AAELC;AAFK,GAAP;AAID;;AAEM,MAAMC,sCAAe,cAArB;AACA,SAASZ,WAAT,CAAqBa,OAArB,EAA8B;AACnC,SAAO;AACLT,UAAMQ,YADD;AAELC;AAFK,GAAP;AAID", file: "index.js", sourceRoot: "/Users/tyler/projects/truffle/packages/truffle-debugger", sourcesContent: ["export const START = \"SESSION_START\";\nexport function start(txHash, provider) {\n  return {\n    type: START,\n    txHash,\nprovider\n  };\n}\n\nexport const READY = \"SESSION_READY\";\nexport function ready() {\n  return {\n    type: READY,\n  };\n}\n\nexport const ERROR = \"SESSION_ERROR\";\nexport function error(error) {\n  return {\n    type: ERROR,\n    error\n  };\n}\n\nexport const RECORD_CONTRACTS = \"RECORD_CONTRACTS\";\nexport function recordContracts(contexts, sources) {\n  return {\n    type: RECORD_CONTRACTS,\n    contexts,\nsources\n  };\n}\n\nexport const SAVE_TRANSACTION = \"SAVE_TRANSACTION\";\nexport function saveTransaction(transaction) {\n  return {\n    type: SAVE_TRANSACTION,\n    transaction\n  };\n}\n\nexport const SAVE_RECEIPT = \"SAVE_RECEIPT\";\nexport function saveReceipt(receipt) {\n  return {\n    type: SAVE_RECEIPT,\n    receipt\n  };\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_1zoj3rxq3b.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });cov_1zoj3rxq3b.s[1]++;exports.start = start;cov_1zoj3rxq3b.s[2]++;exports.ready = ready;cov_1zoj3rxq3b.s[3]++;exports.error = error;cov_1zoj3rxq3b.s[4]++;exports.recordContracts = recordContracts;cov_1zoj3rxq3b.s[5]++;exports.saveTransaction = saveTransaction;cov_1zoj3rxq3b.s[6]++;exports.saveReceipt = saveReceipt;const START = (cov_1zoj3rxq3b.s[7]++, exports.START = "SESSION_START");function start(txHash, provider) {
  cov_1zoj3rxq3b.f[0]++;cov_1zoj3rxq3b.s[8]++;return { type: START, txHash, provider };
}const READY = (cov_1zoj3rxq3b.s[9]++, exports.READY = "SESSION_READY");function ready() {
  cov_1zoj3rxq3b.f[1]++;cov_1zoj3rxq3b.s[10]++;return { type: READY };
}const ERROR = (cov_1zoj3rxq3b.s[11]++, exports.ERROR = "SESSION_ERROR");function error(error) {
  cov_1zoj3rxq3b.f[2]++;cov_1zoj3rxq3b.s[12]++;return { type: ERROR, error };
}const RECORD_CONTRACTS = (cov_1zoj3rxq3b.s[13]++, exports.RECORD_CONTRACTS = "RECORD_CONTRACTS");function recordContracts(contexts, sources) {
  cov_1zoj3rxq3b.f[3]++;cov_1zoj3rxq3b.s[14]++;return { type: RECORD_CONTRACTS, contexts, sources };
}const SAVE_TRANSACTION = (cov_1zoj3rxq3b.s[15]++, exports.SAVE_TRANSACTION = "SAVE_TRANSACTION");function saveTransaction(transaction) {
  cov_1zoj3rxq3b.f[4]++;cov_1zoj3rxq3b.s[16]++;return { type: SAVE_TRANSACTION, transaction };
}const SAVE_RECEIPT = (cov_1zoj3rxq3b.s[17]++, exports.SAVE_RECEIPT = "SAVE_RECEIPT");function saveReceipt(receipt) {
  cov_1zoj3rxq3b.f[5]++;cov_1zoj3rxq3b.s[18]++;return { type: SAVE_RECEIPT, receipt };
}

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_27jr84kqem = function () {
  var path = "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/data/selectors/index.js",
      hash = "f857d783c90c485d3fac76b29045ab80892b431f",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/data/selectors/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 15 }, end: { line: 7, column: 55 } }, "2": { start: { line: 9, column: 16 }, end: { line: 9, column: 48 } }, "3": { start: { line: 11, column: 25 }, end: { line: 11, column: 74 } }, "4": { start: { line: 13, column: 25 }, end: { line: 13, column: 67 } }, "5": { start: { line: 15, column: 16 }, end: { line: 15, column: 56 } }, "6": { start: { line: 17, column: 16 }, end: { line: 17, column: 49 } }, "7": { start: { line: 19, column: 15 }, end: { line: 19, column: 62 } }, "8": { start: { line: 21, column: 16 }, end: { line: 21, column: 48 } }, "9": { start: { line: 23, column: 14 }, end: { line: 23, column: 60 } }, "10": { start: { line: 25, column: 15 }, end: { line: 25, column: 46 } }, "11": { start: { line: 27, column: 13 }, end: { line: 27, column: 29 } }, "12": { start: { line: 29, column: 14 }, end: { line: 29, column: 44 } }, "13": { start: { line: 31, column: 20 }, end: { line: 31, column: 44 } }, "14": { start: { line: 33, column: 19 }, end: { line: 33, column: 42 } }, "15": { start: { line: 35, column: 20 }, end: { line: 35, column: 56 } }, "16": { start: { line: 37, column: 15 }, end: { line: 37, column: 37 } }, "17": { start: { line: 39, column: 17 }, end: { line: 39, column: 45 } }, "18": { start: { line: 41, column: 18 }, end: { line: 41, column: 52 } }, "19": { start: { line: 43, column: 18 }, end: { line: 43, column: 46 } }, "20": { start: { line: 45, column: 18 }, end: { line: 45, column: 53 } }, "21": { start: { line: 47, column: 18 }, end: { line: 47, column: 51 } }, "22": { start: { line: 49, column: 18 }, end: { line: 49, column: 53 } }, "23": { start: { line: 51, column: 26 }, end: { line: 51, column: 57 } }, "24": { start: { line: 53, column: 25 }, end: { line: 53, column: 69 } }, "25": { start: { line: 55, column: 22 }, end: { line: 55, column: 48 } }, "26": { start: { line: 57, column: 40 }, end: { line: 57, column: 267 } }, "27": { start: { line: 57, column: 69 }, end: { line: 57, column: 80 } }, "28": { start: { line: 57, column: 103 }, end: { line: 57, column: 105 } }, "29": { start: { line: 57, column: 107 }, end: { line: 57, column: 228 } }, "30": { start: { line: 57, column: 126 }, end: { line: 57, column: 226 } }, "31": { start: { line: 57, column: 149 }, end: { line: 57, column: 224 } }, "32": { start: { line: 57, column: 201 }, end: { line: 57, column: 224 } }, "33": { start: { line: 57, column: 229 }, end: { line: 57, column: 250 } }, "34": { start: { line: 57, column: 251 }, end: { line: 57, column: 265 } }, "35": { start: { line: 59, column: 39 }, end: { line: 59, column: 93 } }, "36": { start: { line: 61, column: 14 }, end: { line: 61, column: 61 } }, "37": { start: { line: 66, column: 17 }, end: { line: 66, column: 23 } }, "38": { start: { line: 66, column: 22 }, end: { line: 66, column: 23 } }, "39": { start: { line: 69, column: 2 }, end: { line: 86, column: 4 } }, "40": { start: { line: 73, column: 59 }, end: { line: 73, column: 199 } }, "41": { start: { line: 73, column: 85 }, end: { line: 73, column: 198 } }, "42": { start: { line: 78, column: 61 }, end: { line: 78, column: 148 } }, "43": { start: { line: 78, column: 128 }, end: { line: 78, column: 146 } }, "44": { start: { line: 83, column: 65 }, end: { line: 85, column: 8 } }, "45": { start: { line: 83, column: 152 }, end: { line: 85, column: 5 } }, "46": { start: { line: 84, column: 81 }, end: { line: 84, column: 99 } }, "47": { start: { line: 89, column: 13 }, end: { line: 424, column: 2 } }, "48": { start: { line: 90, column: 18 }, end: { line: 90, column: 28 } }, "49": { start: { line: 99, column: 78 }, end: { line: 99, column: 82 } }, "50": { start: { line: 104, column: 126 }, end: { line: 104, column: 131 } }, "51": { start: { line: 118, column: 89 }, end: { line: 122, column: 11 } }, "52": { start: { line: 119, column: 24 }, end: { line: 119, column: 56 } }, "53": { start: { line: 120, column: 10 }, end: { line: 120, column: 51 } }, "54": { start: { line: 121, column: 10 }, end: { line: 121, column: 35 } }, "55": { start: { line: 127, column: 120 }, end: { line: 132, column: 12 } }, "56": { start: { line: 127, column: 202 }, end: { line: 132, column: 9 } }, "57": { start: { line: 141, column: 209 }, end: { line: 146, column: 6 } }, "58": { start: { line: 141, column: 230 }, end: { line: 146, column: 6 } }, "59": { start: { line: 156, column: 131 }, end: { line: 156, column: 226 } }, "60": { start: { line: 156, column: 149 }, end: { line: 156, column: 170 } }, "61": { start: { line: 156, column: 187 }, end: { line: 156, column: 225 } }, "62": { start: { line: 162, column: 135 }, end: { line: 162, column: 226 } }, "63": { start: { line: 162, column: 192 }, end: { line: 162, column: 223 } }, "64": { start: { line: 180, column: 100 }, end: { line: 197, column: 9 } }, "65": { start: { line: 181, column: 25 }, end: { line: 181, column: 47 } }, "66": { start: { line: 182, column: 8 }, end: { line: 184, column: 9 } }, "67": { start: { line: 183, column: 10 }, end: { line: 183, column: 33 } }, "68": { start: { line: 188, column: 8 }, end: { line: 188, column: 36 } }, "69": { start: { line: 189, column: 23 }, end: { line: 189, column: 56 } }, "70": { start: { line: 193, column: 46 }, end: { line: 193, column: 98 } }, "71": { start: { line: 195, column: 8 }, end: { line: 195, column: 123 } }, "72": { start: { line: 195, column: 92 }, end: { line: 195, column: 120 } }, "73": { start: { line: 196, column: 8 }, end: { line: 196, column: 34 } }, "74": { start: { line: 202, column: 62 }, end: { line: 202, column: 84 } }, "75": { start: { line: 212, column: 66 }, end: { line: 212, column: 96 } }, "76": { start: { line: 218, column: 73 }, end: { line: 218, column: 100 } }, "77": { start: { line: 228, column: 68 }, end: { line: 228, column: 90 } }, "78": { start: { line: 238, column: 68 }, end: { line: 238, column: 95 } }, "79": { start: { line: 245, column: 76 }, end: { line: 245, column: 114 } }, "80": { start: { line: 260, column: 84 }, end: { line: 260, column: 91 } }, "81": { start: { line: 279, column: 87 }, end: { line: 279, column: 99 } }, "82": { start: { line: 297, column: 18 }, end: { line: 297, column: 26 } }, "83": { start: { line: 298, column: 24 }, end: { line: 298, column: 26 } }, "84": { start: { line: 300, column: 8 }, end: { line: 305, column: 30 } }, "85": { start: { line: 301, column: 10 }, end: { line: 302, column: 87 } }, "86": { start: { line: 301, column: 100 }, end: { line: 301, column: 113 } }, "87": { start: { line: 302, column: 23 }, end: { line: 302, column: 53 } }, "88": { start: { line: 302, column: 65 }, end: { line: 302, column: 83 } }, "89": { start: { line: 304, column: 10 }, end: { line: 304, column: 37 } }, "90": { start: { line: 307, column: 8 }, end: { line: 307, column: 25 } }, "91": { start: { line: 315, column: 108 }, end: { line: 319, column: 9 } }, "92": { start: { line: 316, column: 29 }, end: { line: 316, column: 39 } }, "93": { start: { line: 318, column: 8 }, end: { line: 318, column: 44 } }, "94": { start: { line: 329, column: 76 }, end: { line: 369, column: 9 } }, "95": { start: { line: 334, column: 8 }, end: { line: 344, column: 9 } }, "96": { start: { line: 335, column: 25 }, end: { line: 335, column: 122 } }, "97": { start: { line: 335, column: 77 }, end: { line: 335, column: 121 } }, "98": { start: { line: 336, column: 10 }, end: { line: 338, column: 11 } }, "99": { start: { line: 337, column: 12 }, end: { line: 337, column: 29 } }, "100": { start: { line: 340, column: 25 }, end: { line: 340, column: 132 } }, "101": { start: { line: 340, column: 77 }, end: { line: 340, column: 131 } }, "102": { start: { line: 341, column: 10 }, end: { line: 343, column: 11 } }, "103": { start: { line: 342, column: 12 }, end: { line: 342, column: 29 } }, "104": { start: { line: 348, column: 8 }, end: { line: 357, column: 9 } }, "105": { start: { line: 349, column: 28 }, end: { line: 349, column: 152 } }, "106": { start: { line: 349, column: 73 }, end: { line: 349, column: 104 } }, "107": { start: { line: 349, column: 127 }, end: { line: 349, column: 151 } }, "108": { start: { line: 351, column: 10 }, end: { line: 356, column: 11 } }, "109": { start: { line: 354, column: 27 }, end: { line: 354, column: 75 } }, "110": { start: { line: 355, column: 12 }, end: { line: 355, column: 80 } }, "111": { start: { line: 361, column: 22 }, end: { line: 361, column: 48 } }, "112": { start: { line: 362, column: 8 }, end: { line: 364, column: 9 } }, "113": { start: { line: 363, column: 10 }, end: { line: 363, column: 27 } }, "114": { start: { line: 366, column: 8 }, end: { line: 368, column: 10 } }, "115": { start: { line: 377, column: 19 }, end: { line: 391, column: 10 } }, "116": { start: { line: 378, column: 32 }, end: { line: 388, column: 15 } }, "117": { start: { line: 379, column: 24 }, end: { line: 383, column: 14 } }, "118": { start: { line: 380, column: 14 }, end: { line: 382, column: 16 } }, "119": { start: { line: 385, column: 12 }, end: { line: 387, column: 14 } }, "120": { start: { line: 386, column: 14 }, end: { line: 386, column: 50 } }, "121": { start: { line: 389, column: 31 }, end: { line: 389, column: 73 } }, "122": { start: { line: 390, column: 10 }, end: { line: 390, column: 107 } }, "123": { start: { line: 393, column: 8 }, end: { line: 395, column: 10 } }, "124": { start: { line: 394, column: 10 }, end: { line: 394, column: 45 } }, "125": { start: { line: 404, column: 20 }, end: { line: 406, column: 10 } }, "126": { start: { line: 405, column: 10 }, end: { line: 405, column: 73 } }, "127": { start: { line: 408, column: 8 }, end: { line: 410, column: 10 } }, "128": { start: { line: 409, column: 10 }, end: { line: 409, column: 46 } }, "129": { start: { line: 426, column: 0 }, end: { line: 426, column: 23 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 57, column: 9 }, end: { line: 57, column: 32 } }, loc: { start: { line: 57, column: 38 }, end: { line: 57, column: 269 } }, line: 57 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 59, column: 9 }, end: { line: 59, column: 31 } }, loc: { start: { line: 59, column: 37 }, end: { line: 59, column: 95 } }, line: 59 }, "2": { name: "(anonymous_2)", decl: { start: { line: 66, column: 17 }, end: { line: 66, column: 18 } }, loc: { start: { line: 66, column: 22 }, end: { line: 66, column: 23 } }, line: 66 }, "3": { name: "createStateSelectors", decl: { start: { line: 68, column: 9 }, end: { line: 68, column: 29 } }, loc: { start: { line: 68, column: 58 }, end: { line: 87, column: 1 } }, line: 68 }, "4": { name: "(anonymous_4)", decl: { start: { line: 73, column: 50 }, end: { line: 73, column: 51 } }, loc: { start: { line: 73, column: 59 }, end: { line: 73, column: 199 } }, line: 73 }, "5": { name: "(anonymous_5)", decl: { start: { line: 73, column: 77 }, end: { line: 73, column: 78 } }, loc: { start: { line: 73, column: 85 }, end: { line: 73, column: 198 } }, line: 73 }, "6": { name: "(anonymous_6)", decl: { start: { line: 78, column: 52 }, end: { line: 78, column: 53 } }, loc: { start: { line: 78, column: 61 }, end: { line: 78, column: 148 } }, line: 78 }, "7": { name: "(anonymous_7)", decl: { start: { line: 78, column: 120 }, end: { line: 78, column: 121 } }, loc: { start: { line: 78, column: 128 }, end: { line: 78, column: 146 } }, line: 78 }, "8": { name: "(anonymous_8)", decl: { start: { line: 83, column: 54 }, end: { line: 83, column: 55 } }, loc: { start: { line: 83, column: 65 }, end: { line: 85, column: 8 } }, line: 83 }, "9": { name: "(anonymous_9)", decl: { start: { line: 83, column: 130 }, end: { line: 83, column: 131 } }, loc: { start: { line: 83, column: 152 }, end: { line: 85, column: 5 } }, line: 83 }, "10": { name: "(anonymous_10)", decl: { start: { line: 84, column: 73 }, end: { line: 84, column: 74 } }, loc: { start: { line: 84, column: 81 }, end: { line: 84, column: 99 } }, line: 84 }, "11": { name: "(anonymous_11)", decl: { start: { line: 90, column: 9 }, end: { line: 90, column: 10 } }, loc: { start: { line: 90, column: 18 }, end: { line: 90, column: 28 } }, line: 90 }, "12": { name: "(anonymous_12)", decl: { start: { line: 99, column: 70 }, end: { line: 99, column: 71 } }, loc: { start: { line: 99, column: 78 }, end: { line: 99, column: 82 } }, line: 99 }, "13": { name: "(anonymous_13)", decl: { start: { line: 104, column: 117 }, end: { line: 104, column: 118 } }, loc: { start: { line: 104, column: 126 }, end: { line: 104, column: 131 } }, line: 104 }, "14": { name: "(anonymous_14)", decl: { start: { line: 118, column: 68 }, end: { line: 118, column: 69 } }, loc: { start: { line: 118, column: 89 }, end: { line: 122, column: 11 } }, line: 118 }, "15": { name: "(anonymous_15)", decl: { start: { line: 118, column: 154 }, end: { line: 118, column: 155 } }, loc: { start: { line: 118, column: 170 }, end: { line: 122, column: 9 } }, line: 118 }, "16": { name: "(anonymous_16)", decl: { start: { line: 127, column: 99 }, end: { line: 127, column: 100 } }, loc: { start: { line: 127, column: 120 }, end: { line: 132, column: 12 } }, line: 127 }, "17": { name: "(anonymous_17)", decl: { start: { line: 127, column: 184 }, end: { line: 127, column: 185 } }, loc: { start: { line: 127, column: 202 }, end: { line: 132, column: 9 } }, line: 127 }, "18": { name: "(anonymous_18)", decl: { start: { line: 141, column: 142 }, end: { line: 141, column: 143 } }, loc: { start: { line: 141, column: 209 }, end: { line: 146, column: 6 } }, line: 141 }, "19": { name: "(anonymous_19)", decl: { start: { line: 141, column: 209 }, end: { line: 141, column: 210 } }, loc: { start: { line: 141, column: 230 }, end: { line: 146, column: 6 } }, line: 141 }, "20": { name: "(anonymous_20)", decl: { start: { line: 156, column: 110 }, end: { line: 156, column: 111 } }, loc: { start: { line: 156, column: 131 }, end: { line: 156, column: 226 } }, line: 156 }, "21": { name: "(anonymous_21)", decl: { start: { line: 156, column: 143 }, end: { line: 156, column: 144 } }, loc: { start: { line: 156, column: 149 }, end: { line: 156, column: 170 } }, line: 156 }, "22": { name: "(anonymous_22)", decl: { start: { line: 156, column: 179 }, end: { line: 156, column: 180 } }, loc: { start: { line: 156, column: 187 }, end: { line: 156, column: 225 } }, line: 156 }, "23": { name: "(anonymous_23)", decl: { start: { line: 162, column: 105 }, end: { line: 162, column: 106 } }, loc: { start: { line: 162, column: 135 }, end: { line: 162, column: 226 } }, line: 162 }, "24": { name: "(anonymous_24)", decl: { start: { line: 162, column: 185 }, end: { line: 162, column: 186 } }, loc: { start: { line: 162, column: 192 }, end: { line: 162, column: 223 } }, line: 162 }, "25": { name: "(anonymous_25)", decl: { start: { line: 180, column: 79 }, end: { line: 180, column: 80 } }, loc: { start: { line: 180, column: 100 }, end: { line: 197, column: 9 } }, line: 180 }, "26": { name: "(anonymous_26)", decl: { start: { line: 180, column: 164 }, end: { line: 180, column: 165 } }, loc: { start: { line: 180, column: 181 }, end: { line: 197, column: 7 } }, line: 180 }, "27": { name: "(anonymous_27)", decl: { start: { line: 195, column: 78 }, end: { line: 195, column: 79 } }, loc: { start: { line: 195, column: 92 }, end: { line: 195, column: 120 } }, line: 195 }, "28": { name: "(anonymous_28)", decl: { start: { line: 202, column: 53 }, end: { line: 202, column: 54 } }, loc: { start: { line: 202, column: 62 }, end: { line: 202, column: 84 } }, line: 202 }, "29": { name: "(anonymous_29)", decl: { start: { line: 212, column: 57 }, end: { line: 212, column: 58 } }, loc: { start: { line: 212, column: 66 }, end: { line: 212, column: 96 } }, line: 212 }, "30": { name: "(anonymous_30)", decl: { start: { line: 218, column: 64 }, end: { line: 218, column: 65 } }, loc: { start: { line: 218, column: 73 }, end: { line: 218, column: 100 } }, line: 218 }, "31": { name: "(anonymous_31)", decl: { start: { line: 228, column: 59 }, end: { line: 228, column: 60 } }, loc: { start: { line: 228, column: 68 }, end: { line: 228, column: 90 } }, line: 228 }, "32": { name: "(anonymous_32)", decl: { start: { line: 238, column: 59 }, end: { line: 238, column: 60 } }, loc: { start: { line: 238, column: 68 }, end: { line: 238, column: 95 } }, line: 238 }, "33": { name: "(anonymous_33)", decl: { start: { line: 245, column: 67 }, end: { line: 245, column: 68 } }, loc: { start: { line: 245, column: 76 }, end: { line: 245, column: 114 } }, line: 245 }, "34": { name: "(anonymous_34)", decl: { start: { line: 260, column: 76 }, end: { line: 260, column: 77 } }, loc: { start: { line: 260, column: 84 }, end: { line: 260, column: 91 } }, line: 260 }, "35": { name: "(anonymous_35)", decl: { start: { line: 279, column: 79 }, end: { line: 279, column: 80 } }, loc: { start: { line: 279, column: 87 }, end: { line: 279, column: 99 } }, line: 279 }, "36": { name: "(anonymous_36)", decl: { start: { line: 296, column: 84 }, end: { line: 296, column: 85 } }, loc: { start: { line: 296, column: 103 }, end: { line: 308, column: 7 } }, line: 296 }, "37": { name: "(anonymous_37)", decl: { start: { line: 301, column: 95 }, end: { line: 301, column: 96 } }, loc: { start: { line: 301, column: 100 }, end: { line: 301, column: 113 } }, line: 301 }, "38": { name: "(anonymous_38)", decl: { start: { line: 302, column: 18 }, end: { line: 302, column: 19 } }, loc: { start: { line: 302, column: 23 }, end: { line: 302, column: 53 } }, line: 302 }, "39": { name: "(anonymous_39)", decl: { start: { line: 302, column: 59 }, end: { line: 302, column: 60 } }, loc: { start: { line: 302, column: 65 }, end: { line: 302, column: 83 } }, line: 302 }, "40": { name: "(anonymous_40)", decl: { start: { line: 315, column: 83 }, end: { line: 315, column: 84 } }, loc: { start: { line: 315, column: 108 }, end: { line: 319, column: 9 } }, line: 315 }, "41": { name: "(anonymous_41)", decl: { start: { line: 315, column: 177 }, end: { line: 315, column: 178 } }, loc: { start: { line: 315, column: 199 }, end: { line: 319, column: 7 } }, line: 315 }, "42": { name: "(anonymous_42)", decl: { start: { line: 329, column: 9 }, end: { line: 329, column: 10 } }, loc: { start: { line: 329, column: 76 }, end: { line: 369, column: 9 } }, line: 329 }, "43": { name: "(anonymous_43)", decl: { start: { line: 329, column: 145 }, end: { line: 329, column: 146 } }, loc: { start: { line: 329, column: 170 }, end: { line: 369, column: 7 } }, line: 329 }, "44": { name: "(anonymous_44)", decl: { start: { line: 335, column: 67 }, end: { line: 335, column: 68 } }, loc: { start: { line: 335, column: 77 }, end: { line: 335, column: 121 } }, line: 335 }, "45": { name: "(anonymous_45)", decl: { start: { line: 340, column: 67 }, end: { line: 340, column: 68 } }, loc: { start: { line: 340, column: 77 }, end: { line: 340, column: 131 } }, line: 340 }, "46": { name: "(anonymous_46)", decl: { start: { line: 349, column: 67 }, end: { line: 349, column: 68 } }, loc: { start: { line: 349, column: 73 }, end: { line: 349, column: 104 } }, line: 349 }, "47": { name: "(anonymous_47)", decl: { start: { line: 349, column: 113 }, end: { line: 349, column: 114 } }, loc: { start: { line: 349, column: 127 }, end: { line: 349, column: 151 } }, line: 349 }, "48": { name: "(anonymous_48)", decl: { start: { line: 376, column: 93 }, end: { line: 376, column: 94 } }, loc: { start: { line: 376, column: 99 }, end: { line: 396, column: 7 } }, line: 376 }, "49": { name: "(anonymous_49)", decl: { start: { line: 377, column: 51 }, end: { line: 377, column: 52 } }, loc: { start: { line: 377, column: 89 }, end: { line: 391, column: 9 } }, line: 377 }, "50": { name: "(anonymous_50)", decl: { start: { line: 378, column: 66 }, end: { line: 378, column: 67 } }, loc: { start: { line: 378, column: 72 }, end: { line: 388, column: 11 } }, line: 378 }, "51": { name: "(anonymous_51)", decl: { start: { line: 379, column: 56 }, end: { line: 379, column: 57 } }, loc: { start: { line: 379, column: 86 }, end: { line: 383, column: 13 } }, line: 379 }, "52": { name: "(anonymous_52)", decl: { start: { line: 385, column: 19 }, end: { line: 385, column: 20 } }, loc: { start: { line: 385, column: 34 }, end: { line: 387, column: 13 } }, line: 385 }, "53": { name: "(anonymous_53)", decl: { start: { line: 393, column: 15 }, end: { line: 393, column: 16 } }, loc: { start: { line: 393, column: 39 }, end: { line: 395, column: 9 } }, line: 393 }, "54": { name: "(anonymous_54)", decl: { start: { line: 403, column: 60 }, end: { line: 403, column: 61 } }, loc: { start: { line: 403, column: 66 }, end: { line: 411, column: 7 } }, line: 403 }, "55": { name: "(anonymous_55)", decl: { start: { line: 404, column: 52 }, end: { line: 404, column: 53 } }, loc: { start: { line: 404, column: 72 }, end: { line: 406, column: 9 } }, line: 404 }, "56": { name: "(anonymous_56)", decl: { start: { line: 408, column: 15 }, end: { line: 408, column: 16 } }, loc: { start: { line: 408, column: 30 }, end: { line: 410, column: 9 } }, line: 408 } }, branchMap: { "0": { loc: { start: { line: 57, column: 40 }, end: { line: 57, column: 267 } }, type: "if", locations: [{ start: { line: 57, column: 40 }, end: { line: 57, column: 267 } }, { start: { line: 57, column: 40 }, end: { line: 57, column: 267 } }], line: 57 }, "1": { loc: { start: { line: 57, column: 44 }, end: { line: 57, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 57, column: 44 }, end: { line: 57, column: 47 } }, { start: { line: 57, column: 51 }, end: { line: 57, column: 65 } }], line: 57 }, "2": { loc: { start: { line: 57, column: 107 }, end: { line: 57, column: 228 } }, type: "if", locations: [{ start: { line: 57, column: 107 }, end: { line: 57, column: 228 } }, { start: { line: 57, column: 107 }, end: { line: 57, column: 228 } }], line: 57 }, "3": { loc: { start: { line: 57, column: 149 }, end: { line: 57, column: 224 } }, type: "if", locations: [{ start: { line: 57, column: 149 }, end: { line: 57, column: 224 } }, { start: { line: 57, column: 149 }, end: { line: 57, column: 224 } }], line: 57 }, "4": { loc: { start: { line: 59, column: 46 }, end: { line: 59, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 59, column: 70 }, end: { line: 59, column: 73 } }, { start: { line: 59, column: 76 }, end: { line: 59, column: 92 } }], line: 59 }, "5": { loc: { start: { line: 59, column: 46 }, end: { line: 59, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 59, column: 46 }, end: { line: 59, column: 49 } }, { start: { line: 59, column: 53 }, end: { line: 59, column: 67 } }], line: 59 }, "6": { loc: { start: { line: 73, column: 60 }, end: { line: 73, column: 71 } }, type: "binary-expr", locations: [{ start: { line: 73, column: 60 }, end: { line: 73, column: 65 } }, { start: { line: 73, column: 69 }, end: { line: 73, column: 71 } }], line: 73 }, "7": { loc: { start: { line: 78, column: 77 }, end: { line: 78, column: 114 } }, type: "binary-expr", locations: [{ start: { line: 78, column: 77 }, end: { line: 78, column: 108 } }, { start: { line: 78, column: 112 }, end: { line: 78, column: 114 } }], line: 78 }, "8": { loc: { start: { line: 84, column: 40 }, end: { line: 84, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 84, column: 40 }, end: { line: 84, column: 61 } }, { start: { line: 84, column: 65 }, end: { line: 84, column: 67 } }], line: 84 }, "9": { loc: { start: { line: 182, column: 8 }, end: { line: 184, column: 9 } }, type: "if", locations: [{ start: { line: 182, column: 8 }, end: { line: 184, column: 9 } }, { start: { line: 182, column: 8 }, end: { line: 184, column: 9 } }], line: 182 }, "10": { loc: { start: { line: 182, column: 12 }, end: { line: 182, column: 89 } }, type: "binary-expr", locations: [{ start: { line: 182, column: 12 }, end: { line: 182, column: 56 } }, { start: { line: 182, column: 60 }, end: { line: 182, column: 89 } }], line: 182 }, "11": { loc: { start: { line: 301, column: 59 }, end: { line: 301, column: 86 } }, type: "binary-expr", locations: [{ start: { line: 301, column: 59 }, end: { line: 301, column: 80 } }, { start: { line: 301, column: 84 }, end: { line: 301, column: 86 } }], line: 301 }, "12": { loc: { start: { line: 334, column: 8 }, end: { line: 344, column: 9 } }, type: "if", locations: [{ start: { line: 334, column: 8 }, end: { line: 344, column: 9 } }, { start: { line: 334, column: 8 }, end: { line: 344, column: 9 } }], line: 334 }, "13": { loc: { start: { line: 335, column: 26 }, end: { line: 335, column: 58 } }, type: "binary-expr", locations: [{ start: { line: 335, column: 26 }, end: { line: 335, column: 52 } }, { start: { line: 335, column: 56 }, end: { line: 335, column: 58 } }], line: 335 }, "14": { loc: { start: { line: 336, column: 10 }, end: { line: 338, column: 11 } }, type: "if", locations: [{ start: { line: 336, column: 10 }, end: { line: 338, column: 11 } }, { start: { line: 336, column: 10 }, end: { line: 338, column: 11 } }], line: 336 }, "15": { loc: { start: { line: 340, column: 26 }, end: { line: 340, column: 58 } }, type: "binary-expr", locations: [{ start: { line: 340, column: 26 }, end: { line: 340, column: 52 } }, { start: { line: 340, column: 56 }, end: { line: 340, column: 58 } }], line: 340 }, "16": { loc: { start: { line: 341, column: 10 }, end: { line: 343, column: 11 } }, type: "if", locations: [{ start: { line: 341, column: 10 }, end: { line: 343, column: 11 } }, { start: { line: 341, column: 10 }, end: { line: 343, column: 11 } }], line: 341 }, "17": { loc: { start: { line: 348, column: 8 }, end: { line: 357, column: 9 } }, type: "if", locations: [{ start: { line: 348, column: 8 }, end: { line: 357, column: 9 } }, { start: { line: 348, column: 8 }, end: { line: 357, column: 9 } }], line: 348 }, "18": { loc: { start: { line: 349, column: 29 }, end: { line: 349, column: 61 } }, type: "binary-expr", locations: [{ start: { line: 349, column: 29 }, end: { line: 349, column: 55 } }, { start: { line: 349, column: 59 }, end: { line: 349, column: 61 } }], line: 349 }, "19": { loc: { start: { line: 351, column: 10 }, end: { line: 356, column: 11 } }, type: "if", locations: [{ start: { line: 351, column: 10 }, end: { line: 356, column: 11 } }, { start: { line: 351, column: 10 }, end: { line: 356, column: 11 } }], line: 351 }, "20": { loc: { start: { line: 361, column: 22 }, end: { line: 361, column: 48 } }, type: "binary-expr", locations: [{ start: { line: 361, column: 22 }, end: { line: 361, column: 42 } }, { start: { line: 361, column: 46 }, end: { line: 361, column: 48 } }], line: 361 }, "21": { loc: { start: { line: 362, column: 8 }, end: { line: 364, column: 9 } }, type: "if", locations: [{ start: { line: 362, column: 8 }, end: { line: 364, column: 9 } }, { start: { line: 362, column: 8 }, end: { line: 364, column: 9 } }], line: 362 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0, "57": 0, "58": 0, "59": 0, "60": 0, "61": 0, "62": 0, "63": 0, "64": 0, "65": 0, "66": 0, "67": 0, "68": 0, "69": 0, "70": 0, "71": 0, "72": 0, "73": 0, "74": 0, "75": 0, "76": 0, "77": 0, "78": 0, "79": 0, "80": 0, "81": 0, "82": 0, "83": 0, "84": 0, "85": 0, "86": 0, "87": 0, "88": 0, "89": 0, "90": 0, "91": 0, "92": 0, "93": 0, "94": 0, "95": 0, "96": 0, "97": 0, "98": 0, "99": 0, "100": 0, "101": 0, "102": 0, "103": 0, "104": 0, "105": 0, "106": 0, "107": 0, "108": 0, "109": 0, "110": 0, "111": 0, "112": 0, "113": 0, "114": 0, "115": 0, "116": 0, "117": 0, "118": 0, "119": 0, "120": 0, "121": 0, "122": 0, "123": 0, "124": 0, "125": 0, "126": 0, "127": 0, "128": 0, "129": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0, 0], "7": [0, 0], "8": [0, 0], "9": [0, 0], "10": [0, 0], "11": [0, 0], "12": [0, 0], "13": [0, 0], "14": [0, 0], "15": [0, 0], "16": [0, 0], "17": [0, 0], "18": [0, 0], "19": [0, 0], "20": [0, 0], "21": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/data/selectors/index.js"], names: ["TruffleDecodeUtils", "debug", "identity", "x", "createStateSelectors", "stack", "memory", "storage", "words", "map", "word", "Conversion", "toBytes", "toBN", "EVM", "WORD_SIZE", "Uint8Array", "join", "match", "byte", "parseInt", "mapping", "address", "data", "state", "views", "ast", "current", "tree", "atLastInstructionForSourceRange", "solidity", "isSourceRangeFinal", "final", "scopes", "inlined", "_", "id", "info", "newInfo", "variables", "raw", "sources", "entry", "definition", "jsonpointer", "get", "sourceId", "pointer", "decoder", "referenceDeclarations", "mappingKeys", "storageAllocations", "ref", "userDefinedTypes", "contractDefinitions", "typeIds", "filter", "node", "nodeType", "scope", "undefined", "newScope", "linearizedBaseContractsFromBase", "linearizedBaseContracts", "slice", "reverse", "concat", "contractId", "byId", "allocations", "proc", "assignments", "decodingMappingKeys", "decodingStarted", "evm", "functionDepth", "call", "dummyAddress", "creationDepth", "identifiers", "cur", "v", "name", "parentId", "definitions", "identifier", "refs", "currentDepth", "astId", "matchIds", "byAstId", "idHash", "length", "matchFrames", "stackframe", "maxMatch", "Math", "min", "max", "decoded", "decode", "keyedPromises", "keyedResults", "all", "cleanContainers", "native", "cleanBNs", "next"], mappings: "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", file: "index.js", sourceRoot: "/Users/tyler/projects/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:data:selectors\"); // eslint-disable-line no-unused-vars\n\nimport { createSelectorTree, createLeaf } from \"reselect-tree\";\nimport jsonpointer from \"json-pointer\";\n\nimport { stableKeccak256 } from \"lib/helpers\";\n\nimport ast from \"lib/ast/selectors\";\nimport evm from \"lib/evm/selectors\";\nimport solidity from \"lib/solidity/selectors\";\n\nimport * as TruffleDecodeUtils from \"truffle-decode-utils\";\nimport { forEvmState } from \"truffle-decoder\";\n\n/**\n * @private\n */\nconst identity = x => x;\n\nfunction createStateSelectors({ stack, memory, storage }) {\n  return {\n    /**\n     * .stack\n     */\n    stack: createLeaf(\n      [stack],\n\n      words =>\n        (words || []).map(word =>\n          TruffleDecodeUtils.Conversion.toBytes(\n            TruffleDecodeUtils.Conversion.toBN(\n              word,\n              TruffleDecodeUtils.EVM.WORD_SIZE\n            )\n          )\n        )\n    ),\n\n    /**\n     * .memory\n     */\n    memory: createLeaf(\n      [memory],\n\n      words =>\n        new Uint8Array(\n          (words.join(\"\").match(/.{1,2}/g) || []).map(byte =>\n            parseInt(byte, 16)\n          )\n        )\n    ),\n\n    /**\n     * .storage\n     */\n    storage: createLeaf(\n      [storage],\n\n      mapping =>\n        Object.assign(\n          {},\n          ...Object.entries(mapping).map(([address, word]) => ({\n            [`0x${address}`]: new Uint8Array(\n              (word.match(/.{1,2}/g) || []).map(byte => parseInt(byte, 16))\n            )\n          }))\n        )\n    )\n  };\n}\n\nconst data = createSelectorTree({\n  state: state => state.data,\n\n  /**\n   * data.views\n   */\n  views: {\n    /**\n     * data.views.ast\n     */\n    ast: createLeaf([ast.current], tree => tree),\n\n    /*\n     * data.views.atLastInstructionForSourceRange\n     */\n    atLastInstructionForSourceRange: createLeaf(\n      [solidity.current.isSourceRangeFinal],\n      final => final\n    ),\n\n    /**\n     * data.views.scopes (namespace)\n     */\n    scopes: {\n      /**\n       * data.views.scopes.inlined (namespace)\n       */\n      inlined: {\n        /**\n         * data.views.scopes.inlined (selector)\n         * see data.info.scopes for how this differs from the raw version\n         */\n        _: createLeaf([\"/info/scopes\", \"./raw\"], (scopes, inlined) =>\n          Object.assign(\n            {},\n            ...Object.entries(inlined).map(([id, info]) => {\n              let newInfo = { ...info };\n              newInfo.variables = scopes[id].variables;\n              return { [id]: newInfo };\n            })\n          )\n        ),\n\n        /**\n         * data.views.scopes.inlined.raw\n         */\n        raw: createLeaf(\n          [\"/info/scopes/raw\", solidity.info.sources],\n\n          (scopes, sources) =>\n            Object.assign(\n              {},\n              ...Object.entries(scopes).map(([id, entry]) => ({\n                [id]: {\n                  ...entry,\n\n                  definition: jsonpointer.get(\n                    sources[entry.sourceId].ast,\n                    entry.pointer\n                  )\n                }\n              }))\n            )\n        )\n      }\n    },\n\n    /**\n     * data.views.decoder\n     *\n     * selector returns (ast node definition, data reference) => Promise<value>\n     */\n    decoder: createLeaf(\n      [\n        \"/views/referenceDeclarations\",\n        \"/next/state\",\n        \"/proc/mappingKeys\",\n        \"/info/allocations/storage\"\n      ],\n\n      (referenceDeclarations, state, mappingKeys, storageAllocations) => (\n        definition,\n        ref\n      ) =>\n        forEvmState(definition, ref, {\n          referenceDeclarations,\n          state,\n          mappingKeys,\n          storageAllocations\n        })\n    ),\n\n    /*\n     * data.views.userDefinedTypes\n     */\n    userDefinedTypes: {\n      /*\n       * data.views.userDefinedTypes.contractDefinitions\n       * restrict to contracts only, and get their definitions\n       */\n      contractDefinitions: createLeaf(\n        [\"/info/userDefinedTypes\", \"/views/scopes/inlined\"],\n        (typeIds, scopes) =>\n          typeIds\n            .map(id => scopes[id].definition)\n            .filter(node => node.nodeType === \"ContractDefinition\")\n      )\n    },\n\n    /*\n     * data.views.referenceDeclarations\n     */\n    referenceDeclarations: createLeaf(\n      [\"./scopes/inlined\", \"/info/userDefinedTypes\"],\n      (scopes, userDefinedTypes) =>\n        Object.assign(\n          {},\n          ...userDefinedTypes.map(id => ({ [id]: scopes[id].definition }))\n        )\n    )\n  },\n\n  /**\n   * data.info\n   */\n  info: {\n    /**\n     * data.info.scopes (namespace)\n     */\n    scopes: {\n      /**\n       * data.info.scopes (selector)\n       * the raw version is below; this version accounts for inheritance\n       * NOTE: doesn't this selector really belong in data.views?  Yes.\n       * But, since it's replacing the old data.info.scopes (which is now\n       * data.info.scopes.raw), I didn't want to move it.\n       */\n      _: createLeaf([\"./raw\", \"/views/scopes/inlined/raw\"], (scopes, inlined) =>\n        Object.assign(\n          {},\n          ...Object.entries(scopes).map(([id, scope]) => {\n            let definition = inlined[id].definition;\n            if (\n              definition.nodeType !== \"ContractDefinition\" ||\n              scope.variables === undefined\n            ) {\n              return { [id]: scope };\n            }\n            //if we've reached this point, we should be dealing with a\n            //contract, and specifically a contract -- not an interface or\n            //library (those don't get \"variables\" entries in their scopes)\n            debug(\"contract id %d\", id);\n            let newScope = { ...scope };\n            //note that Solidity gives us the linearization in order from most\n            //derived to most base, but we want most base to most derived;\n            //annoyingly, reverse() is in-place, so we clone with slice() first\n            let linearizedBaseContractsFromBase = definition.linearizedBaseContracts\n              .slice()\n              .reverse();\n            //now, we put it all together\n            newScope.variables = [].concat(\n              ...linearizedBaseContractsFromBase.map(\n                contractId => scopes[contractId].variables\n              )\n            );\n            return { [id]: newScope };\n          })\n        )\n      ),\n\n      /*\n       * data.info.scopes.raw\n       */\n      raw: createLeaf([\"/state\"], state => state.info.scopes.byId)\n    },\n\n    /*\n     * data.info.allocations\n     */\n    allocations: {\n      /*\n       * data.info.allocations.storage\n       */\n      storage: createLeaf([\"/state\"], state => state.info.allocations.storage)\n    },\n\n    /**\n     * data.info.userDefinedTypes\n     */\n    userDefinedTypes: createLeaf(\n      [\"/state\"],\n      state => state.info.userDefinedTypes\n    )\n  },\n\n  /**\n   * data.proc\n   */\n  proc: {\n    /**\n     * data.proc.assignments\n     */\n    assignments: createLeaf(\n      [\"/state\"],\n      state => state.proc.assignments\n      //note: this no longer fetches just the byId, but rather the whole\n      //assignments object\n    ),\n\n    /**\n     * data.proc.mappingKeys\n     *\n     * known keys for each mapping (identified by node ID)\n     */\n    mappingKeys: createLeaf([\"/state\"], state => state.proc.mappingKeys.byId),\n\n    /**\n     * data.proc.decodingMappingKeys\n     *\n     * number of mapping keys that are still decoding\n     */\n    decodingMappingKeys: createLeaf(\n      [\"/state\"],\n      state => state.proc.mappingKeys.decodingStarted\n    )\n  },\n\n  /**\n   * data.current\n   */\n  current: {\n    /**\n     *\n     * data.current.scope\n     */\n    scope: {\n      /**\n       * data.current.scope.id\n       */\n      id: createLeaf([ast.current.node], node => node.id)\n    },\n\n    /**\n     * data.current.state\n     */\n    state: createStateSelectors(evm.current.state),\n\n    /**\n     * data.current.functionDepth\n     */\n\n    functionDepth: createLeaf([solidity.current.functionDepth], identity),\n\n    /**\n     * data.current.address\n     * Note: May be undefined (if in an initializer)\n     */\n\n    address: createLeaf([evm.current.call], call => call.address),\n\n    /**\n     * data.current.dummyAddress\n     */\n\n    dummyAddress: createLeaf([evm.current.creationDepth], identity),\n\n    /**\n     * data.current.identifiers (namespace)\n     */\n    identifiers: {\n      /**\n       * data.current.identifiers (selector)\n       *\n       * returns identifers and corresponding definition node ID\n       */\n      _: createLeaf(\n        [\"/views/scopes/inlined\", \"/current/scope\"],\n\n        (scopes, scope) => {\n          let cur = scope.id;\n          let variables = {};\n\n          do {\n            variables = Object.assign(\n              variables,\n              ...(scopes[cur].variables || [])\n                .filter(v => v.name !== \"\") //exclude anonymous output params\n                .filter(v => variables[v.name] == undefined)\n                .map(v => ({ [v.name]: v.id }))\n            );\n\n            cur = scopes[cur].parentId;\n          } while (cur != null);\n\n          return variables;\n        }\n      ),\n\n      /**\n       * data.current.identifiers.definitions\n       *\n       * current variable definitions\n       */\n      definitions: createLeaf(\n        [\"/views/scopes/inlined\", \"./_\"],\n\n        (scopes, identifiers) =>\n          Object.assign(\n            {},\n            ...Object.entries(identifiers).map(([identifier, id]) => {\n              let { definition } = scopes[id];\n\n              return { [identifier]: definition };\n            })\n          )\n      ),\n\n      /**\n       * data.current.identifiers.refs\n       *\n       * current variables' value refs\n       */\n      refs: createLeaf(\n        [\n          \"/proc/assignments\",\n          \"./_\",\n          solidity.current.functionDepth, //for pruning things too deep on stack\n          \"/current/address\", //for contract variables\n          \"/current/dummyAddress\" //for contract vars when in creation call\n        ],\n\n        (assignments, identifiers, currentDepth, address, dummyAddress) =>\n          Object.assign(\n            {},\n            ...Object.entries(identifiers).map(([identifier, astId]) => {\n              //note: this needs tweaking for specials later\n              let id;\n\n              //first, check if it's a contract var\n              if (address !== undefined) {\n                let matchIds = (assignments.byAstId[astId] || []).filter(\n                  idHash => assignments.byId[idHash].address === address\n                );\n                if (matchIds.length > 0) {\n                  id = matchIds[0]; //there should only be one!\n                }\n              } else {\n                let matchIds = (assignments.byAstId[astId] || []).filter(\n                  idHash =>\n                    assignments.byId[idHash].dummyAddress === dummyAddress\n                );\n                if (matchIds.length > 0) {\n                  id = matchIds[0]; //again, there should only be one!\n                }\n              }\n\n              //if not contract, it's local, so find the innermost\n              //(but not beyond current depth)\n              if (id === undefined) {\n                let matchFrames = (assignments.byAstId[astId] || [])\n                  .map(id => assignments.byId[id].stackframe)\n                  .filter(stackframe => stackframe !== undefined);\n\n                if (matchFrames.length > 0) {\n                  //this check isn't *really*\n                  //necessary, but may as well prevent stupid stuff\n                  let maxMatch = Math.min(\n                    currentDepth,\n                    Math.max(...matchFrames)\n                  );\n                  id = stableKeccak256({ astId, stackframe: maxMatch });\n                }\n              }\n\n              //if we still didn't find it, oh well\n\n              let { ref } = assignments.byId[id] || {};\n              if (!ref) {\n                return undefined;\n              }\n\n              return {\n                [identifier]: ref\n              };\n            })\n          )\n      ),\n\n      /**\n       * data.current.identifiers.decoded\n       *\n       * Returns an object with values as Promises\n       */\n      decoded: createLeaf(\n        [\"/views/decoder\", \"./definitions\", \"./refs\"],\n\n        async (decode, definitions, refs) => {\n          const keyedPromises = Object.entries(refs).map(\n            async ([identifier, ref]) => ({\n              [identifier]: await decode(definitions[identifier], ref)\n            })\n          );\n          const keyedResults = await Promise.all(keyedPromises);\n          return TruffleDecodeUtils.Conversion.cleanContainers(\n            Object.assign({}, ...keyedResults)\n          );\n        }\n      ),\n\n      /**\n       * data.current.identifiers.native\n       *\n       * Returns an object with values as Promises\n       */\n      native: createLeaf([\"./decoded\"], async decoded => {\n        return TruffleDecodeUtils.Conversion.cleanBNs(await decoded);\n      })\n    }\n  },\n\n  /**\n   * data.next\n   */\n  next: {\n    /**\n     * data.next.state\n     */\n    state: createStateSelectors(evm.next.state)\n  }\n});\n\nexport default data;\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_27jr84kqem.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _promise = (cov_27jr84kqem.s[1]++, __webpack_require__(20));var _promise2 = (cov_27jr84kqem.s[2]++, _interopRequireDefault(_promise));var _asyncToGenerator2 = (cov_27jr84kqem.s[3]++, __webpack_require__(1));var _asyncToGenerator3 = (cov_27jr84kqem.s[4]++, _interopRequireDefault(_asyncToGenerator2));var _extends2 = (cov_27jr84kqem.s[5]++, __webpack_require__(12));var _extends3 = (cov_27jr84kqem.s[6]++, _interopRequireDefault(_extends2));var _entries = (cov_27jr84kqem.s[7]++, __webpack_require__(8));var _entries2 = (cov_27jr84kqem.s[8]++, _interopRequireDefault(_entries));var _assign = (cov_27jr84kqem.s[9]++, __webpack_require__(9));var _assign2 = (cov_27jr84kqem.s[10]++, _interopRequireDefault(_assign));var _debug = (cov_27jr84kqem.s[11]++, __webpack_require__(0));var _debug2 = (cov_27jr84kqem.s[12]++, _interopRequireDefault(_debug));var _reselectTree = (cov_27jr84kqem.s[13]++, __webpack_require__(13));var _jsonPointer = (cov_27jr84kqem.s[14]++, __webpack_require__(23));var _jsonPointer2 = (cov_27jr84kqem.s[15]++, _interopRequireDefault(_jsonPointer));var _helpers = (cov_27jr84kqem.s[16]++, __webpack_require__(2));var _selectors = (cov_27jr84kqem.s[17]++, __webpack_require__(18));var _selectors2 = (cov_27jr84kqem.s[18]++, _interopRequireDefault(_selectors));var _selectors3 = (cov_27jr84kqem.s[19]++, __webpack_require__(10));var _selectors4 = (cov_27jr84kqem.s[20]++, _interopRequireDefault(_selectors3));var _selectors5 = (cov_27jr84kqem.s[21]++, __webpack_require__(3));var _selectors6 = (cov_27jr84kqem.s[22]++, _interopRequireDefault(_selectors5));var _truffleDecodeUtils = (cov_27jr84kqem.s[23]++, __webpack_require__(14));var TruffleDecodeUtils = (cov_27jr84kqem.s[24]++, _interopRequireWildcard(_truffleDecodeUtils));var _truffleDecoder = (cov_27jr84kqem.s[25]++, __webpack_require__(31));function _interopRequireWildcard(obj) {
  cov_27jr84kqem.f[0]++;cov_27jr84kqem.s[26]++;if ((cov_27jr84kqem.b[1][0]++, obj) && (cov_27jr84kqem.b[1][1]++, obj.__esModule)) {
    cov_27jr84kqem.b[0][0]++;cov_27jr84kqem.s[27]++;return obj;
  } else {
    cov_27jr84kqem.b[0][1]++;var newObj = (cov_27jr84kqem.s[28]++, {});cov_27jr84kqem.s[29]++;if (obj != null) {
      cov_27jr84kqem.b[2][0]++;cov_27jr84kqem.s[30]++;for (var key in obj) {
        cov_27jr84kqem.s[31]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_27jr84kqem.b[3][0]++;cov_27jr84kqem.s[32]++;newObj[key] = obj[key];
        } else {
          cov_27jr84kqem.b[3][1]++;
        }
      }
    } else {
      cov_27jr84kqem.b[2][1]++;
    }cov_27jr84kqem.s[33]++;newObj.default = obj;cov_27jr84kqem.s[34]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_27jr84kqem.f[1]++;cov_27jr84kqem.s[35]++;return (cov_27jr84kqem.b[5][0]++, obj) && (cov_27jr84kqem.b[5][1]++, obj.__esModule) ? (cov_27jr84kqem.b[4][0]++, obj) : (cov_27jr84kqem.b[4][1]++, { default: obj });
}const debug = (cov_27jr84kqem.s[36]++, (0, _debug2.default)("debugger:data:selectors"));cov_27jr84kqem.s[37]++;const identity = x => {
  cov_27jr84kqem.f[2]++;cov_27jr84kqem.s[38]++;return x;
};function createStateSelectors({ stack, memory, storage }) {
  cov_27jr84kqem.f[3]++;cov_27jr84kqem.s[39]++;return { stack: (0, _reselectTree.createLeaf)([stack], words => {
      cov_27jr84kqem.f[4]++;cov_27jr84kqem.s[40]++;return ((cov_27jr84kqem.b[6][0]++, words) || (cov_27jr84kqem.b[6][1]++, [])).map(word => {
        cov_27jr84kqem.f[5]++;cov_27jr84kqem.s[41]++;return TruffleDecodeUtils.Conversion.toBytes(TruffleDecodeUtils.Conversion.toBN(word, TruffleDecodeUtils.EVM.WORD_SIZE));
      });
    }), memory: (0, _reselectTree.createLeaf)([memory], words => {
      cov_27jr84kqem.f[6]++;cov_27jr84kqem.s[42]++;return new Uint8Array(((cov_27jr84kqem.b[7][0]++, words.join("").match(/.{1,2}/g)) || (cov_27jr84kqem.b[7][1]++, [])).map(byte => {
        cov_27jr84kqem.f[7]++;cov_27jr84kqem.s[43]++;return parseInt(byte, 16);
      }));
    }), storage: (0, _reselectTree.createLeaf)([storage], mapping => {
      cov_27jr84kqem.f[8]++;cov_27jr84kqem.s[44]++;return (0, _assign2.default)({}, ...(0, _entries2.default)(mapping).map(([address, word]) => {
        cov_27jr84kqem.f[9]++;cov_27jr84kqem.s[45]++;return { [`0x${address}`]: new Uint8Array(((cov_27jr84kqem.b[8][0]++, word.match(/.{1,2}/g)) || (cov_27jr84kqem.b[8][1]++, [])).map(byte => {
            cov_27jr84kqem.f[10]++;cov_27jr84kqem.s[46]++;return parseInt(byte, 16);
          })) };
      }));
    }) };
}const data = (cov_27jr84kqem.s[47]++, (0, _reselectTree.createSelectorTree)({ state: state => {
    cov_27jr84kqem.f[11]++;cov_27jr84kqem.s[48]++;return state.data;
  }, views: { ast: (0, _reselectTree.createLeaf)([_selectors2.default.current], tree => {
      cov_27jr84kqem.f[12]++;cov_27jr84kqem.s[49]++;return tree;
    }), atLastInstructionForSourceRange: (0, _reselectTree.createLeaf)([_selectors6.default.current.isSourceRangeFinal], final => {
      cov_27jr84kqem.f[13]++;cov_27jr84kqem.s[50]++;return final;
    }), scopes: { inlined: { _: (0, _reselectTree.createLeaf)(["/info/scopes", "./raw"], (scopes, inlined) => {
          cov_27jr84kqem.f[14]++;cov_27jr84kqem.s[51]++;return (0, _assign2.default)({}, ...(0, _entries2.default)(inlined).map(([id, info]) => {
            cov_27jr84kqem.f[15]++;let newInfo = (cov_27jr84kqem.s[52]++, (0, _extends3.default)({}, info));cov_27jr84kqem.s[53]++;newInfo.variables = scopes[id].variables;cov_27jr84kqem.s[54]++;return { [id]: newInfo };
          }));
        }), raw: (0, _reselectTree.createLeaf)(["/info/scopes/raw", _selectors6.default.info.sources], (scopes, sources) => {
          cov_27jr84kqem.f[16]++;cov_27jr84kqem.s[55]++;return (0, _assign2.default)({}, ...(0, _entries2.default)(scopes).map(([id, entry]) => {
            cov_27jr84kqem.f[17]++;cov_27jr84kqem.s[56]++;return { [id]: (0, _extends3.default)({}, entry, { definition: _jsonPointer2.default.get(sources[entry.sourceId].ast, entry.pointer) }) };
          }));
        }) } }, decoder: (0, _reselectTree.createLeaf)(["/views/referenceDeclarations", "/next/state", "/proc/mappingKeys", "/info/allocations/storage"], (referenceDeclarations, state, mappingKeys, storageAllocations) => {
      cov_27jr84kqem.f[18]++;cov_27jr84kqem.s[57]++;return (definition, ref) => {
        cov_27jr84kqem.f[19]++;cov_27jr84kqem.s[58]++;return (0, _truffleDecoder.forEvmState)(definition, ref, { referenceDeclarations, state, mappingKeys, storageAllocations });
      };
    }), userDefinedTypes: { contractDefinitions: (0, _reselectTree.createLeaf)(["/info/userDefinedTypes", "/views/scopes/inlined"], (typeIds, scopes) => {
        cov_27jr84kqem.f[20]++;cov_27jr84kqem.s[59]++;return typeIds.map(id => {
          cov_27jr84kqem.f[21]++;cov_27jr84kqem.s[60]++;return scopes[id].definition;
        }).filter(node => {
          cov_27jr84kqem.f[22]++;cov_27jr84kqem.s[61]++;return node.nodeType === "ContractDefinition";
        });
      }) }, referenceDeclarations: (0, _reselectTree.createLeaf)(["./scopes/inlined", "/info/userDefinedTypes"], (scopes, userDefinedTypes) => {
      cov_27jr84kqem.f[23]++;cov_27jr84kqem.s[62]++;return (0, _assign2.default)({}, ...userDefinedTypes.map(id => {
        cov_27jr84kqem.f[24]++;cov_27jr84kqem.s[63]++;return { [id]: scopes[id].definition };
      }));
    }) }, info: { scopes: { _: (0, _reselectTree.createLeaf)(["./raw", "/views/scopes/inlined/raw"], (scopes, inlined) => {
        cov_27jr84kqem.f[25]++;cov_27jr84kqem.s[64]++;return (0, _assign2.default)({}, ...(0, _entries2.default)(scopes).map(([id, scope]) => {
          cov_27jr84kqem.f[26]++;let definition = (cov_27jr84kqem.s[65]++, inlined[id].definition);cov_27jr84kqem.s[66]++;if ((cov_27jr84kqem.b[10][0]++, definition.nodeType !== "ContractDefinition") || (cov_27jr84kqem.b[10][1]++, scope.variables === undefined)) {
            cov_27jr84kqem.b[9][0]++;cov_27jr84kqem.s[67]++;return { [id]: scope };
          } else {
            cov_27jr84kqem.b[9][1]++;
          }cov_27jr84kqem.s[68]++;debug("contract id %d", id);let newScope = (cov_27jr84kqem.s[69]++, (0, _extends3.default)({}, scope));let linearizedBaseContractsFromBase = (cov_27jr84kqem.s[70]++, definition.linearizedBaseContracts.slice().reverse());cov_27jr84kqem.s[71]++;newScope.variables = [].concat(...linearizedBaseContractsFromBase.map(contractId => {
            cov_27jr84kqem.f[27]++;cov_27jr84kqem.s[72]++;return scopes[contractId].variables;
          }));cov_27jr84kqem.s[73]++;return { [id]: newScope };
        }));
      }), raw: (0, _reselectTree.createLeaf)(["/state"], state => {
        cov_27jr84kqem.f[28]++;cov_27jr84kqem.s[74]++;return state.info.scopes.byId;
      }) }, allocations: { storage: (0, _reselectTree.createLeaf)(["/state"], state => {
        cov_27jr84kqem.f[29]++;cov_27jr84kqem.s[75]++;return state.info.allocations.storage;
      }) }, userDefinedTypes: (0, _reselectTree.createLeaf)(["/state"], state => {
      cov_27jr84kqem.f[30]++;cov_27jr84kqem.s[76]++;return state.info.userDefinedTypes;
    }) }, proc: { assignments: (0, _reselectTree.createLeaf)(["/state"], state => {
      cov_27jr84kqem.f[31]++;cov_27jr84kqem.s[77]++;return state.proc.assignments;
    }), mappingKeys: (0, _reselectTree.createLeaf)(["/state"], state => {
      cov_27jr84kqem.f[32]++;cov_27jr84kqem.s[78]++;return state.proc.mappingKeys.byId;
    }), decodingMappingKeys: (0, _reselectTree.createLeaf)(["/state"], state => {
      cov_27jr84kqem.f[33]++;cov_27jr84kqem.s[79]++;return state.proc.mappingKeys.decodingStarted;
    }) }, current: { scope: { id: (0, _reselectTree.createLeaf)([_selectors2.default.current.node], node => {
        cov_27jr84kqem.f[34]++;cov_27jr84kqem.s[80]++;return node.id;
      }) }, state: createStateSelectors(_selectors4.default.current.state), functionDepth: (0, _reselectTree.createLeaf)([_selectors6.default.current.functionDepth], identity), address: (0, _reselectTree.createLeaf)([_selectors4.default.current.call], call => {
      cov_27jr84kqem.f[35]++;cov_27jr84kqem.s[81]++;return call.address;
    }), dummyAddress: (0, _reselectTree.createLeaf)([_selectors4.default.current.creationDepth], identity), identifiers: { _: (0, _reselectTree.createLeaf)(["/views/scopes/inlined", "/current/scope"], (scopes, scope) => {
        cov_27jr84kqem.f[36]++;let cur = (cov_27jr84kqem.s[82]++, scope.id);let variables = (cov_27jr84kqem.s[83]++, {});cov_27jr84kqem.s[84]++;do {
          cov_27jr84kqem.s[85]++;variables = (0, _assign2.default)(variables, ...((cov_27jr84kqem.b[11][0]++, scopes[cur].variables) || (cov_27jr84kqem.b[11][1]++, [])).filter(v => {
            cov_27jr84kqem.f[37]++;cov_27jr84kqem.s[86]++;return v.name !== "";
          }).filter(v => {
            cov_27jr84kqem.f[38]++;cov_27jr84kqem.s[87]++;return variables[v.name] == undefined;
          }).map(v => {
            cov_27jr84kqem.f[39]++;cov_27jr84kqem.s[88]++;return { [v.name]: v.id };
          }));cov_27jr84kqem.s[89]++;cur = scopes[cur].parentId;
        } while (cur != null);cov_27jr84kqem.s[90]++;return variables;
      }), definitions: (0, _reselectTree.createLeaf)(["/views/scopes/inlined", "./_"], (scopes, identifiers) => {
        cov_27jr84kqem.f[40]++;cov_27jr84kqem.s[91]++;return (0, _assign2.default)({}, ...(0, _entries2.default)(identifiers).map(([identifier, id]) => {
          cov_27jr84kqem.f[41]++;let { definition } = (cov_27jr84kqem.s[92]++, scopes[id]);cov_27jr84kqem.s[93]++;return { [identifier]: definition };
        }));
      }), refs: (0, _reselectTree.createLeaf)(["/proc/assignments", "./_", _selectors6.default.current.functionDepth, "/current/address", "/current/dummyAddress"], (assignments, identifiers, currentDepth, address, dummyAddress) => {
        cov_27jr84kqem.f[42]++;cov_27jr84kqem.s[94]++;return (0, _assign2.default)({}, ...(0, _entries2.default)(identifiers).map(([identifier, astId]) => {
          cov_27jr84kqem.f[43]++;let id;cov_27jr84kqem.s[95]++;if (address !== undefined) {
            cov_27jr84kqem.b[12][0]++;let matchIds = (cov_27jr84kqem.s[96]++, ((cov_27jr84kqem.b[13][0]++, assignments.byAstId[astId]) || (cov_27jr84kqem.b[13][1]++, [])).filter(idHash => {
              cov_27jr84kqem.f[44]++;cov_27jr84kqem.s[97]++;return assignments.byId[idHash].address === address;
            }));cov_27jr84kqem.s[98]++;if (matchIds.length > 0) {
              cov_27jr84kqem.b[14][0]++;cov_27jr84kqem.s[99]++;id = matchIds[0];
            } else {
              cov_27jr84kqem.b[14][1]++;
            }
          } else {
            cov_27jr84kqem.b[12][1]++;let matchIds = (cov_27jr84kqem.s[100]++, ((cov_27jr84kqem.b[15][0]++, assignments.byAstId[astId]) || (cov_27jr84kqem.b[15][1]++, [])).filter(idHash => {
              cov_27jr84kqem.f[45]++;cov_27jr84kqem.s[101]++;return assignments.byId[idHash].dummyAddress === dummyAddress;
            }));cov_27jr84kqem.s[102]++;if (matchIds.length > 0) {
              cov_27jr84kqem.b[16][0]++;cov_27jr84kqem.s[103]++;id = matchIds[0];
            } else {
              cov_27jr84kqem.b[16][1]++;
            }
          }cov_27jr84kqem.s[104]++;if (id === undefined) {
            cov_27jr84kqem.b[17][0]++;let matchFrames = (cov_27jr84kqem.s[105]++, ((cov_27jr84kqem.b[18][0]++, assignments.byAstId[astId]) || (cov_27jr84kqem.b[18][1]++, [])).map(id => {
              cov_27jr84kqem.f[46]++;cov_27jr84kqem.s[106]++;return assignments.byId[id].stackframe;
            }).filter(stackframe => {
              cov_27jr84kqem.f[47]++;cov_27jr84kqem.s[107]++;return stackframe !== undefined;
            }));cov_27jr84kqem.s[108]++;if (matchFrames.length > 0) {
              cov_27jr84kqem.b[19][0]++;let maxMatch = (cov_27jr84kqem.s[109]++, Math.min(currentDepth, Math.max(...matchFrames)));cov_27jr84kqem.s[110]++;id = (0, _helpers.stableKeccak256)({ astId, stackframe: maxMatch });
            } else {
              cov_27jr84kqem.b[19][1]++;
            }
          } else {
            cov_27jr84kqem.b[17][1]++;
          }let { ref } = (cov_27jr84kqem.s[111]++, (cov_27jr84kqem.b[20][0]++, assignments.byId[id]) || (cov_27jr84kqem.b[20][1]++, {}));cov_27jr84kqem.s[112]++;if (!ref) {
            cov_27jr84kqem.b[21][0]++;cov_27jr84kqem.s[113]++;return undefined;
          } else {
            cov_27jr84kqem.b[21][1]++;
          }cov_27jr84kqem.s[114]++;return { [identifier]: ref };
        }));
      }), decoded: (0, _reselectTree.createLeaf)(["/views/decoder", "./definitions", "./refs"], (() => {
        cov_27jr84kqem.f[48]++;var _ref = (cov_27jr84kqem.s[115]++, (0, _asyncToGenerator3.default)(function* (decode, definitions, refs) {
          cov_27jr84kqem.f[49]++;const keyedPromises = (cov_27jr84kqem.s[116]++, (0, _entries2.default)(refs).map((() => {
            cov_27jr84kqem.f[50]++;var _ref2 = (cov_27jr84kqem.s[117]++, (0, _asyncToGenerator3.default)(function* ([identifier, ref]) {
              cov_27jr84kqem.f[51]++;cov_27jr84kqem.s[118]++;return { [identifier]: yield decode(definitions[identifier], ref) };
            }));cov_27jr84kqem.s[119]++;return function (_x4) {
              cov_27jr84kqem.f[52]++;cov_27jr84kqem.s[120]++;return _ref2.apply(this, arguments);
            };
          })()));const keyedResults = (cov_27jr84kqem.s[121]++, yield _promise2.default.all(keyedPromises));cov_27jr84kqem.s[122]++;return TruffleDecodeUtils.Conversion.cleanContainers((0, _assign2.default)({}, ...keyedResults));
        }));cov_27jr84kqem.s[123]++;return function (_x, _x2, _x3) {
          cov_27jr84kqem.f[53]++;cov_27jr84kqem.s[124]++;return _ref.apply(this, arguments);
        };
      })()), native: (0, _reselectTree.createLeaf)(["./decoded"], (() => {
        cov_27jr84kqem.f[54]++;var _ref3 = (cov_27jr84kqem.s[125]++, (0, _asyncToGenerator3.default)(function* (decoded) {
          cov_27jr84kqem.f[55]++;cov_27jr84kqem.s[126]++;return TruffleDecodeUtils.Conversion.cleanBNs((yield decoded));
        }));cov_27jr84kqem.s[127]++;return function (_x5) {
          cov_27jr84kqem.f[56]++;cov_27jr84kqem.s[128]++;return _ref3.apply(this, arguments);
        };
      })()) } }, next: { state: createStateSelectors(_selectors4.default.next.state) } }));cov_27jr84kqem.s[129]++;exports.default = data;

/***/ }),
/* 23 */
/***/ (function(module, exports) {

module.exports = require("json-pointer");

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_187vde7sdm = function () {
  var path = "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/data/sagas/index.js",
      hash = "88e64fe998784dbe286889dea5e867672542a549",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/data/sagas/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 16 }, end: { line: 7, column: 56 } }, "2": { start: { line: 9, column: 16 }, end: { line: 9, column: 49 } }, "3": { start: { line: 11, column: 14 }, end: { line: 11, column: 60 } }, "4": { start: { line: 13, column: 15 }, end: { line: 13, column: 46 } }, "5": { start: { line: 15, column: 0 }, end: { line: 15, column: 22 } }, "6": { start: { line: 16, column: 0 }, end: { line: 16, column: 26 } }, "7": { start: { line: 17, column: 0 }, end: { line: 17, column: 32 } }, "8": { start: { line: 18, column: 0 }, end: { line: 18, column: 22 } }, "9": { start: { line: 19, column: 0 }, end: { line: 19, column: 44 } }, "10": { start: { line: 20, column: 0 }, end: { line: 20, column: 46 } }, "11": { start: { line: 21, column: 0 }, end: { line: 21, column: 20 } }, "12": { start: { line: 23, column: 13 }, end: { line: 23, column: 29 } }, "13": { start: { line: 25, column: 14 }, end: { line: 25, column: 44 } }, "14": { start: { line: 27, column: 15 }, end: { line: 27, column: 44 } }, "15": { start: { line: 29, column: 19 }, end: { line: 29, column: 42 } }, "16": { start: { line: 31, column: 20 }, end: { line: 31, column: 56 } }, "17": { start: { line: 33, column: 15 }, end: { line: 33, column: 37 } }, "18": { start: { line: 35, column: 15 }, end: { line: 35, column: 43 } }, "19": { start: { line: 37, column: 16 }, end: { line: 37, column: 37 } }, "20": { start: { line: 39, column: 14 }, end: { line: 39, column: 48 } }, "21": { start: { line: 41, column: 17 }, end: { line: 41, column: 40 } }, "22": { start: { line: 43, column: 18 }, end: { line: 43, column: 52 } }, "23": { start: { line: 45, column: 26 }, end: { line: 45, column: 57 } }, "24": { start: { line: 47, column: 25 }, end: { line: 47, column: 69 } }, "25": { start: { line: 49, column: 22 }, end: { line: 49, column: 48 } }, "26": { start: { line: 51, column: 40 }, end: { line: 51, column: 267 } }, "27": { start: { line: 51, column: 69 }, end: { line: 51, column: 80 } }, "28": { start: { line: 51, column: 103 }, end: { line: 51, column: 105 } }, "29": { start: { line: 51, column: 107 }, end: { line: 51, column: 228 } }, "30": { start: { line: 51, column: 126 }, end: { line: 51, column: 226 } }, "31": { start: { line: 51, column: 149 }, end: { line: 51, column: 224 } }, "32": { start: { line: 51, column: 201 }, end: { line: 51, column: 224 } }, "33": { start: { line: 51, column: 229 }, end: { line: 51, column: 250 } }, "34": { start: { line: 51, column: 251 }, end: { line: 51, column: 265 } }, "35": { start: { line: 53, column: 39 }, end: { line: 53, column: 93 } }, "36": { start: { line: 55, column: 14 }, end: { line: 55, column: 57 } }, "37": { start: { line: 58, column: 2 }, end: { line: 58, column: 85 } }, "38": { start: { line: 62, column: 2 }, end: { line: 62, column: 56 } }, "39": { start: { line: 66, column: 2 }, end: { line: 66, column: 59 } }, "40": { start: { line: 70, column: 44 }, end: { line: 70, column: 101 } }, "41": { start: { line: 72, column: 15 }, end: { line: 72, column: 76 } }, "42": { start: { line: 73, column: 20 }, end: { line: 73, column: 92 } }, "43": { start: { line: 74, column: 27 }, end: { line: 74, column: 91 } }, "44": { start: { line: 75, column: 21 }, end: { line: 75, column: 90 } }, "45": { start: { line: 76, column: 16 }, end: { line: 76, column: 79 } }, "46": { start: { line: 77, column: 21 }, end: { line: 77, column: 89 } }, "47": { start: { line: 79, column: 14 }, end: { line: 79, column: 78 } }, "48": { start: { line: 80, column: 2 }, end: { line: 82, column: 3 } }, "49": { start: { line: 81, column: 4 }, end: { line: 81, column: 11 } }, "50": { start: { line: 84, column: 12 }, end: { line: 84, column: 28 } }, "51": { start: { line: 87, column: 2 }, end: { line: 89, column: 3 } }, "52": { start: { line: 88, column: 4 }, end: { line: 88, column: 11 } }, "53": { start: { line: 98, column: 2 }, end: { line: 100, column: 3 } }, "54": { start: { line: 99, column: 4 }, end: { line: 99, column: 11 } }, "55": { start: { line: 102, column: 2 }, end: { line: 225, column: 3 } }, "56": { start: { line: 104, column: 6 }, end: { line: 104, column: 101 } }, "57": { start: { line: 104, column: 60 }, end: { line: 104, column: 99 } }, "58": { start: { line: 106, column: 6 }, end: { line: 106, column: 119 } }, "59": { start: { line: 106, column: 72 }, end: { line: 106, column: 117 } }, "60": { start: { line: 108, column: 6 }, end: { line: 112, column: 8 } }, "61": { start: { line: 109, column: 104 }, end: { line: 109, column: 147 } }, "62": { start: { line: 111, column: 24 }, end: { line: 111, column: 99 } }, "63": { start: { line: 111, column: 120 }, end: { line: 111, column: 151 } }, "64": { start: { line: 113, column: 6 }, end: { line: 113, column: 40 } }, "65": { start: { line: 114, column: 6 }, end: { line: 114, column: 43 } }, "66": { start: { line: 116, column: 6 }, end: { line: 116, column: 67 } }, "67": { start: { line: 117, column: 6 }, end: { line: 117, column: 12 } }, "68": { start: { line: 120, column: 23 }, end: { line: 120, column: 43 } }, "69": { start: { line: 122, column: 6 }, end: { line: 122, column: 40 } }, "70": { start: { line: 123, column: 6 }, end: { line: 123, column: 43 } }, "71": { start: { line: 124, column: 6 }, end: { line: 124, column: 41 } }, "72": { start: { line: 125, column: 6 }, end: { line: 125, column: 33 } }, "73": { start: { line: 126, column: 6 }, end: { line: 141, column: 7 } }, "74": { start: { line: 127, column: 8 }, end: { line: 127, column: 24 } }, "75": { start: { line: 129, column: 8 }, end: { line: 133, column: 9 } }, "76": { start: { line: 130, column: 10 }, end: { line: 130, column: 41 } }, "77": { start: { line: 132, column: 10 }, end: { line: 132, column: 46 } }, "78": { start: { line: 134, column: 21 }, end: { line: 134, column: 57 } }, "79": { start: { line: 136, column: 8 }, end: { line: 139, column: 11 } }, "80": { start: { line: 140, column: 8 }, end: { line: 140, column: 46 } }, "81": { start: { line: 142, column: 6 }, end: { line: 142, column: 43 } }, "82": { start: { line: 144, column: 6 }, end: { line: 144, column: 67 } }, "83": { start: { line: 145, column: 6 }, end: { line: 145, column: 12 } }, "84": { start: { line: 148, column: 18 }, end: { line: 148, column: 61 } }, "85": { start: { line: 149, column: 6 }, end: { line: 149, column: 41 } }, "86": { start: { line: 150, column: 6 }, end: { line: 150, column: 61 } }, "87": { start: { line: 160, column: 6 }, end: { line: 162, column: 7 } }, "88": { start: { line: 160, column: 106 }, end: { line: 160, column: 213 } }, "89": { start: { line: 161, column: 8 }, end: { line: 161, column: 14 } }, "90": { start: { line: 165, column: 6 }, end: { line: 165, column: 94 } }, "91": { start: { line: 166, column: 6 }, end: { line: 166, column: 62 } }, "92": { start: { line: 167, column: 6 }, end: { line: 167, column: 67 } }, "93": { start: { line: 168, column: 6 }, end: { line: 168, column: 12 } }, "94": { start: { line: 172, column: 6 }, end: { line: 172, column: 60 } }, "95": { start: { line: 177, column: 10 }, end: { line: 177, column: 14 } }, "96": { start: { line: 180, column: 23 }, end: { line: 180, column: 67 } }, "97": { start: { line: 181, column: 24 }, end: { line: 181, column: 65 } }, "98": { start: { line: 183, column: 6 }, end: { line: 183, column: 33 } }, "99": { start: { line: 185, column: 30 }, end: { line: 185, column: 78 } }, "100": { start: { line: 186, column: 6 }, end: { line: 186, column: 51 } }, "101": { start: { line: 191, column: 6 }, end: { line: 197, column: 7 } }, "102": { start: { line: 192, column: 8 }, end: { line: 192, column: 93 } }, "103": { start: { line: 193, column: 13 }, end: { line: 197, column: 7 } }, "104": { start: { line: 194, column: 8 }, end: { line: 196, column: 11 } }, "105": { start: { line: 199, column: 6 }, end: { line: 199, column: 42 } }, "106": { start: { line: 200, column: 6 }, end: { line: 202, column: 7 } }, "107": { start: { line: 201, column: 8 }, end: { line: 201, column: 79 } }, "108": { start: { line: 204, column: 6 }, end: { line: 204, column: 61 } }, "109": { start: { line: 206, column: 6 }, end: { line: 206, column: 12 } }, "110": { start: { line: 209, column: 6 }, end: { line: 209, column: 12 } }, "111": { start: { line: 212, column: 6 }, end: { line: 214, column: 7 } }, "112": { start: { line: 213, column: 8 }, end: { line: 213, column: 14 } }, "113": { start: { line: 216, column: 6 }, end: { line: 216, column: 67 } }, "114": { start: { line: 217, column: 20 }, end: { line: 217, column: 30 } }, "115": { start: { line: 219, column: 6 }, end: { line: 219, column: 28 } }, "116": { start: { line: 220, column: 6 }, end: { line: 220, column: 65 } }, "117": { start: { line: 221, column: 6 }, end: { line: 221, column: 93 } }, "118": { start: { line: 222, column: 6 }, end: { line: 222, column: 62 } }, "119": { start: { line: 223, column: 6 }, end: { line: 223, column: 67 } }, "120": { start: { line: 224, column: 6 }, end: { line: 224, column: 12 } }, "121": { start: { line: 229, column: 2 }, end: { line: 229, column: 43 } }, "122": { start: { line: 233, column: 2 }, end: { line: 233, column: 37 } }, "123": { start: { line: 234, column: 2 }, end: { line: 234, column: 71 } }, "124": { start: { line: 235, column: 2 }, end: { line: 235, column: 26 } }, "125": { start: { line: 239, column: 18 }, end: { line: 239, column: 108 } }, "126": { start: { line: 240, column: 2 }, end: { line: 240, column: 35 } }, "127": { start: { line: 241, column: 30 }, end: { line: 241, column: 105 } }, "128": { start: { line: 242, column: 2 }, end: { line: 242, column: 59 } }, "129": { start: { line: 243, column: 27 }, end: { line: 243, column: 103 } }, "130": { start: { line: 244, column: 2 }, end: { line: 244, column: 53 } }, "131": { start: { line: 245, column: 2 }, end: { line: 245, column: 64 } }, "132": { start: { line: 249, column: 11 }, end: { line: 249, column: 47 } }, "133": { start: { line: 250, column: 2 }, end: { line: 250, column: 56 } }, "134": { start: { line: 254, column: 2 }, end: { line: 260, column: 5 } }, "135": { start: { line: 255, column: 4 }, end: { line: 259, column: 5 } }, "136": { start: { line: 256, column: 6 }, end: { line: 256, column: 24 } }, "137": { start: { line: 258, column: 6 }, end: { line: 258, column: 28 } }, "138": { start: { line: 263, column: 0 }, end: { line: 263, column: 57 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 51, column: 9 }, end: { line: 51, column: 32 } }, loc: { start: { line: 51, column: 38 }, end: { line: 51, column: 269 } }, line: 51 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 53, column: 9 }, end: { line: 53, column: 31 } }, loc: { start: { line: 53, column: 37 }, end: { line: 53, column: 95 } }, line: 53 }, "2": { name: "scope", decl: { start: { line: 57, column: 10 }, end: { line: 57, column: 15 } }, loc: { start: { line: 57, column: 53 }, end: { line: 59, column: 1 } }, line: 57 }, "3": { name: "declare", decl: { start: { line: 61, column: 10 }, end: { line: 61, column: 17 } }, loc: { start: { line: 61, column: 24 }, end: { line: 63, column: 1 } }, line: 61 }, "4": { name: "defineType", decl: { start: { line: 65, column: 10 }, end: { line: 65, column: 20 } }, loc: { start: { line: 65, column: 27 }, end: { line: 67, column: 1 } }, line: 65 }, "5": { name: "tickSaga", decl: { start: { line: 69, column: 10 }, end: { line: 69, column: 18 } }, loc: { start: { line: 69, column: 21 }, end: { line: 226, column: 1 } }, line: 69 }, "6": { name: "(anonymous_6)", decl: { start: { line: 104, column: 50 }, end: { line: 104, column: 51 } }, loc: { start: { line: 104, column: 60 }, end: { line: 104, column: 99 } }, line: 104 }, "7": { name: "(anonymous_7)", decl: { start: { line: 106, column: 62 }, end: { line: 106, column: 63 } }, loc: { start: { line: 106, column: 72 }, end: { line: 106, column: 117 } }, line: 106 }, "8": { name: "(anonymous_8)", decl: { start: { line: 109, column: 93 }, end: { line: 109, column: 94 } }, loc: { start: { line: 109, column: 104 }, end: { line: 109, column: 147 } }, line: 109 }, "9": { name: "(anonymous_9)", decl: { start: { line: 111, column: 13 }, end: { line: 111, column: 14 } }, loc: { start: { line: 111, column: 24 }, end: { line: 111, column: 99 } }, line: 111 }, "10": { name: "(anonymous_10)", decl: { start: { line: 111, column: 105 }, end: { line: 111, column: 106 } }, loc: { start: { line: 111, column: 120 }, end: { line: 111, column: 151 } }, line: 111 }, "11": { name: "(anonymous_11)", decl: { start: { line: 160, column: 100 }, end: { line: 160, column: 101 } }, loc: { start: { line: 160, column: 106 }, end: { line: 160, column: 213 } }, line: 160 }, "12": { name: "reset", decl: { start: { line: 228, column: 10 }, end: { line: 228, column: 15 } }, loc: { start: { line: 228, column: 18 }, end: { line: 230, column: 1 } }, line: 228 }, "13": { name: "learnAddressSaga", decl: { start: { line: 232, column: 10 }, end: { line: 232, column: 26 } }, loc: { start: { line: 232, column: 50 }, end: { line: 236, column: 1 } }, line: 232 }, "14": { name: "recordAllocations", decl: { start: { line: 238, column: 10 }, end: { line: 238, column: 27 } }, loc: { start: { line: 238, column: 30 }, end: { line: 246, column: 1 } }, line: 238 }, "15": { name: "makeAssignment", decl: { start: { line: 248, column: 9 }, end: { line: 248, column: 23 } }, loc: { start: { line: 248, column: 36 }, end: { line: 251, column: 1 } }, line: 248 }, "16": { name: "saga", decl: { start: { line: 253, column: 10 }, end: { line: 253, column: 14 } }, loc: { start: { line: 253, column: 17 }, end: { line: 261, column: 1 } }, line: 253 }, "17": { name: "(anonymous_17)", decl: { start: { line: 254, column: 47 }, end: { line: 254, column: 48 } }, loc: { start: { line: 254, column: 60 }, end: { line: 260, column: 3 } }, line: 254 } }, branchMap: { "0": { loc: { start: { line: 51, column: 40 }, end: { line: 51, column: 267 } }, type: "if", locations: [{ start: { line: 51, column: 40 }, end: { line: 51, column: 267 } }, { start: { line: 51, column: 40 }, end: { line: 51, column: 267 } }], line: 51 }, "1": { loc: { start: { line: 51, column: 44 }, end: { line: 51, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 51, column: 44 }, end: { line: 51, column: 47 } }, { start: { line: 51, column: 51 }, end: { line: 51, column: 65 } }], line: 51 }, "2": { loc: { start: { line: 51, column: 107 }, end: { line: 51, column: 228 } }, type: "if", locations: [{ start: { line: 51, column: 107 }, end: { line: 51, column: 228 } }, { start: { line: 51, column: 107 }, end: { line: 51, column: 228 } }], line: 51 }, "3": { loc: { start: { line: 51, column: 149 }, end: { line: 51, column: 224 } }, type: "if", locations: [{ start: { line: 51, column: 149 }, end: { line: 51, column: 224 } }, { start: { line: 51, column: 149 }, end: { line: 51, column: 224 } }], line: 51 }, "4": { loc: { start: { line: 53, column: 46 }, end: { line: 53, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 53, column: 70 }, end: { line: 53, column: 73 } }, { start: { line: 53, column: 76 }, end: { line: 53, column: 92 } }], line: 53 }, "5": { loc: { start: { line: 53, column: 46 }, end: { line: 53, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 53, column: 46 }, end: { line: 53, column: 49 } }, { start: { line: 53, column: 53 }, end: { line: 53, column: 67 } }], line: 53 }, "6": { loc: { start: { line: 80, column: 2 }, end: { line: 82, column: 3 } }, type: "if", locations: [{ start: { line: 80, column: 2 }, end: { line: 82, column: 3 } }, { start: { line: 80, column: 2 }, end: { line: 82, column: 3 } }], line: 80 }, "7": { loc: { start: { line: 87, column: 2 }, end: { line: 89, column: 3 } }, type: "if", locations: [{ start: { line: 87, column: 2 }, end: { line: 89, column: 3 } }, { start: { line: 87, column: 2 }, end: { line: 89, column: 3 } }], line: 87 }, "8": { loc: { start: { line: 98, column: 2 }, end: { line: 100, column: 3 } }, type: "if", locations: [{ start: { line: 98, column: 2 }, end: { line: 100, column: 3 } }, { start: { line: 98, column: 2 }, end: { line: 100, column: 3 } }], line: 98 }, "9": { loc: { start: { line: 102, column: 2 }, end: { line: 225, column: 3 } }, type: "switch", locations: [{ start: { line: 103, column: 4 }, end: { line: 117, column: 12 } }, { start: { line: 119, column: 4 }, end: { line: 145, column: 12 } }, { start: { line: 147, column: 4 }, end: { line: 168, column: 12 } }, { start: { line: 170, column: 4 }, end: { line: 206, column: 12 } }, { start: { line: 208, column: 4 }, end: { line: 209, column: 12 } }, { start: { line: 211, column: 4 }, end: { line: 224, column: 12 } }], line: 102 }, "10": { loc: { start: { line: 129, column: 8 }, end: { line: 133, column: 9 } }, type: "if", locations: [{ start: { line: 129, column: 8 }, end: { line: 133, column: 9 } }, { start: { line: 129, column: 8 }, end: { line: 133, column: 9 } }], line: 129 }, "11": { loc: { start: { line: 138, column: 42 }, end: { line: 138, column: 91 } }, type: "binary-expr", locations: [{ start: { line: 138, column: 42 }, end: { line: 138, column: 85 } }, { start: { line: 138, column: 89 }, end: { line: 138, column: 91 } }], line: 138 }, "12": { loc: { start: { line: 138, column: 43 }, end: { line: 138, column: 80 } }, type: "binary-expr", locations: [{ start: { line: 138, column: 43 }, end: { line: 138, column: 74 } }, { start: { line: 138, column: 78 }, end: { line: 138, column: 80 } }], line: 138 }, "13": { loc: { start: { line: 160, column: 6 }, end: { line: 162, column: 7 } }, type: "if", locations: [{ start: { line: 160, column: 6 }, end: { line: 162, column: 7 } }, { start: { line: 160, column: 6 }, end: { line: 162, column: 7 } }], line: 160 }, "14": { loc: { start: { line: 160, column: 10 }, end: { line: 160, column: 214 } }, type: "binary-expr", locations: [{ start: { line: 160, column: 10 }, end: { line: 160, column: 57 } }, { start: { line: 160, column: 61 }, end: { line: 160, column: 214 } }], line: 160 }, "15": { loc: { start: { line: 160, column: 106 }, end: { line: 160, column: 213 } }, type: "binary-expr", locations: [{ start: { line: 160, column: 106 }, end: { line: 160, column: 155 } }, { start: { line: 160, column: 159 }, end: { line: 160, column: 213 } }], line: 160 }, "16": { loc: { start: { line: 185, column: 31 }, end: { line: 185, column: 73 } }, type: "binary-expr", locations: [{ start: { line: 185, column: 31 }, end: { line: 185, column: 67 } }, { start: { line: 185, column: 71 }, end: { line: 185, column: 73 } }], line: 185 }, "17": { loc: { start: { line: 191, column: 6 }, end: { line: 197, column: 7 } }, type: "if", locations: [{ start: { line: 191, column: 6 }, end: { line: 197, column: 7 } }, { start: { line: 191, column: 6 }, end: { line: 197, column: 7 } }], line: 191 }, "18": { loc: { start: { line: 193, column: 13 }, end: { line: 197, column: 7 } }, type: "if", locations: [{ start: { line: 193, column: 13 }, end: { line: 197, column: 7 } }, { start: { line: 193, column: 13 }, end: { line: 197, column: 7 } }], line: 193 }, "19": { loc: { start: { line: 200, column: 6 }, end: { line: 202, column: 7 } }, type: "if", locations: [{ start: { line: 200, column: 6 }, end: { line: 202, column: 7 } }, { start: { line: 200, column: 6 }, end: { line: 202, column: 7 } }], line: 200 }, "20": { loc: { start: { line: 212, column: 6 }, end: { line: 214, column: 7 } }, type: "if", locations: [{ start: { line: 212, column: 6 }, end: { line: 214, column: 7 } }, { start: { line: 212, column: 6 }, end: { line: 214, column: 7 } }], line: 212 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0, "57": 0, "58": 0, "59": 0, "60": 0, "61": 0, "62": 0, "63": 0, "64": 0, "65": 0, "66": 0, "67": 0, "68": 0, "69": 0, "70": 0, "71": 0, "72": 0, "73": 0, "74": 0, "75": 0, "76": 0, "77": 0, "78": 0, "79": 0, "80": 0, "81": 0, "82": 0, "83": 0, "84": 0, "85": 0, "86": 0, "87": 0, "88": 0, "89": 0, "90": 0, "91": 0, "92": 0, "93": 0, "94": 0, "95": 0, "96": 0, "97": 0, "98": 0, "99": 0, "100": 0, "101": 0, "102": 0, "103": 0, "104": 0, "105": 0, "106": 0, "107": 0, "108": 0, "109": 0, "110": 0, "111": 0, "112": 0, "113": 0, "114": 0, "115": 0, "116": 0, "117": 0, "118": 0, "119": 0, "120": 0, "121": 0, "122": 0, "123": 0, "124": 0, "125": 0, "126": 0, "127": 0, "128": 0, "129": 0, "130": 0, "131": 0, "132": 0, "133": 0, "134": 0, "135": 0, "136": 0, "137": 0, "138": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0, 0], "7": [0, 0], "8": [0, 0], "9": [0, 0, 0, 0, 0, 0], "10": [0, 0], "11": [0, 0], "12": [0, 0], "13": [0, 0], "14": [0, 0], "15": [0, 0], "16": [0, 0], "17": [0, 0], "18": [0, 0], "19": [0, 0], "20": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/data/sagas/index.js"], names: ["scope", "declare", "defineType", "reset", "learnAddressSaga", "recordAllocations", "saga", "actions", "TruffleDecodeUtils", "debug", "nodeId", "pointer", "parentId", "sourceId", "node", "tickSaga", "tree", "id", "treeId", "data", "views", "ast", "decode", "decoder", "allocations", "info", "storage", "currentAssignments", "proc", "assignments", "currentDepth", "current", "functionDepth", "address", "dummyAddress", "stack", "next", "state", "top", "length", "parameters", "returnParameters", "assignment", "atLastInstructionForSourceRange", "nodeType", "map", "p", "i", "byId", "concat", "reverse", "jsonpointer", "get", "makeAssignment", "astId", "stackframe", "assign", "allocation", "members", "Number", "idObj", "undefined", "fullId", "ref", "varId", "byAstId", "some", "mapKeyDecoding", "baseExpression", "referencedDeclaration", "baseDeclarationId", "indexExpression", "indexId", "indexIdObj", "fullIndexId", "indexAssignment", "indexValue", "Definition", "typeClass", "literal", "Conversion", "toBytes", "hexValue", "mapKey", "typeDescriptions", "learnAddress", "contracts", "userDefinedTypes", "contractDefinitions", "referenceDeclarations", "storageAllocations", "allocate", "TICK", "e"], mappings: "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", file: "index.js", sourceRoot: "/Users/tyler/projects/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:data:sagas\"); // eslint-disable-line no-unused-vars\n\nimport { put, takeEvery, select, call, putResolve } from \"redux-saga/effects\";\nimport jsonpointer from \"json-pointer\";\n\nimport { prefixName, stableKeccak256 } from \"lib/helpers\";\n\nimport { TICK } from \"lib/trace/actions\";\nimport * as actions from \"../actions\";\n\nimport data from \"../selectors\";\n\nimport * as TruffleDecodeUtils from \"truffle-decode-utils\";\n\nimport { getStorageAllocations } from \"truffle-decoder\";\n\nexport function* scope(nodeId, pointer, parentId, sourceId) {\n  yield putResolve(actions.scope(nodeId, pointer, parentId, sourceId));\n}\n\nexport function* declare(node) {\n  yield putResolve(actions.declare(node));\n}\n\nexport function* defineType(node) {\n  yield putResolve(actions.defineType(node));\n}\n\nfunction* tickSaga() {\n  let { tree, id: treeId, node, pointer } = yield select(data.views.ast);\n\n  let decode = yield select(data.views.decoder);\n  let allocations = yield select(data.info.allocations.storage);\n  let currentAssignments = yield select(data.proc.assignments);\n  let currentDepth = yield select(data.current.functionDepth);\n  let address = yield select(data.current.address); //may be undefined\n  let dummyAddress = yield select(data.current.dummyAddress);\n\n  let stack = yield select(data.next.state.stack);\n  if (!stack) {\n    return;\n  }\n\n  let top = stack.length - 1;\n  var parameters, returnParameters, assignment, assignments;\n\n  if (!node) {\n    return;\n  }\n\n  // stack is only ready for interpretation after the last step of each\n  // source range\n  //\n  // the data module always looks at the result of a particular opcode\n  // (i.e., the following trace step's stack/memory/storage), so this\n  // asserts that the _current_ operation is the final one before\n  // proceeding\n  if (!(yield select(data.views.atLastInstructionForSourceRange))) {\n    return;\n  }\n\n  switch (node.nodeType) {\n    case \"FunctionDefinition\":\n      parameters = node.parameters.parameters.map(\n        (p, i) => `${pointer}/parameters/parameters/${i}`\n      );\n\n      returnParameters = node.returnParameters.parameters.map(\n        (p, i) => `${pointer}/returnParameters/parameters/${i}`\n      );\n\n      assignments = {\n        byId: Object.assign(\n          {},\n          ...returnParameters\n            .concat(parameters)\n            .reverse()\n            .map(pointer => jsonpointer.get(tree, pointer).id)\n            //note: depth may be off by 1 but it doesn't matter\n            .map((id, i) =>\n              makeAssignment(\n                { astId: id, stackframe: currentDepth },\n                { stack: top - i }\n              )\n            )\n            .map(assignment => ({ [assignment.id]: assignment }))\n        )\n      };\n      debug(\"Function definition case\");\n      debug(\"assignments %O\", assignments);\n\n      yield put(actions.assign(treeId, assignments));\n      break;\n\n    case \"ContractDefinition\":\n      let allocation = allocations[node.id];\n\n      debug(\"Contract definition case\");\n      debug(\"allocations %O\", allocations);\n      debug(\"allocation %O\", allocation);\n      assignments = { byId: {} };\n      for (let id in allocation.members) {\n        id = Number(id); //not sure why we're getting them as strings, but...\n        let idObj;\n        if (address !== undefined) {\n          idObj = { astId: id, address };\n        } else {\n          idObj = { astId: id, dummyAddress };\n        }\n        let fullId = stableKeccak256(idObj);\n        //we don't use makeAssignment here as we had to compute the ID anyway\n        assignment = {\n          ...idObj,\n          id: fullId,\n          ref: {\n            ...((currentAssignments.byId[fullId] || {}).ref || {}),\n            ...allocation.members[id].pointer\n          }\n        };\n        assignments.byId[fullId] = assignment;\n      }\n      debug(\"assignments %O\", assignments);\n\n      yield put(actions.assign(treeId, assignments));\n      break;\n\n    case \"VariableDeclaration\":\n      let varId = jsonpointer.get(tree, pointer).id;\n      debug(\"Variable declaration case\");\n      debug(\"currentDepth %d varId %d\", currentDepth, varId);\n\n      //NOTE: We're going to make the assignment conditional here; here's why.\n      //There's a bug where calling the autogenerated accessor for a public\n      //contract variable causes the debugger to see two additional\n      //declarations for that variable... which this code reads as local\n      //variable declarations.  Rather than prevent this at the source, we're\n      //just going to check for it here, by not adding a local variable if said\n      //variable is already a contract variable.\n\n      if (\n        currentAssignments.byAstId[varId] !== undefined &&\n        currentAssignments.byAstId[varId].some(\n          id =>\n            currentAssignments.byId[id].address !== undefined ||\n            currentAssignments.byId[id].dummyAddress !== undefined\n        )\n      ) {\n        break;\n      }\n\n      //otherwise, go ahead and make the assignment\n      assignment = makeAssignment(\n        { astId: varId, stackframe: currentDepth },\n        { stack: top }\n      );\n      assignments = { byId: { [assignment.id]: assignment } };\n      yield put(actions.assign(treeId, assignments));\n      break;\n\n    case \"IndexAccess\":\n      // to track `mapping` types known indexes\n      yield put(actions.mapKeyDecoding(true));\n\n      let {\n        baseExpression: { referencedDeclaration: baseDeclarationId },\n        indexExpression: { id: indexId }\n      } = node;\n\n      //indices need to be identified by stackframe\n      let indexIdObj = { astId: indexId, stackframe: currentDepth };\n      let fullIndexId = stableKeccak256(indexIdObj);\n\n      debug(\"Index access case\");\n\n      const indexAssignment = (currentAssignments.byId[fullIndexId] || {}).ref;\n      debug(\"indexAssignment %O\", indexAssignment);\n      // HACK because string literal AST nodes are not sourcemapped to directly\n      // value appears to be available in `node.indexExpression.hexValue`\n      // [observed with solc v0.4.24]\n      let indexValue;\n      if (indexAssignment) {\n        indexValue = yield call(decode, node.indexExpression, indexAssignment);\n      } else if (\n        TruffleDecodeUtils.Definition.typeClass(node.indexExpression) ==\n        \"stringliteral\"\n      ) {\n        indexValue = yield call(decode, node.indexExpression, {\n          literal: TruffleDecodeUtils.Conversion.toBytes(\n            node.indexExpression.hexValue\n          )\n        });\n      }\n\n      debug(\"index value %O\", indexValue);\n      if (indexValue !== undefined) {\n        yield put(actions.mapKey(baseDeclarationId, indexValue));\n      }\n\n      yield put(actions.mapKeyDecoding(false));\n\n      break;\n\n    case \"Assignment\":\n      break;\n\n    default:\n      if (node.typeDescriptions == undefined) {\n        break;\n      }\n\n      debug(\"decoding expression value %O\", node.typeDescriptions);\n      let literal = stack[top];\n\n      debug(\"default case\");\n      debug(\"currentDepth %d node.id %d\", currentDepth, node.id);\n      assignment = makeAssignment(\n        { astId: node.id, stackframe: currentDepth },\n        { literal }\n      );\n      assignments = { byId: { [assignment.id]: assignment } };\n      yield put(actions.assign(treeId, assignments));\n      break;\n  }\n}\n\nexport function* reset() {\n  yield put(actions.reset());\n}\n\nexport function* learnAddressSaga(dummyAddress, address) {\n  debug(\"about to learn an address\");\n  yield put(actions.learnAddress(dummyAddress, address));\n  debug(\"address learnt\");\n}\n\nexport function* recordAllocations() {\n  let contracts = yield select(data.views.userDefinedTypes.contractDefinitions);\n  debug(\"contracts %O\", contracts);\n  let referenceDeclarations = yield select(data.views.referenceDeclarations);\n  debug(\"referenceDeclarations %O\", referenceDeclarations);\n  let storageAllocations = getStorageAllocations(\n    referenceDeclarations,\n    contracts\n  );\n  debug(\"storageAllocations %O\", storageAllocations);\n  yield put(actions.allocate(storageAllocations));\n}\n\nfunction makeAssignment(idObj, ref) {\n  let id = stableKeccak256(idObj);\n  return { ...idObj, id, ref };\n}\n\nexport function* saga() {\n  yield takeEvery(TICK, function*() {\n    try {\n      yield* tickSaga();\n    } catch (e) {\n      debug(\"ERROR: %O\", e);\n    }\n  });\n}\n\nexport default prefixName(\"data\", saga);\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_187vde7sdm.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _extends2 = (cov_187vde7sdm.s[1]++, __webpack_require__(12));var _extends3 = (cov_187vde7sdm.s[2]++, _interopRequireDefault(_extends2));var _assign = (cov_187vde7sdm.s[3]++, __webpack_require__(9));var _assign2 = (cov_187vde7sdm.s[4]++, _interopRequireDefault(_assign));cov_187vde7sdm.s[5]++;exports.scope = scope;cov_187vde7sdm.s[6]++;exports.declare = declare;cov_187vde7sdm.s[7]++;exports.defineType = defineType;cov_187vde7sdm.s[8]++;exports.reset = reset;cov_187vde7sdm.s[9]++;exports.learnAddressSaga = learnAddressSaga;cov_187vde7sdm.s[10]++;exports.recordAllocations = recordAllocations;cov_187vde7sdm.s[11]++;exports.saga = saga;var _debug = (cov_187vde7sdm.s[12]++, __webpack_require__(0));var _debug2 = (cov_187vde7sdm.s[13]++, _interopRequireDefault(_debug));var _effects = (cov_187vde7sdm.s[14]++, __webpack_require__(15));var _jsonPointer = (cov_187vde7sdm.s[15]++, __webpack_require__(23));var _jsonPointer2 = (cov_187vde7sdm.s[16]++, _interopRequireDefault(_jsonPointer));var _helpers = (cov_187vde7sdm.s[17]++, __webpack_require__(2));var _actions = (cov_187vde7sdm.s[18]++, __webpack_require__(19));var _actions2 = (cov_187vde7sdm.s[19]++, __webpack_require__(32));var actions = (cov_187vde7sdm.s[20]++, _interopRequireWildcard(_actions2));var _selectors = (cov_187vde7sdm.s[21]++, __webpack_require__(22));var _selectors2 = (cov_187vde7sdm.s[22]++, _interopRequireDefault(_selectors));var _truffleDecodeUtils = (cov_187vde7sdm.s[23]++, __webpack_require__(14));var TruffleDecodeUtils = (cov_187vde7sdm.s[24]++, _interopRequireWildcard(_truffleDecodeUtils));var _truffleDecoder = (cov_187vde7sdm.s[25]++, __webpack_require__(31));function _interopRequireWildcard(obj) {
  cov_187vde7sdm.f[0]++;cov_187vde7sdm.s[26]++;if ((cov_187vde7sdm.b[1][0]++, obj) && (cov_187vde7sdm.b[1][1]++, obj.__esModule)) {
    cov_187vde7sdm.b[0][0]++;cov_187vde7sdm.s[27]++;return obj;
  } else {
    cov_187vde7sdm.b[0][1]++;var newObj = (cov_187vde7sdm.s[28]++, {});cov_187vde7sdm.s[29]++;if (obj != null) {
      cov_187vde7sdm.b[2][0]++;cov_187vde7sdm.s[30]++;for (var key in obj) {
        cov_187vde7sdm.s[31]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_187vde7sdm.b[3][0]++;cov_187vde7sdm.s[32]++;newObj[key] = obj[key];
        } else {
          cov_187vde7sdm.b[3][1]++;
        }
      }
    } else {
      cov_187vde7sdm.b[2][1]++;
    }cov_187vde7sdm.s[33]++;newObj.default = obj;cov_187vde7sdm.s[34]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_187vde7sdm.f[1]++;cov_187vde7sdm.s[35]++;return (cov_187vde7sdm.b[5][0]++, obj) && (cov_187vde7sdm.b[5][1]++, obj.__esModule) ? (cov_187vde7sdm.b[4][0]++, obj) : (cov_187vde7sdm.b[4][1]++, { default: obj });
}const debug = (cov_187vde7sdm.s[36]++, (0, _debug2.default)("debugger:data:sagas"));function* scope(nodeId, pointer, parentId, sourceId) {
  cov_187vde7sdm.f[2]++;cov_187vde7sdm.s[37]++;yield (0, _effects.putResolve)(actions.scope(nodeId, pointer, parentId, sourceId));
}function* declare(node) {
  cov_187vde7sdm.f[3]++;cov_187vde7sdm.s[38]++;yield (0, _effects.putResolve)(actions.declare(node));
}function* defineType(node) {
  cov_187vde7sdm.f[4]++;cov_187vde7sdm.s[39]++;yield (0, _effects.putResolve)(actions.defineType(node));
}function* tickSaga() {
  cov_187vde7sdm.f[5]++;let { tree, id: treeId, node, pointer } = (cov_187vde7sdm.s[40]++, yield (0, _effects.select)(_selectors2.default.views.ast));let decode = (cov_187vde7sdm.s[41]++, yield (0, _effects.select)(_selectors2.default.views.decoder));let allocations = (cov_187vde7sdm.s[42]++, yield (0, _effects.select)(_selectors2.default.info.allocations.storage));let currentAssignments = (cov_187vde7sdm.s[43]++, yield (0, _effects.select)(_selectors2.default.proc.assignments));let currentDepth = (cov_187vde7sdm.s[44]++, yield (0, _effects.select)(_selectors2.default.current.functionDepth));let address = (cov_187vde7sdm.s[45]++, yield (0, _effects.select)(_selectors2.default.current.address));let dummyAddress = (cov_187vde7sdm.s[46]++, yield (0, _effects.select)(_selectors2.default.current.dummyAddress));let stack = (cov_187vde7sdm.s[47]++, yield (0, _effects.select)(_selectors2.default.next.state.stack));cov_187vde7sdm.s[48]++;if (!stack) {
    cov_187vde7sdm.b[6][0]++;cov_187vde7sdm.s[49]++;return;
  } else {
    cov_187vde7sdm.b[6][1]++;
  }let top = (cov_187vde7sdm.s[50]++, stack.length - 1);var parameters, returnParameters, assignment, assignments;cov_187vde7sdm.s[51]++;if (!node) {
    cov_187vde7sdm.b[7][0]++;cov_187vde7sdm.s[52]++;return;
  } else {
    cov_187vde7sdm.b[7][1]++;
  }cov_187vde7sdm.s[53]++;if (!(yield (0, _effects.select)(_selectors2.default.views.atLastInstructionForSourceRange))) {
    cov_187vde7sdm.b[8][0]++;cov_187vde7sdm.s[54]++;return;
  } else {
    cov_187vde7sdm.b[8][1]++;
  }cov_187vde7sdm.s[55]++;switch (node.nodeType) {case "FunctionDefinition":
      cov_187vde7sdm.b[9][0]++;cov_187vde7sdm.s[56]++;parameters = node.parameters.parameters.map((p, i) => {
        cov_187vde7sdm.f[6]++;cov_187vde7sdm.s[57]++;return `${pointer}/parameters/parameters/${i}`;
      });cov_187vde7sdm.s[58]++;returnParameters = node.returnParameters.parameters.map((p, i) => {
        cov_187vde7sdm.f[7]++;cov_187vde7sdm.s[59]++;return `${pointer}/returnParameters/parameters/${i}`;
      });cov_187vde7sdm.s[60]++;assignments = { byId: (0, _assign2.default)({}, ...returnParameters.concat(parameters).reverse().map(pointer => {
          cov_187vde7sdm.f[8]++;cov_187vde7sdm.s[61]++;return _jsonPointer2.default.get(tree, pointer).id;
        }).map((id, i) => {
          cov_187vde7sdm.f[9]++;cov_187vde7sdm.s[62]++;return makeAssignment({ astId: id, stackframe: currentDepth }, { stack: top - i });
        }).map(assignment => {
          cov_187vde7sdm.f[10]++;cov_187vde7sdm.s[63]++;return { [assignment.id]: assignment };
        })) };cov_187vde7sdm.s[64]++;debug("Function definition case");cov_187vde7sdm.s[65]++;debug("assignments %O", assignments);cov_187vde7sdm.s[66]++;yield (0, _effects.put)(actions.assign(treeId, assignments));cov_187vde7sdm.s[67]++;break;case "ContractDefinition":
      cov_187vde7sdm.b[9][1]++;let allocation = (cov_187vde7sdm.s[68]++, allocations[node.id]);cov_187vde7sdm.s[69]++;debug("Contract definition case");cov_187vde7sdm.s[70]++;debug("allocations %O", allocations);cov_187vde7sdm.s[71]++;debug("allocation %O", allocation);cov_187vde7sdm.s[72]++;assignments = { byId: {} };cov_187vde7sdm.s[73]++;for (let id in allocation.members) {
        cov_187vde7sdm.s[74]++;id = Number(id);let idObj;cov_187vde7sdm.s[75]++;if (address !== undefined) {
          cov_187vde7sdm.b[10][0]++;cov_187vde7sdm.s[76]++;idObj = { astId: id, address };
        } else {
          cov_187vde7sdm.b[10][1]++;cov_187vde7sdm.s[77]++;idObj = { astId: id, dummyAddress };
        }let fullId = (cov_187vde7sdm.s[78]++, (0, _helpers.stableKeccak256)(idObj));cov_187vde7sdm.s[79]++;assignment = (0, _extends3.default)({}, idObj, { id: fullId, ref: (0, _extends3.default)({}, (cov_187vde7sdm.b[11][0]++, ((cov_187vde7sdm.b[12][0]++, currentAssignments.byId[fullId]) || (cov_187vde7sdm.b[12][1]++, {})).ref) || (cov_187vde7sdm.b[11][1]++, {}), allocation.members[id].pointer) });cov_187vde7sdm.s[80]++;assignments.byId[fullId] = assignment;
      }cov_187vde7sdm.s[81]++;debug("assignments %O", assignments);cov_187vde7sdm.s[82]++;yield (0, _effects.put)(actions.assign(treeId, assignments));cov_187vde7sdm.s[83]++;break;case "VariableDeclaration":
      cov_187vde7sdm.b[9][2]++;let varId = (cov_187vde7sdm.s[84]++, _jsonPointer2.default.get(tree, pointer).id);cov_187vde7sdm.s[85]++;debug("Variable declaration case");cov_187vde7sdm.s[86]++;debug("currentDepth %d varId %d", currentDepth, varId);cov_187vde7sdm.s[87]++;if ((cov_187vde7sdm.b[14][0]++, currentAssignments.byAstId[varId] !== undefined) && (cov_187vde7sdm.b[14][1]++, currentAssignments.byAstId[varId].some(id => {
        cov_187vde7sdm.f[11]++;cov_187vde7sdm.s[88]++;return (cov_187vde7sdm.b[15][0]++, currentAssignments.byId[id].address !== undefined) || (cov_187vde7sdm.b[15][1]++, currentAssignments.byId[id].dummyAddress !== undefined);
      }))) {
        cov_187vde7sdm.b[13][0]++;cov_187vde7sdm.s[89]++;break;
      } else {
        cov_187vde7sdm.b[13][1]++;
      }cov_187vde7sdm.s[90]++;assignment = makeAssignment({ astId: varId, stackframe: currentDepth }, { stack: top });cov_187vde7sdm.s[91]++;assignments = { byId: { [assignment.id]: assignment } };cov_187vde7sdm.s[92]++;yield (0, _effects.put)(actions.assign(treeId, assignments));cov_187vde7sdm.s[93]++;break;case "IndexAccess":
      cov_187vde7sdm.b[9][3]++;cov_187vde7sdm.s[94]++;yield (0, _effects.put)(actions.mapKeyDecoding(true));let { baseExpression: { referencedDeclaration: baseDeclarationId }, indexExpression: { id: indexId } } = (cov_187vde7sdm.s[95]++, node);let indexIdObj = (cov_187vde7sdm.s[96]++, { astId: indexId, stackframe: currentDepth });let fullIndexId = (cov_187vde7sdm.s[97]++, (0, _helpers.stableKeccak256)(indexIdObj));cov_187vde7sdm.s[98]++;debug("Index access case");const indexAssignment = (cov_187vde7sdm.s[99]++, ((cov_187vde7sdm.b[16][0]++, currentAssignments.byId[fullIndexId]) || (cov_187vde7sdm.b[16][1]++, {})).ref);cov_187vde7sdm.s[100]++;debug("indexAssignment %O", indexAssignment);let indexValue;cov_187vde7sdm.s[101]++;if (indexAssignment) {
        cov_187vde7sdm.b[17][0]++;cov_187vde7sdm.s[102]++;indexValue = yield (0, _effects.call)(decode, node.indexExpression, indexAssignment);
      } else {
        cov_187vde7sdm.b[17][1]++;cov_187vde7sdm.s[103]++;if (TruffleDecodeUtils.Definition.typeClass(node.indexExpression) == "stringliteral") {
          cov_187vde7sdm.b[18][0]++;cov_187vde7sdm.s[104]++;indexValue = yield (0, _effects.call)(decode, node.indexExpression, { literal: TruffleDecodeUtils.Conversion.toBytes(node.indexExpression.hexValue) });
        } else {
          cov_187vde7sdm.b[18][1]++;
        }
      }cov_187vde7sdm.s[105]++;debug("index value %O", indexValue);cov_187vde7sdm.s[106]++;if (indexValue !== undefined) {
        cov_187vde7sdm.b[19][0]++;cov_187vde7sdm.s[107]++;yield (0, _effects.put)(actions.mapKey(baseDeclarationId, indexValue));
      } else {
        cov_187vde7sdm.b[19][1]++;
      }cov_187vde7sdm.s[108]++;yield (0, _effects.put)(actions.mapKeyDecoding(false));cov_187vde7sdm.s[109]++;break;case "Assignment":
      cov_187vde7sdm.b[9][4]++;cov_187vde7sdm.s[110]++;break;default:
      cov_187vde7sdm.b[9][5]++;cov_187vde7sdm.s[111]++;if (node.typeDescriptions == undefined) {
        cov_187vde7sdm.b[20][0]++;cov_187vde7sdm.s[112]++;break;
      } else {
        cov_187vde7sdm.b[20][1]++;
      }cov_187vde7sdm.s[113]++;debug("decoding expression value %O", node.typeDescriptions);let literal = (cov_187vde7sdm.s[114]++, stack[top]);cov_187vde7sdm.s[115]++;debug("default case");cov_187vde7sdm.s[116]++;debug("currentDepth %d node.id %d", currentDepth, node.id);cov_187vde7sdm.s[117]++;assignment = makeAssignment({ astId: node.id, stackframe: currentDepth }, { literal });cov_187vde7sdm.s[118]++;assignments = { byId: { [assignment.id]: assignment } };cov_187vde7sdm.s[119]++;yield (0, _effects.put)(actions.assign(treeId, assignments));cov_187vde7sdm.s[120]++;break;}
}function* reset() {
  cov_187vde7sdm.f[12]++;cov_187vde7sdm.s[121]++;yield (0, _effects.put)(actions.reset());
}function* learnAddressSaga(dummyAddress, address) {
  cov_187vde7sdm.f[13]++;cov_187vde7sdm.s[122]++;debug("about to learn an address");cov_187vde7sdm.s[123]++;yield (0, _effects.put)(actions.learnAddress(dummyAddress, address));cov_187vde7sdm.s[124]++;debug("address learnt");
}function* recordAllocations() {
  cov_187vde7sdm.f[14]++;let contracts = (cov_187vde7sdm.s[125]++, yield (0, _effects.select)(_selectors2.default.views.userDefinedTypes.contractDefinitions));cov_187vde7sdm.s[126]++;debug("contracts %O", contracts);let referenceDeclarations = (cov_187vde7sdm.s[127]++, yield (0, _effects.select)(_selectors2.default.views.referenceDeclarations));cov_187vde7sdm.s[128]++;debug("referenceDeclarations %O", referenceDeclarations);let storageAllocations = (cov_187vde7sdm.s[129]++, (0, _truffleDecoder.getStorageAllocations)(referenceDeclarations, contracts));cov_187vde7sdm.s[130]++;debug("storageAllocations %O", storageAllocations);cov_187vde7sdm.s[131]++;yield (0, _effects.put)(actions.allocate(storageAllocations));
}function makeAssignment(idObj, ref) {
  cov_187vde7sdm.f[15]++;let id = (cov_187vde7sdm.s[132]++, (0, _helpers.stableKeccak256)(idObj));cov_187vde7sdm.s[133]++;return (0, _extends3.default)({}, idObj, { id, ref });
}function* saga() {
  cov_187vde7sdm.f[16]++;cov_187vde7sdm.s[134]++;yield (0, _effects.takeEvery)(_actions.TICK, function* () {
    cov_187vde7sdm.f[17]++;cov_187vde7sdm.s[135]++;try {
      cov_187vde7sdm.s[136]++;yield* tickSaga();
    } catch (e) {
      cov_187vde7sdm.s[137]++;debug("ERROR: %O", e);
    }
  });
}cov_187vde7sdm.s[138]++;exports.default = (0, _helpers.prefixName)("data", saga);

/***/ }),
/* 25 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/core-js/set");

/***/ }),
/* 26 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/core-js/object/values");

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_1u2p4v6uxg = function () {
  var path = "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/controller/actions/index.js",
      hash = "7da34f77285743fb58a7e0e3d254cd0f7d8b886d",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/controller/actions/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 6, column: 0 }, end: { line: 6, column: 30 } }, "2": { start: { line: 7, column: 0 }, end: { line: 7, column: 26 } }, "3": { start: { line: 8, column: 0 }, end: { line: 8, column: 28 } }, "4": { start: { line: 9, column: 0 }, end: { line: 9, column: 28 } }, "5": { start: { line: 10, column: 0 }, end: { line: 10, column: 28 } }, "6": { start: { line: 11, column: 0 }, end: { line: 11, column: 26 } }, "7": { start: { line: 12, column: 0 }, end: { line: 12, column: 22 } }, "8": { start: { line: 13, column: 0 }, end: { line: 13, column: 30 } }, "9": { start: { line: 14, column: 0 }, end: { line: 14, column: 58 } }, "10": { start: { line: 15, column: 0 }, end: { line: 15, column: 38 } }, "11": { start: { line: 16, column: 0 }, end: { line: 16, column: 44 } }, "12": { start: { line: 17, column: 0 }, end: { line: 17, column: 52 } }, "13": { start: { line: 18, column: 19 }, end: { line: 18, column: 52 } }, "14": { start: { line: 20, column: 2 }, end: { line: 23, column: 4 } }, "15": { start: { line: 26, column: 16 }, end: { line: 26, column: 43 } }, "16": { start: { line: 28, column: 2 }, end: { line: 28, column: 27 } }, "17": { start: { line: 31, column: 18 }, end: { line: 31, column: 49 } }, "18": { start: { line: 33, column: 2 }, end: { line: 33, column: 29 } }, "19": { start: { line: 36, column: 18 }, end: { line: 36, column: 49 } }, "20": { start: { line: 38, column: 2 }, end: { line: 38, column: 29 } }, "21": { start: { line: 41, column: 18 }, end: { line: 41, column: 49 } }, "22": { start: { line: 43, column: 2 }, end: { line: 43, column: 29 } }, "23": { start: { line: 46, column: 17 }, end: { line: 46, column: 46 } }, "24": { start: { line: 48, column: 2 }, end: { line: 48, column: 28 } }, "25": { start: { line: 51, column: 14 }, end: { line: 51, column: 37 } }, "26": { start: { line: 53, column: 2 }, end: { line: 53, column: 25 } }, "27": { start: { line: 56, column: 18 }, end: { line: 56, column: 49 } }, "28": { start: { line: 58, column: 2 }, end: { line: 58, column: 29 } }, "29": { start: { line: 61, column: 17 }, end: { line: 61, column: 46 } }, "30": { start: { line: 64, column: 2 }, end: { line: 64, column: 28 } }, "31": { start: { line: 67, column: 23 }, end: { line: 67, column: 64 } }, "32": { start: { line: 69, column: 2 }, end: { line: 72, column: 4 } }, "33": { start: { line: 75, column: 26 }, end: { line: 75, column: 73 } }, "34": { start: { line: 77, column: 2 }, end: { line: 80, column: 4 } }, "35": { start: { line: 83, column: 31 }, end: { line: 83, column: 88 } }, "36": { start: { line: 85, column: 2 }, end: { line: 87, column: 4 } } }, fnMap: { "0": { name: "beginStep", decl: { start: { line: 19, column: 9 }, end: { line: 19, column: 18 } }, loc: { start: { line: 19, column: 25 }, end: { line: 24, column: 1 } }, line: 19 }, "1": { name: "advance", decl: { start: { line: 27, column: 9 }, end: { line: 27, column: 16 } }, loc: { start: { line: 27, column: 19 }, end: { line: 29, column: 1 } }, line: 27 }, "2": { name: "stepNext", decl: { start: { line: 32, column: 9 }, end: { line: 32, column: 17 } }, loc: { start: { line: 32, column: 20 }, end: { line: 34, column: 1 } }, line: 32 }, "3": { name: "stepOver", decl: { start: { line: 37, column: 9 }, end: { line: 37, column: 17 } }, loc: { start: { line: 37, column: 20 }, end: { line: 39, column: 1 } }, line: 37 }, "4": { name: "stepInto", decl: { start: { line: 42, column: 9 }, end: { line: 42, column: 17 } }, loc: { start: { line: 42, column: 20 }, end: { line: 44, column: 1 } }, line: 42 }, "5": { name: "stepOut", decl: { start: { line: 47, column: 9 }, end: { line: 47, column: 16 } }, loc: { start: { line: 47, column: 19 }, end: { line: 49, column: 1 } }, line: 47 }, "6": { name: "reset", decl: { start: { line: 52, column: 9 }, end: { line: 52, column: 14 } }, loc: { start: { line: 52, column: 17 }, end: { line: 54, column: 1 } }, line: 52 }, "7": { name: "interrupt", decl: { start: { line: 57, column: 9 }, end: { line: 57, column: 18 } }, loc: { start: { line: 57, column: 21 }, end: { line: 59, column: 1 } }, line: 57 }, "8": { name: "continueUntilBreakpoint", decl: { start: { line: 62, column: 9 }, end: { line: 62, column: 32 } }, loc: { start: { line: 62, column: 35 }, end: { line: 65, column: 1 } }, line: 62 }, "9": { name: "addBreakpoint", decl: { start: { line: 68, column: 9 }, end: { line: 68, column: 22 } }, loc: { start: { line: 68, column: 35 }, end: { line: 73, column: 1 } }, line: 68 }, "10": { name: "removeBreakpoint", decl: { start: { line: 76, column: 9 }, end: { line: 76, column: 25 } }, loc: { start: { line: 76, column: 38 }, end: { line: 81, column: 1 } }, line: 76 }, "11": { name: "removeAllBreakpoints", decl: { start: { line: 84, column: 9 }, end: { line: 84, column: 29 } }, loc: { start: { line: 84, column: 32 }, end: { line: 88, column: 1 } }, line: 84 } }, branchMap: {}, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0 }, b: {}, inputSourceMap: { version: 3, sources: ["lib/controller/actions/index.js"], names: ["beginStep", "advance", "stepNext", "stepOver", "stepInto", "stepOut", "reset", "interrupt", "continueUntilBreakpoint", "addBreakpoint", "removeBreakpoint", "removeAllBreakpoints", "BEGIN_STEP", "type", "stepType", "ADVANCE", "STEP_NEXT", "STEP_OVER", "STEP_INTO", "STEP_OUT", "RESET", "INTERRUPT", "CONTINUE", "ADD_BREAKPOINT", "breakpoint", "REMOVE_BREAKPOINT", "REMOVE_ALL_BREAKPOINTS"], mappings: ";;;;;QACgBA,S,GAAAA,S;QAQAC,O,GAAAA,O;QAKAC,Q,GAAAA,Q;QAKAC,Q,GAAAA,Q;QAKAC,Q,GAAAA,Q;QAKAC,O,GAAAA,O;QAKAC,K,GAAAA,K;QAKAC,S,GAAAA,S;QAKAC,uB,GAAAA,uB;QAMAC,a,GAAAA,a;QAQAC,gB,GAAAA,gB;QAQAC,oB,GAAAA,oB;AAlET,MAAMC,kCAAa,YAAnB;AACA,SAASZ,SAAT,CAAmBa,IAAnB,EAAyB;AAC9B,SAAO;AACLA,UAAMD,UADD;AAELE,cAAUD;AAFL,GAAP;AAID;;AAEM,MAAME,4BAAU,SAAhB;AACA,SAASd,OAAT,GAAmB;AACxB,SAAO,EAAEY,MAAME,OAAR,EAAP;AACD;;AAEM,MAAMC,gCAAY,WAAlB;AACA,SAASd,QAAT,GAAoB;AACzB,SAAO,EAAEW,MAAMG,SAAR,EAAP;AACD;;AAEM,MAAMC,gCAAY,WAAlB;AACA,SAASd,QAAT,GAAoB;AACzB,SAAO,EAAEU,MAAMI,SAAR,EAAP;AACD;;AAEM,MAAMC,gCAAY,WAAlB;AACA,SAASd,QAAT,GAAoB;AACzB,SAAO,EAAES,MAAMK,SAAR,EAAP;AACD;;AAEM,MAAMC,8BAAW,UAAjB;AACA,SAASd,OAAT,GAAmB;AACxB,SAAO,EAAEQ,MAAMM,QAAR,EAAP;AACD;;AAEM,MAAMC,wBAAQ,OAAd;AACA,SAASd,KAAT,GAAiB;AACtB,SAAO,EAAEO,MAAMO,KAAR,EAAP;AACD;;AAEM,MAAMC,gCAAY,WAAlB;AACA,SAASd,SAAT,GAAqB;AAC1B,SAAO,EAAEM,MAAMQ,SAAR,EAAP;AACD;;AAEM,MAAMC,8BAAW,UAAjB;AACA,SAASd,uBAAT,GAAmC;AACxC;AACA,SAAO,EAAEK,MAAMS,QAAR,EAAP;AACD;;AAEM,MAAMC,0CAAiB,gBAAvB;AACA,SAASd,aAAT,CAAuBe,UAAvB,EAAmC;AACxC,SAAO;AACLX,UAAMU,cADD;AAELC;AAFK,GAAP;AAID;;AAEM,MAAMC,gDAAoB,mBAA1B;AACA,SAASf,gBAAT,CAA0Bc,UAA1B,EAAsC;AAC3C,SAAO;AACLX,UAAMY,iBADD;AAELD;AAFK,GAAP;AAID;;AAEM,MAAME,0DAAyB,wBAA/B;AACA,SAASf,oBAAT,GAAgC;AACrC,SAAO;AACLE,UAAMa;AADD,GAAP;AAGD", file: "index.js", sourceRoot: "/Users/tyler/projects/truffle/packages/truffle-debugger", sourcesContent: ["export const BEGIN_STEP = \"BEGIN_STEP\";\nexport function beginStep(type) {\n  return {\n    type: BEGIN_STEP,\n    stepType: type\n  };\n}\n\nexport const ADVANCE = \"ADVANCE\";\nexport function advance() {\n  return { type: ADVANCE };\n}\n\nexport const STEP_NEXT = \"STEP_NEXT\";\nexport function stepNext() {\n  return { type: STEP_NEXT };\n}\n\nexport const STEP_OVER = \"STEP_OVER\";\nexport function stepOver() {\n  return { type: STEP_OVER };\n}\n\nexport const STEP_INTO = \"STEP_INTO\";\nexport function stepInto() {\n  return { type: STEP_INTO };\n}\n\nexport const STEP_OUT = \"STEP_OUT\";\nexport function stepOut() {\n  return { type: STEP_OUT };\n}\n\nexport const RESET = \"RESET\";\nexport function reset() {\n  return { type: RESET };\n}\n\nexport const INTERRUPT = \"INTERRUPT\";\nexport function interrupt() {\n  return { type: INTERRUPT };\n}\n\nexport const CONTINUE = \"CONTINUE\";\nexport function continueUntilBreakpoint() {\n  //\"continue\" is not a legal name\n  return { type: CONTINUE };\n}\n\nexport const ADD_BREAKPOINT = \"ADD_BREAKPOINT\";\nexport function addBreakpoint(breakpoint) {\n  return {\n    type: ADD_BREAKPOINT,\n    breakpoint\n  };\n}\n\nexport const REMOVE_BREAKPOINT = \"REMOVE_BREAKPOINT\";\nexport function removeBreakpoint(breakpoint) {\n  return {\n    type: REMOVE_BREAKPOINT,\n    breakpoint\n  };\n}\n\nexport const REMOVE_ALL_BREAKPOINTS = \"REMOVE_ALL_BREAKPOINTS\";\nexport function removeAllBreakpoints() {\n  return {\n    type: REMOVE_ALL_BREAKPOINTS\n  };\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_1u2p4v6uxg.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });cov_1u2p4v6uxg.s[1]++;exports.beginStep = beginStep;cov_1u2p4v6uxg.s[2]++;exports.advance = advance;cov_1u2p4v6uxg.s[3]++;exports.stepNext = stepNext;cov_1u2p4v6uxg.s[4]++;exports.stepOver = stepOver;cov_1u2p4v6uxg.s[5]++;exports.stepInto = stepInto;cov_1u2p4v6uxg.s[6]++;exports.stepOut = stepOut;cov_1u2p4v6uxg.s[7]++;exports.reset = reset;cov_1u2p4v6uxg.s[8]++;exports.interrupt = interrupt;cov_1u2p4v6uxg.s[9]++;exports.continueUntilBreakpoint = continueUntilBreakpoint;cov_1u2p4v6uxg.s[10]++;exports.addBreakpoint = addBreakpoint;cov_1u2p4v6uxg.s[11]++;exports.removeBreakpoint = removeBreakpoint;cov_1u2p4v6uxg.s[12]++;exports.removeAllBreakpoints = removeAllBreakpoints;const BEGIN_STEP = (cov_1u2p4v6uxg.s[13]++, exports.BEGIN_STEP = "BEGIN_STEP");function beginStep(type) {
  cov_1u2p4v6uxg.f[0]++;cov_1u2p4v6uxg.s[14]++;return { type: BEGIN_STEP, stepType: type };
}const ADVANCE = (cov_1u2p4v6uxg.s[15]++, exports.ADVANCE = "ADVANCE");function advance() {
  cov_1u2p4v6uxg.f[1]++;cov_1u2p4v6uxg.s[16]++;return { type: ADVANCE };
}const STEP_NEXT = (cov_1u2p4v6uxg.s[17]++, exports.STEP_NEXT = "STEP_NEXT");function stepNext() {
  cov_1u2p4v6uxg.f[2]++;cov_1u2p4v6uxg.s[18]++;return { type: STEP_NEXT };
}const STEP_OVER = (cov_1u2p4v6uxg.s[19]++, exports.STEP_OVER = "STEP_OVER");function stepOver() {
  cov_1u2p4v6uxg.f[3]++;cov_1u2p4v6uxg.s[20]++;return { type: STEP_OVER };
}const STEP_INTO = (cov_1u2p4v6uxg.s[21]++, exports.STEP_INTO = "STEP_INTO");function stepInto() {
  cov_1u2p4v6uxg.f[4]++;cov_1u2p4v6uxg.s[22]++;return { type: STEP_INTO };
}const STEP_OUT = (cov_1u2p4v6uxg.s[23]++, exports.STEP_OUT = "STEP_OUT");function stepOut() {
  cov_1u2p4v6uxg.f[5]++;cov_1u2p4v6uxg.s[24]++;return { type: STEP_OUT };
}const RESET = (cov_1u2p4v6uxg.s[25]++, exports.RESET = "RESET");function reset() {
  cov_1u2p4v6uxg.f[6]++;cov_1u2p4v6uxg.s[26]++;return { type: RESET };
}const INTERRUPT = (cov_1u2p4v6uxg.s[27]++, exports.INTERRUPT = "INTERRUPT");function interrupt() {
  cov_1u2p4v6uxg.f[7]++;cov_1u2p4v6uxg.s[28]++;return { type: INTERRUPT };
}const CONTINUE = (cov_1u2p4v6uxg.s[29]++, exports.CONTINUE = "CONTINUE");function continueUntilBreakpoint() {
  cov_1u2p4v6uxg.f[8]++;cov_1u2p4v6uxg.s[30]++;return { type: CONTINUE };
}const ADD_BREAKPOINT = (cov_1u2p4v6uxg.s[31]++, exports.ADD_BREAKPOINT = "ADD_BREAKPOINT");function addBreakpoint(breakpoint) {
  cov_1u2p4v6uxg.f[9]++;cov_1u2p4v6uxg.s[32]++;return { type: ADD_BREAKPOINT, breakpoint };
}const REMOVE_BREAKPOINT = (cov_1u2p4v6uxg.s[33]++, exports.REMOVE_BREAKPOINT = "REMOVE_BREAKPOINT");function removeBreakpoint(breakpoint) {
  cov_1u2p4v6uxg.f[10]++;cov_1u2p4v6uxg.s[34]++;return { type: REMOVE_BREAKPOINT, breakpoint };
}const REMOVE_ALL_BREAKPOINTS = (cov_1u2p4v6uxg.s[35]++, exports.REMOVE_ALL_BREAKPOINTS = "REMOVE_ALL_BREAKPOINTS");function removeAllBreakpoints() {
  cov_1u2p4v6uxg.f[11]++;cov_1u2p4v6uxg.s[36]++;return { type: REMOVE_ALL_BREAKPOINTS };
}

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_108kghqt8e = function () {
  var path = "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/ast/map.js",
      hash = "6e417c73b21deb1514af7472bc6f17e45d663139",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/ast/map.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 12 }, end: { line: 7, column: 56 } }, "2": { start: { line: 9, column: 13 }, end: { line: 9, column: 42 } }, "3": { start: { line: 11, column: 0 }, end: { line: 11, column: 28 } }, "4": { start: { line: 12, column: 0 }, end: { line: 12, column: 32 } }, "5": { start: { line: 13, column: 0 }, end: { line: 13, column: 30 } }, "6": { start: { line: 15, column: 13 }, end: { line: 15, column: 29 } }, "7": { start: { line: 17, column: 14 }, end: { line: 17, column: 44 } }, "8": { start: { line: 19, column: 24 }, end: { line: 19, column: 53 } }, "9": { start: { line: 21, column: 25 }, end: { line: 21, column: 66 } }, "10": { start: { line: 23, column: 39 }, end: { line: 23, column: 93 } }, "11": { start: { line: 25, column: 14 }, end: { line: 25, column: 54 } }, "12": { start: { line: 33, column: 24 }, end: { line: 33, column: 77 } }, "13": { start: { line: 33, column: 65 }, end: { line: 33, column: 76 } }, "14": { start: { line: 35, column: 2 }, end: { line: 35, column: 33 } }, "15": { start: { line: 42, column: 2 }, end: { line: 54, column: 3 } }, "16": { start: { line: 43, column: 4 }, end: { line: 43, column: 82 } }, "17": { start: { line: 43, column: 45 }, end: { line: 43, column: 79 } }, "18": { start: { line: 44, column: 9 }, end: { line: 54, column: 3 } }, "19": { start: { line: 45, column: 18 }, end: { line: 45, column: 20 } }, "20": { start: { line: 47, column: 4 }, end: { line: 49, column: 5 } }, "21": { start: { line: 48, column: 6 }, end: { line: 48, column: 55 } }, "22": { start: { line: 51, column: 4 }, end: { line: 51, column: 111 } }, "23": { start: { line: 51, column: 66 }, end: { line: 51, column: 108 } }, "24": { start: { line: 53, column: 4 }, end: { line: 53, column: 14 } }, "25": { start: { line: 61, column: 15 }, end: { line: 61, column: 31 } }, "26": { start: { line: 62, column: 13 }, end: { line: 62, column: 45 } }, "27": { start: { line: 64, column: 2 }, end: { line: 68, column: 5 } }, "28": { start: { line: 65, column: 23 }, end: { line: 65, column: 28 } }, "29": { start: { line: 67, column: 4 }, end: { line: 67, column: 48 } }, "30": { start: { line: 70, column: 18 }, end: { line: 70, column: 44 } }, "31": { start: { line: 72, column: 20 }, end: { line: 72, column: 55 } }, "32": { start: { line: 76, column: 2 }, end: { line: 76, column: 173 } }, "33": { start: { line: 76, column: 43 }, end: { line: 76, column: 91 } }, "34": { start: { line: 76, column: 114 }, end: { line: 76, column: 121 } }, "35": { start: { line: 76, column: 140 }, end: { line: 76, column: 167 } } }, fnMap: { "0": { name: "_interopRequireDefault", decl: { start: { line: 23, column: 9 }, end: { line: 23, column: 31 } }, loc: { start: { line: 23, column: 37 }, end: { line: 23, column: 95 } }, line: 23 }, "1": { name: "getRange", decl: { start: { line: 30, column: 9 }, end: { line: 30, column: 17 } }, loc: { start: { line: 30, column: 24 }, end: { line: 36, column: 1 } }, line: 30 }, "2": { name: "(anonymous_2)", decl: { start: { line: 33, column: 60 }, end: { line: 33, column: 61 } }, loc: { start: { line: 33, column: 65 }, end: { line: 33, column: 76 } }, line: 33 }, "3": { name: "rangeNodes", decl: { start: { line: 41, column: 9 }, end: { line: 41, column: 19 } }, loc: { start: { line: 41, column: 40 }, end: { line: 55, column: 1 } }, line: 41 }, "4": { name: "(anonymous_4)", decl: { start: { line: 43, column: 33 }, end: { line: 43, column: 34 } }, loc: { start: { line: 43, column: 45 }, end: { line: 43, column: 79 } }, line: 43 }, "5": { name: "(anonymous_5)", decl: { start: { line: 51, column: 59 }, end: { line: 51, column: 60 } }, loc: { start: { line: 51, column: 66 }, end: { line: 51, column: 108 } }, line: 51 }, "6": { name: "findRange", decl: { start: { line: 60, column: 9 }, end: { line: 60, column: 18 } }, loc: { start: { line: 60, column: 52 }, end: { line: 77, column: 1 } }, line: 60 }, "7": { name: "(anonymous_7)", decl: { start: { line: 64, column: 17 }, end: { line: 64, column: 18 } }, loc: { start: { line: 64, column: 41 }, end: { line: 68, column: 3 } }, line: 64 }, "8": { name: "(anonymous_8)", decl: { start: { line: 76, column: 28 }, end: { line: 76, column: 29 } }, loc: { start: { line: 76, column: 43 }, end: { line: 76, column: 91 } }, line: 76 }, "9": { name: "(anonymous_9)", decl: { start: { line: 76, column: 97 }, end: { line: 76, column: 98 } }, loc: { start: { line: 76, column: 114 }, end: { line: 76, column: 121 } }, line: 76 }, "10": { name: "(anonymous_10)", decl: { start: { line: 76, column: 130 }, end: { line: 76, column: 131 } }, loc: { start: { line: 76, column: 140 }, end: { line: 76, column: 167 } }, line: 76 } }, branchMap: { "0": { loc: { start: { line: 23, column: 46 }, end: { line: 23, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 23, column: 70 }, end: { line: 23, column: 73 } }, { start: { line: 23, column: 76 }, end: { line: 23, column: 92 } }], line: 23 }, "1": { loc: { start: { line: 23, column: 46 }, end: { line: 23, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 23, column: 46 }, end: { line: 23, column: 49 } }, { start: { line: 23, column: 53 }, end: { line: 23, column: 67 } }], line: 23 }, "2": { loc: { start: { line: 41, column: 26 }, end: { line: 41, column: 38 } }, type: "default-arg", locations: [{ start: { line: 41, column: 36 }, end: { line: 41, column: 38 } }], line: 41 }, "3": { loc: { start: { line: 42, column: 2 }, end: { line: 54, column: 3 } }, type: "if", locations: [{ start: { line: 42, column: 2 }, end: { line: 54, column: 3 } }, { start: { line: 42, column: 2 }, end: { line: 54, column: 3 } }], line: 42 }, "4": { loc: { start: { line: 44, column: 9 }, end: { line: 54, column: 3 } }, type: "if", locations: [{ start: { line: 44, column: 9 }, end: { line: 54, column: 3 } }, { start: { line: 44, column: 9 }, end: { line: 54, column: 3 } }], line: 44 }, "5": { loc: { start: { line: 47, column: 4 }, end: { line: 49, column: 5 } }, type: "if", locations: [{ start: { line: 47, column: 4 }, end: { line: 49, column: 5 } }, { start: { line: 47, column: 4 }, end: { line: 49, column: 5 } }], line: 47 }, "6": { loc: { start: { line: 76, column: 43 }, end: { line: 76, column: 91 } }, type: "binary-expr", locations: [{ start: { line: 76, column: 43 }, end: { line: 76, column: 66 } }, { start: { line: 76, column: 70 }, end: { line: 76, column: 91 } }], line: 76 }, "7": { loc: { start: { line: 76, column: 140 }, end: { line: 76, column: 167 } }, type: "cond-expr", locations: [{ start: { line: 76, column: 162 }, end: { line: 76, column: 163 } }, { start: { line: 76, column: 166 }, end: { line: 76, column: 167 } }], line: 76 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0, 0], "7": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/ast/map.js"], names: ["getRange", "rangeNodes", "findRange", "debug", "node", "start", "length", "src", "split", "slice", "map", "i", "parseInt", "pointer", "Array", "concat", "sub", "Object", "results", "push", "range", "key", "sourceStart", "sourceLength", "ranges", "tree", "IntervalTree", "forEach", "end", "insert", "sourceEnd", "overlapping", "search", "filter", "reduce", "a", "b"], mappings: ";;;;;;;;;;QASgBA,Q,GAAAA,Q;QAcAC,U,GAAAA,U;QAyBAC,S,GAAAA,S;;AAhDhB;;;;AAGA;;;;;;AAFA,MAAMC,QAAQ,qBAAY,kBAAZ,CAAd;;AAKA;;;AAGO,SAASH,QAAT,CAAkBI,IAAlB,EAAwB;AAC7B;AACA;AACA,MAAI,CAACC,KAAD,EAAQC,MAAR,IAAkBF,KAAKG,GAAL,CACnBC,KADmB,CACb,GADa,EAEnBC,KAFmB,CAEb,CAFa,EAEV,CAFU,EAGnBC,GAHmB,CAGbC,CAAD,IAAOC,SAASD,CAAT,CAHO,CAAtB;;AAKA,SAAO,CAACN,KAAD,EAAQA,QAAQC,MAAhB,CAAP;AACD;;AAED;;;AAGO,SAASL,UAAT,CAAoBG,IAApB,EAA0BS,UAAU,EAApC,EAAwC;AAC7C,MAAIT,gBAAgBU,KAApB,EAA2B;AACzB,WAAO,GAAGC,MAAH,CACL,GAAGX,KAAKM,GAAL,CAAU,CAACM,GAAD,EAAML,CAAN,KAAYV,WAAWe,GAAX,EAAiB,GAAEH,OAAQ,IAAGF,CAAE,EAAhC,CAAtB,CADE,CAAP;AAGD,GAJD,MAIO,IAAIP,gBAAgBa,MAApB,EAA4B;AACjC,QAAIC,UAAU,EAAd;;AAEA,QAAId,KAAKG,GAAT,EAAc;AACZW,cAAQC,IAAR,CAAa,EAACN,OAAD,EAAUO,OAAOpB,SAASI,IAAT,CAAjB,EAAb;AACD;;AAED,WAAOc,QAAQH,MAAR,CACL,GAAG,oBAAYX,IAAZ,EAAkBM,GAAlB,CACAW,GAAD,IAASpB,WAAWG,KAAKiB,GAAL,CAAX,EAAuB,GAAER,OAAQ,IAAGQ,GAAI,EAAxC,CADR,CADE,CAAP;AAKD,GAZM,MAYA;AACL,WAAO,EAAP;AACD;AACF;;AAED;;;AAGO,SAASnB,SAAT,CAAmBE,IAAnB,EAAyBkB,WAAzB,EAAsCC,YAAtC,EAAoD;AACzD,MAAIC,SAASvB,WAAWG,IAAX,CAAb;AACA,MAAIqB,OAAO,IAAIC,0BAAJ,EAAX;;AAEAF,SAAOG,OAAP,CAAgB,CAAC,EAACP,KAAD,EAAQP,OAAR,EAAD,KAAsB;AACpC,QAAI,CAACR,KAAD,EAAQuB,GAAR,IAAeR,KAAnB;;AAEAK,SAAKI,MAAL,CAAYxB,KAAZ,EAAmBuB,GAAnB,EAAwB,EAACR,KAAD,EAAQP,OAAR,EAAxB;AACD,GAJD;;AAMA,MAAIiB,YAAYR,cAAcC,YAA9B;;AAEA,MAAIQ,cAAcN,KAAKO,MAAL,CAAYV,WAAZ,EAAyBQ,SAAzB,CAAlB;;AAEA;AACA;AACA,SAAOC,YACJE,MADI,CACI,CAAC,EAACb,KAAD,EAAD,KAAaE,eAAeF,MAAM,CAAN,CAAf,IAA2BU,aAAaV,MAAM,CAAN,CADzD,EAEJV,GAFI,CAEC,CAAC,EAACG,OAAD,EAAD,KAAeA,OAFhB,EAGJqB,MAHI,CAGI,CAACC,CAAD,EAAIC,CAAJ,KAAUD,EAAE7B,MAAF,GAAW8B,EAAE9B,MAAb,GAAsB6B,CAAtB,GAA0BC,CAHxC,EAG2C,EAH3C,CAAP;AAID", file: "map.js", sourceRoot: "/Users/tyler/projects/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:ast:map\");\n\nimport IntervalTree from \"node-interval-tree\";\n\n\n/**\n * @private\n */\nexport function getRange(node) {\n  // src: \"<start>:<length>:<_>\"\n  // returns [start, end]\n  let [start, length] = node.src\n    .split(\":\")\n    .slice(0, 2)\n    .map( (i) => parseInt(i) );\n\n  return [start, start + length];\n}\n\n/**\n * @private\n */\nexport function rangeNodes(node, pointer = \"\") {\n  if (node instanceof Array) {\n    return [].concat(\n      ...node.map( (sub, i) => rangeNodes(sub, `${pointer}/${i}`) )\n    );\n  } else if (node instanceof Object) {\n    let results = [];\n\n    if (node.src) {\n      results.push({pointer, range: getRange(node)});\n    }\n\n    return results.concat(\n      ...Object.keys(node).map(\n        (key) => rangeNodes(node[key], `${pointer}/${key}`)\n      )\n    );\n  } else {\n    return [];\n  }\n}\n\n/**\n * @private\n */\nexport function findRange(node, sourceStart, sourceLength) {\n  let ranges = rangeNodes(node);\n  let tree = new IntervalTree();\n\n  ranges.forEach( ({range, pointer}) => {\n    let [start, end] = range;\n\n    tree.insert(start, end, {range, pointer});\n  });\n\n  let sourceEnd = sourceStart + sourceLength;\n\n  let overlapping = tree.search(sourceStart, sourceEnd);\n\n  // find nodes that fully contain requested range,\n  // return longest pointer\n  return overlapping\n    .filter( ({range}) => sourceStart >= range[0] && sourceEnd <= range[1] )\n    .map( ({pointer}) => pointer )\n    .reduce( (a, b) => a.length > b.length ? a : b, \"\" );\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_108kghqt8e.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _keys = (cov_108kghqt8e.s[1]++, __webpack_require__(17));var _keys2 = (cov_108kghqt8e.s[2]++, _interopRequireDefault(_keys));cov_108kghqt8e.s[3]++;exports.getRange = getRange;cov_108kghqt8e.s[4]++;exports.rangeNodes = rangeNodes;cov_108kghqt8e.s[5]++;exports.findRange = findRange;var _debug = (cov_108kghqt8e.s[6]++, __webpack_require__(0));var _debug2 = (cov_108kghqt8e.s[7]++, _interopRequireDefault(_debug));var _nodeIntervalTree = (cov_108kghqt8e.s[8]++, __webpack_require__(64));var _nodeIntervalTree2 = (cov_108kghqt8e.s[9]++, _interopRequireDefault(_nodeIntervalTree));function _interopRequireDefault(obj) {
  cov_108kghqt8e.f[0]++;cov_108kghqt8e.s[10]++;return (cov_108kghqt8e.b[1][0]++, obj) && (cov_108kghqt8e.b[1][1]++, obj.__esModule) ? (cov_108kghqt8e.b[0][0]++, obj) : (cov_108kghqt8e.b[0][1]++, { default: obj });
}const debug = (cov_108kghqt8e.s[11]++, (0, _debug2.default)("debugger:ast:map"));function getRange(node) {
  cov_108kghqt8e.f[1]++;let [start, length] = (cov_108kghqt8e.s[12]++, node.src.split(":").slice(0, 2).map(i => {
    cov_108kghqt8e.f[2]++;cov_108kghqt8e.s[13]++;return parseInt(i);
  }));cov_108kghqt8e.s[14]++;return [start, start + length];
}function rangeNodes(node, pointer = (cov_108kghqt8e.b[2][0]++, "")) {
  cov_108kghqt8e.f[3]++;cov_108kghqt8e.s[15]++;if (node instanceof Array) {
    cov_108kghqt8e.b[3][0]++;cov_108kghqt8e.s[16]++;return [].concat(...node.map((sub, i) => {
      cov_108kghqt8e.f[4]++;cov_108kghqt8e.s[17]++;return rangeNodes(sub, `${pointer}/${i}`);
    }));
  } else {
    cov_108kghqt8e.b[3][1]++;cov_108kghqt8e.s[18]++;if (node instanceof Object) {
      cov_108kghqt8e.b[4][0]++;let results = (cov_108kghqt8e.s[19]++, []);cov_108kghqt8e.s[20]++;if (node.src) {
        cov_108kghqt8e.b[5][0]++;cov_108kghqt8e.s[21]++;results.push({ pointer, range: getRange(node) });
      } else {
        cov_108kghqt8e.b[5][1]++;
      }cov_108kghqt8e.s[22]++;return results.concat(...(0, _keys2.default)(node).map(key => {
        cov_108kghqt8e.f[5]++;cov_108kghqt8e.s[23]++;return rangeNodes(node[key], `${pointer}/${key}`);
      }));
    } else {
      cov_108kghqt8e.b[4][1]++;cov_108kghqt8e.s[24]++;return [];
    }
  }
}function findRange(node, sourceStart, sourceLength) {
  cov_108kghqt8e.f[6]++;let ranges = (cov_108kghqt8e.s[25]++, rangeNodes(node));let tree = (cov_108kghqt8e.s[26]++, new _nodeIntervalTree2.default());cov_108kghqt8e.s[27]++;ranges.forEach(({ range, pointer }) => {
    cov_108kghqt8e.f[7]++;let [start, end] = (cov_108kghqt8e.s[28]++, range);cov_108kghqt8e.s[29]++;tree.insert(start, end, { range, pointer });
  });let sourceEnd = (cov_108kghqt8e.s[30]++, sourceStart + sourceLength);let overlapping = (cov_108kghqt8e.s[31]++, tree.search(sourceStart, sourceEnd));cov_108kghqt8e.s[32]++;return overlapping.filter(({ range }) => {
    cov_108kghqt8e.f[8]++;cov_108kghqt8e.s[33]++;return (cov_108kghqt8e.b[6][0]++, sourceStart >= range[0]) && (cov_108kghqt8e.b[6][1]++, sourceEnd <= range[1]);
  }).map(({ pointer }) => {
    cov_108kghqt8e.f[9]++;cov_108kghqt8e.s[34]++;return pointer;
  }).reduce((a, b) => {
    cov_108kghqt8e.f[10]++;cov_108kghqt8e.s[35]++;return a.length > b.length ? (cov_108kghqt8e.b[7][0]++, a) : (cov_108kghqt8e.b[7][1]++, b);
  }, "");
}

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_284drlq1uy = function () {
  var path = "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/session/selectors/index.js",
      hash = "bf47228304f01f889144c3474c53dd37bb9ee007",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/session/selectors/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 15 }, end: { line: 7, column: 62 } }, "2": { start: { line: 9, column: 16 }, end: { line: 9, column: 48 } }, "3": { start: { line: 11, column: 14 }, end: { line: 11, column: 60 } }, "4": { start: { line: 13, column: 15 }, end: { line: 13, column: 46 } }, "5": { start: { line: 15, column: 13 }, end: { line: 15, column: 29 } }, "6": { start: { line: 17, column: 14 }, end: { line: 17, column: 44 } }, "7": { start: { line: 19, column: 20 }, end: { line: 19, column: 44 } }, "8": { start: { line: 21, column: 17 }, end: { line: 21, column: 45 } }, "9": { start: { line: 23, column: 18 }, end: { line: 23, column: 52 } }, "10": { start: { line: 25, column: 18 }, end: { line: 25, column: 51 } }, "11": { start: { line: 27, column: 18 }, end: { line: 27, column: 53 } }, "12": { start: { line: 29, column: 39 }, end: { line: 29, column: 93 } }, "13": { start: { line: 31, column: 14 }, end: { line: 31, column: 64 } }, "14": { start: { line: 33, column: 16 }, end: { line: 80, column: 2 } }, "15": { start: { line: 42, column: 243 }, end: { line: 57, column: 7 } }, "16": { start: { line: 43, column: 6 }, end: { line: 43, column: 39 } }, "17": { start: { line: 44, column: 6 }, end: { line: 44, column: 37 } }, "18": { start: { line: 45, column: 37 }, end: { line: 45, column: 54 } }, "19": { start: { line: 46, column: 26 }, end: { line: 46, column: 51 } }, "20": { start: { line: 48, column: 23 }, end: { line: 50, column: 63 } }, "21": { start: { line: 52, column: 6 }, end: { line: 56, column: 8 } }, "22": { start: { line: 70, column: 16 }, end: { line: 70, column: 41 } }, "23": { start: { line: 76, column: 22 }, end: { line: 76, column: 43 } }, "24": { start: { line: 82, column: 0 }, end: { line: 82, column: 26 } } }, fnMap: { "0": { name: "_interopRequireDefault", decl: { start: { line: 29, column: 9 }, end: { line: 29, column: 31 } }, loc: { start: { line: 29, column: 37 }, end: { line: 29, column: 95 } }, line: 29 }, "1": { name: "(anonymous_1)", decl: { start: { line: 42, column: 197 }, end: { line: 42, column: 198 } }, loc: { start: { line: 42, column: 243 }, end: { line: 57, column: 7 } }, line: 42 }, "2": { name: "(anonymous_2)", decl: { start: { line: 42, column: 310 }, end: { line: 42, column: 311 } }, loc: { start: { line: 42, column: 338 }, end: { line: 57, column: 5 } }, line: 42 }, "3": { name: "(anonymous_3)", decl: { start: { line: 70, column: 7 }, end: { line: 70, column: 8 } }, loc: { start: { line: 70, column: 16 }, end: { line: 70, column: 41 } }, line: 70 }, "4": { name: "(anonymous_4)", decl: { start: { line: 76, column: 13 }, end: { line: 76, column: 14 } }, loc: { start: { line: 76, column: 22 }, end: { line: 76, column: 43 } }, line: 76 } }, branchMap: { "0": { loc: { start: { line: 29, column: 46 }, end: { line: 29, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 29, column: 70 }, end: { line: 29, column: 73 } }, { start: { line: 29, column: 76 }, end: { line: 29, column: 92 } }], line: 29 }, "1": { loc: { start: { line: 29, column: 46 }, end: { line: 29, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 29, column: 46 }, end: { line: 29, column: 49 } }, { start: { line: 29, column: 53 }, end: { line: 29, column: 67 } }], line: 29 }, "2": { loc: { start: { line: 46, column: 26 }, end: { line: 46, column: 51 } }, type: "binary-expr", locations: [{ start: { line: 46, column: 26 }, end: { line: 46, column: 45 } }, { start: { line: 46, column: 49 }, end: { line: 46, column: 51 } }], line: 46 }, "3": { loc: { start: { line: 48, column: 23 }, end: { line: 50, column: 63 } }, type: "cond-expr", locations: [{ start: { line: 50, column: 6 }, end: { line: 50, column: 58 } }, { start: { line: 50, column: 61 }, end: { line: 50, column: 63 } }], line: 48 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/session/selectors/index.js"], names: ["debug", "session", "info", "affectedInstances", "evm", "instances", "contexts", "solidity", "sources", "sourceMaps", "map", "address", "context", "contractName", "binary", "sourceMap", "source", "match", "transaction", "_", "state", "receipt"], mappings: ";;;;;;;;;;;;;;AAAA;;;;AAGA;;AAEA;;;;AACA;;;;;;AALA,MAAMA,QAAQ,qBAAY,4BAAZ,CAAd;;AAOA,MAAMC,UAAU,sCAAmB;AACjC;;;AAGAC,QAAM;;AAEJ;;;AAGAC,uBAAmB,8BACjB,CAACC,oBAAIF,IAAJ,CAASG,SAAV,EAAqBD,oBAAIF,IAAJ,CAASI,QAA9B,EAAwCC,oBAASL,IAAT,CAAcM,OAAtD,EAA+DD,oBAASL,IAAT,CAAcO,UAA7E,CADiB,EAGjB,CAACJ,SAAD,EAAYC,QAAZ,EAAsBE,OAAtB,EAA+BC,UAA/B,KAA8C,sBAAc,EAAd,EAC5C,GAAG,uBAAeJ,SAAf,EAA0BK,GAA1B,CACD,CAAC,CAACC,OAAD,EAAU,EAACC,OAAD,EAAV,CAAD,KAA0B;AACxBZ,YAAM,cAAN,EAAsBK,SAAtB;AACAL,YAAM,aAAN,EAAqBM,QAArB;AACA,UAAI,EAAEO,YAAF,EAAgBC,MAAhB,KAA2BR,SAASM,OAAT,CAA/B;AACA,UAAI,EAAEG,SAAF,KAAgBN,WAAWG,OAAX,KAAuB,EAA3C;;AAEA,UAAI,EAAEI,MAAF,KAAaD;AACf;AACAP,cAAQO,UAAUE,KAAV,CAAgB,uBAAhB,EAAyC,CAAzC,CAAR,CAFe,GAGf,EAHF;;AAKA,aAAO;AACL,SAACN,OAAD,GAAW;AACTE,sBADS,EACKG,MADL,EACaF;AADb;AADN,OAAP;AAKD,KAjBA,CADyC,CAH7B;;AALf,GAJ2B;;AAsCjC;;;AAGAI,eAAa;;AAEX;;;;AAIAC,OAAIC,KAAD,IAAWA,MAAMnB,OAAN,CAAciB,WANjB;;AAQX;;;;AAIAG,aAAUD,KAAD,IAAWA,MAAMnB,OAAN,CAAcoB;;AAZvB;;AAzCoB,CAAnB,CAAhB;;kBA2DepB,O", file: "index.js", sourceRoot: "/Users/tyler/projects/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:session:selectors\");\n\nimport { createSelectorTree, createLeaf } from \"reselect-tree\";\n\nimport evm from \"lib/evm/selectors\";\nimport solidity from \"lib/solidity/selectors\";\n\nconst session = createSelectorTree({\n  /**\n   * session.info\n   */\n  info: {\n\n    /**\n     * session.info.affectedInstances\n     */\n    affectedInstances: createLeaf(\n      [evm.info.instances, evm.info.contexts, solidity.info.sources, solidity.info.sourceMaps],\n\n      (instances, contexts, sources, sourceMaps) => Object.assign({},\n        ...Object.entries(instances).map(\n          ([address, {context}]) => {\n            debug(\"instances %O\", instances);\n            debug(\"contexts %O\", contexts);\n            let { contractName, binary } = contexts[context];\n            let { sourceMap } = sourceMaps[context] || {};\n\n            let { source } = sourceMap ?\n              // look for source ID between second and third colons (HACK)\n              sources[sourceMap.match(/^[^:]+:[^:]+:([^:]+):/)[1]] :\n              {};\n\n            return {\n              [address]: {\n                contractName, source, binary\n              }\n            };\n          }\n        )\n      )\n    )\n\n  },\n\n\n  /**\n   * session.transaction (namespace)\n   */\n  transaction: {\n\n    /**\n     * session.transaction (selector)\n     * contains the web3 transaction object\n     */\n    _: (state) => state.session.transaction,\n\n    /**\n     * session.transaction.receipt\n     * contains the web3 receipt object\n     */\n    receipt: (state) => state.session.receipt,\n\n  }\n  \n});\n\nexport default session;\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_284drlq1uy.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _entries = (cov_284drlq1uy.s[1]++, __webpack_require__(8));var _entries2 = (cov_284drlq1uy.s[2]++, _interopRequireDefault(_entries));var _assign = (cov_284drlq1uy.s[3]++, __webpack_require__(9));var _assign2 = (cov_284drlq1uy.s[4]++, _interopRequireDefault(_assign));var _debug = (cov_284drlq1uy.s[5]++, __webpack_require__(0));var _debug2 = (cov_284drlq1uy.s[6]++, _interopRequireDefault(_debug));var _reselectTree = (cov_284drlq1uy.s[7]++, __webpack_require__(13));var _selectors = (cov_284drlq1uy.s[8]++, __webpack_require__(10));var _selectors2 = (cov_284drlq1uy.s[9]++, _interopRequireDefault(_selectors));var _selectors3 = (cov_284drlq1uy.s[10]++, __webpack_require__(3));var _selectors4 = (cov_284drlq1uy.s[11]++, _interopRequireDefault(_selectors3));function _interopRequireDefault(obj) {
  cov_284drlq1uy.f[0]++;cov_284drlq1uy.s[12]++;return (cov_284drlq1uy.b[1][0]++, obj) && (cov_284drlq1uy.b[1][1]++, obj.__esModule) ? (cov_284drlq1uy.b[0][0]++, obj) : (cov_284drlq1uy.b[0][1]++, { default: obj });
}const debug = (cov_284drlq1uy.s[13]++, (0, _debug2.default)("debugger:session:selectors"));const session = (cov_284drlq1uy.s[14]++, (0, _reselectTree.createSelectorTree)({ info: { affectedInstances: (0, _reselectTree.createLeaf)([_selectors2.default.info.instances, _selectors2.default.info.contexts, _selectors4.default.info.sources, _selectors4.default.info.sourceMaps], (instances, contexts, sources, sourceMaps) => {
      cov_284drlq1uy.f[1]++;cov_284drlq1uy.s[15]++;return (0, _assign2.default)({}, ...(0, _entries2.default)(instances).map(([address, { context }]) => {
        cov_284drlq1uy.f[2]++;cov_284drlq1uy.s[16]++;debug("instances %O", instances);cov_284drlq1uy.s[17]++;debug("contexts %O", contexts);let { contractName, binary } = (cov_284drlq1uy.s[18]++, contexts[context]);let { sourceMap } = (cov_284drlq1uy.s[19]++, (cov_284drlq1uy.b[2][0]++, sourceMaps[context]) || (cov_284drlq1uy.b[2][1]++, {}));let { source } = (cov_284drlq1uy.s[20]++, sourceMap ? (cov_284drlq1uy.b[3][0]++, sources[sourceMap.match(/^[^:]+:[^:]+:([^:]+):/)[1]]) : (cov_284drlq1uy.b[3][1]++, {}));cov_284drlq1uy.s[21]++;return { [address]: { contractName, source, binary } };
      }));
    }) }, transaction: { _: state => {
      cov_284drlq1uy.f[3]++;cov_284drlq1uy.s[22]++;return state.session.transaction;
    }, receipt: state => {
      cov_284drlq1uy.f[4]++;cov_284drlq1uy.s[23]++;return state.session.receipt;
    } } }));cov_284drlq1uy.s[24]++;exports.default = session;

/***/ }),
/* 30 */
/***/ (function(module, exports) {

module.exports = require("web3");

/***/ }),
/* 31 */
/***/ (function(module, exports) {

module.exports = require("truffle-decoder");

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_ht6zkjba1 = function () {
  var path = "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/data/actions/index.js",
      hash = "2ed1e7087e74cef766d649ac1186fedd50f01ec9",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/data/actions/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 6, column: 0 }, end: { line: 6, column: 22 } }, "2": { start: { line: 7, column: 0 }, end: { line: 7, column: 26 } }, "3": { start: { line: 8, column: 0 }, end: { line: 8, column: 24 } }, "4": { start: { line: 9, column: 0 }, end: { line: 9, column: 24 } }, "5": { start: { line: 10, column: 0 }, end: { line: 10, column: 40 } }, "6": { start: { line: 11, column: 0 }, end: { line: 11, column: 22 } }, "7": { start: { line: 12, column: 0 }, end: { line: 12, column: 36 } }, "8": { start: { line: 13, column: 0 }, end: { line: 13, column: 32 } }, "9": { start: { line: 14, column: 0 }, end: { line: 14, column: 28 } }, "10": { start: { line: 15, column: 14 }, end: { line: 15, column: 37 } }, "11": { start: { line: 17, column: 2 }, end: { line: 23, column: 4 } }, "12": { start: { line: 26, column: 16 }, end: { line: 26, column: 52 } }, "13": { start: { line: 28, column: 2 }, end: { line: 31, column: 4 } }, "14": { start: { line: 34, column: 15 }, end: { line: 34, column: 40 } }, "15": { start: { line: 36, column: 2 }, end: { line: 40, column: 4 } }, "16": { start: { line: 43, column: 16 }, end: { line: 43, column: 43 } }, "17": { start: { line: 45, column: 2 }, end: { line: 49, column: 4 } }, "18": { start: { line: 52, column: 25 }, end: { line: 52, column: 70 } }, "19": { start: { line: 54, column: 2 }, end: { line: 57, column: 4 } }, "20": { start: { line: 60, column: 14 }, end: { line: 60, column: 42 } }, "21": { start: { line: 62, column: 2 }, end: { line: 62, column: 25 } }, "22": { start: { line: 65, column: 22 }, end: { line: 65, column: 61 } }, "23": { start: { line: 67, column: 2 }, end: { line: 71, column: 4 } }, "24": { start: { line: 74, column: 20 }, end: { line: 74, column: 55 } }, "25": { start: { line: 76, column: 2 }, end: { line: 79, column: 4 } }, "26": { start: { line: 82, column: 17 }, end: { line: 82, column: 46 } }, "27": { start: { line: 84, column: 2 }, end: { line: 88, column: 4 } } }, fnMap: { "0": { name: "scope", decl: { start: { line: 16, column: 9 }, end: { line: 16, column: 14 } }, loc: { start: { line: 16, column: 48 }, end: { line: 24, column: 1 } }, line: 16 }, "1": { name: "declare", decl: { start: { line: 27, column: 9 }, end: { line: 27, column: 16 } }, loc: { start: { line: 27, column: 23 }, end: { line: 32, column: 1 } }, line: 27 }, "2": { name: "assign", decl: { start: { line: 35, column: 9 }, end: { line: 35, column: 15 } }, loc: { start: { line: 35, column: 38 }, end: { line: 41, column: 1 } }, line: 35 }, "3": { name: "mapKey", decl: { start: { line: 44, column: 9 }, end: { line: 44, column: 15 } }, loc: { start: { line: 44, column: 25 }, end: { line: 50, column: 1 } }, line: 44 }, "4": { name: "mapKeyDecoding", decl: { start: { line: 53, column: 9 }, end: { line: 53, column: 23 } }, loc: { start: { line: 53, column: 33 }, end: { line: 58, column: 1 } }, line: 53 }, "5": { name: "reset", decl: { start: { line: 61, column: 9 }, end: { line: 61, column: 14 } }, loc: { start: { line: 61, column: 17 }, end: { line: 63, column: 1 } }, line: 61 }, "6": { name: "learnAddress", decl: { start: { line: 66, column: 9 }, end: { line: 66, column: 21 } }, loc: { start: { line: 66, column: 45 }, end: { line: 72, column: 1 } }, line: 66 }, "7": { name: "defineType", decl: { start: { line: 75, column: 9 }, end: { line: 75, column: 19 } }, loc: { start: { line: 75, column: 26 }, end: { line: 80, column: 1 } }, line: 75 }, "8": { name: "allocate", decl: { start: { line: 83, column: 9 }, end: { line: 83, column: 17 } }, loc: { start: { line: 83, column: 27 }, end: { line: 89, column: 1 } }, line: 83 } }, branchMap: {}, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0 }, b: {}, inputSourceMap: { version: 3, sources: ["lib/data/actions/index.js"], names: ["scope", "declare", "assign", "mapKey", "mapKeyDecoding", "reset", "learnAddress", "defineType", "allocate", "SCOPE", "id", "pointer", "parentId", "sourceId", "type", "DECLARE", "node", "ASSIGN", "context", "assignments", "MAP_KEY", "key", "MAP_KEY_DECODING", "started", "RESET", "LEARN_ADDRESS", "dummyAddress", "address", "DEFINE_TYPE", "ALLOCATE", "storage"], mappings: ";;;;;QACgBA,K,GAAAA,K;QAWAC,O,GAAAA,O;QAQAC,M,GAAAA,M;QASAC,M,GAAAA,M;QASAC,c,GAAAA,c;QAQAC,K,GAAAA,K;QAKAC,Y,GAAAA,Y;QASAC,U,GAAAA,U;QAQAC,Q,GAAAA,Q;AApET,MAAMC,wBAAQ,OAAd;AACA,SAAST,KAAT,CAAeU,EAAf,EAAmBC,OAAnB,EAA4BC,QAA5B,EAAsCC,QAAtC,EAAgD;AACrD,SAAO;AACLC,UAAML,KADD;AAELC,MAFK;AAGLC,WAHK;AAILC,YAJK;AAKLC;AALK,GAAP;AAOD;;AAEM,MAAME,4BAAU,kBAAhB;AACA,SAASd,OAAT,CAAiBe,IAAjB,EAAuB;AAC5B,SAAO;AACLF,UAAMC,OADD;AAELC;AAFK,GAAP;AAID;;AAEM,MAAMC,0BAAS,QAAf;AACA,SAASf,MAAT,CAAgBgB,OAAhB,EAAyBC,WAAzB,EAAsC;AAC3C,SAAO;AACLL,UAAMG,MADD;AAELC,WAFK;AAGLC;AAHK,GAAP;AAKD;;AAEM,MAAMC,4BAAU,SAAhB;AACA,SAASjB,MAAT,CAAgBO,EAAhB,EAAoBW,GAApB,EAAyB;AAC9B,SAAO;AACLP,UAAMM,OADD;AAELV,MAFK;AAGLW;AAHK,GAAP;AAKD;;AAEM,MAAMC,8CAAmB,kBAAzB;AACA,SAASlB,cAAT,CAAwBmB,OAAxB,EAAiC;AACtC,SAAO;AACLT,UAAMQ,gBADD;AAELC;AAFK,GAAP;AAID;;AAEM,MAAMC,wBAAQ,YAAd;AACA,SAASnB,KAAT,GAAiB;AACtB,SAAO,EAAES,MAAMU,KAAR,EAAP;AACD;;AAEM,MAAMC,wCAAgB,eAAtB;AACA,SAASnB,YAAT,CAAsBoB,YAAtB,EAAoCC,OAApC,EAA6C;AAClD,SAAO;AACLb,UAAMW,aADD;AAELC,gBAFK;AAGLC;AAHK,GAAP;AAKD;;AAEM,MAAMC,oCAAc,aAApB;AACA,SAASrB,UAAT,CAAoBS,IAApB,EAA0B;AAC/B,SAAO;AACLF,UAAMc,WADD;AAELZ;AAFK,GAAP;AAID;;AAEM,MAAMa,8BAAW,UAAjB;AACA,SAASrB,QAAT,CAAkBsB,OAAlB,EAA2B;AAChC,SAAO;AACLhB,UAAMe,QADD;AAELC;AACA;AAHK,GAAP;AAKD", file: "index.js", sourceRoot: "/Users/tyler/projects/truffle/packages/truffle-debugger", sourcesContent: ["export const SCOPE = \"SCOPE\";\nexport function scope(id, pointer, parentId, sourceId) {\n  return {\n    type: SCOPE,\n    id,\n    pointer,\n    parentId,\n    sourceId\n  };\n}\n\nexport const DECLARE = \"DECLARE_VARIABLE\";\nexport function declare(node) {\n  return {\n    type: DECLARE,\n    node\n  };\n}\n\nexport const ASSIGN = \"ASSIGN\";\nexport function assign(context, assignments) {\n  return {\n    type: ASSIGN,\n    context,\n    assignments\n  };\n}\n\nexport const MAP_KEY = \"MAP_KEY\";\nexport function mapKey(id, key) {\n  return {\n    type: MAP_KEY,\n    id,\n    key\n  };\n}\n\nexport const MAP_KEY_DECODING = \"MAP_KEY_DECODING\";\nexport function mapKeyDecoding(started) {\n  return {\n    type: MAP_KEY_DECODING,\n    started\n  };\n}\n\nexport const RESET = \"DATA_RESET\";\nexport function reset() {\n  return { type: RESET };\n}\n\nexport const LEARN_ADDRESS = \"LEARN_ADDRESS\";\nexport function learnAddress(dummyAddress, address) {\n  return {\n    type: LEARN_ADDRESS,\n    dummyAddress,\n    address\n  };\n}\n\nexport const DEFINE_TYPE = \"DEFINE_TYPE\";\nexport function defineType(node) {\n  return {\n    type: DEFINE_TYPE,\n    node\n  };\n}\n\nexport const ALLOCATE = \"ALLOCATE\";\nexport function allocate(storage) {\n  return {\n    type: ALLOCATE,\n    storage\n    //later there will be more\n  };\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_ht6zkjba1.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });cov_ht6zkjba1.s[1]++;exports.scope = scope;cov_ht6zkjba1.s[2]++;exports.declare = declare;cov_ht6zkjba1.s[3]++;exports.assign = assign;cov_ht6zkjba1.s[4]++;exports.mapKey = mapKey;cov_ht6zkjba1.s[5]++;exports.mapKeyDecoding = mapKeyDecoding;cov_ht6zkjba1.s[6]++;exports.reset = reset;cov_ht6zkjba1.s[7]++;exports.learnAddress = learnAddress;cov_ht6zkjba1.s[8]++;exports.defineType = defineType;cov_ht6zkjba1.s[9]++;exports.allocate = allocate;const SCOPE = (cov_ht6zkjba1.s[10]++, exports.SCOPE = "SCOPE");function scope(id, pointer, parentId, sourceId) {
  cov_ht6zkjba1.f[0]++;cov_ht6zkjba1.s[11]++;return { type: SCOPE, id, pointer, parentId, sourceId };
}const DECLARE = (cov_ht6zkjba1.s[12]++, exports.DECLARE = "DECLARE_VARIABLE");function declare(node) {
  cov_ht6zkjba1.f[1]++;cov_ht6zkjba1.s[13]++;return { type: DECLARE, node };
}const ASSIGN = (cov_ht6zkjba1.s[14]++, exports.ASSIGN = "ASSIGN");function assign(context, assignments) {
  cov_ht6zkjba1.f[2]++;cov_ht6zkjba1.s[15]++;return { type: ASSIGN, context, assignments };
}const MAP_KEY = (cov_ht6zkjba1.s[16]++, exports.MAP_KEY = "MAP_KEY");function mapKey(id, key) {
  cov_ht6zkjba1.f[3]++;cov_ht6zkjba1.s[17]++;return { type: MAP_KEY, id, key };
}const MAP_KEY_DECODING = (cov_ht6zkjba1.s[18]++, exports.MAP_KEY_DECODING = "MAP_KEY_DECODING");function mapKeyDecoding(started) {
  cov_ht6zkjba1.f[4]++;cov_ht6zkjba1.s[19]++;return { type: MAP_KEY_DECODING, started };
}const RESET = (cov_ht6zkjba1.s[20]++, exports.RESET = "DATA_RESET");function reset() {
  cov_ht6zkjba1.f[5]++;cov_ht6zkjba1.s[21]++;return { type: RESET };
}const LEARN_ADDRESS = (cov_ht6zkjba1.s[22]++, exports.LEARN_ADDRESS = "LEARN_ADDRESS");function learnAddress(dummyAddress, address) {
  cov_ht6zkjba1.f[6]++;cov_ht6zkjba1.s[23]++;return { type: LEARN_ADDRESS, dummyAddress, address };
}const DEFINE_TYPE = (cov_ht6zkjba1.s[24]++, exports.DEFINE_TYPE = "DEFINE_TYPE");function defineType(node) {
  cov_ht6zkjba1.f[7]++;cov_ht6zkjba1.s[25]++;return { type: DEFINE_TYPE, node };
}const ALLOCATE = (cov_ht6zkjba1.s[26]++, exports.ALLOCATE = "ALLOCATE");function allocate(storage) {
  cov_ht6zkjba1.f[8]++;cov_ht6zkjba1.s[27]++;return { type: ALLOCATE, storage };
}

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_24l9mdf6qw = function () {
  var path = "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/trace/sagas/index.js",
      hash = "035dee31c14576f10da85f2f4fc46b7e7647c5fa",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/trace/sagas/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 11 }, end: { line: 7, column: 47 } }, "2": { start: { line: 9, column: 12 }, end: { line: 9, column: 40 } }, "3": { start: { line: 11, column: 0 }, end: { line: 11, column: 26 } }, "4": { start: { line: 12, column: 0 }, end: { line: 12, column: 36 } }, "5": { start: { line: 13, column: 0 }, end: { line: 13, column: 22 } }, "6": { start: { line: 14, column: 0 }, end: { line: 14, column: 20 } }, "7": { start: { line: 16, column: 13 }, end: { line: 16, column: 29 } }, "8": { start: { line: 18, column: 14 }, end: { line: 18, column: 44 } }, "9": { start: { line: 20, column: 15 }, end: { line: 20, column: 44 } }, "10": { start: { line: 22, column: 15 }, end: { line: 22, column: 37 } }, "11": { start: { line: 24, column: 15 }, end: { line: 24, column: 36 } }, "12": { start: { line: 26, column: 14 }, end: { line: 26, column: 47 } }, "13": { start: { line: 28, column: 17 }, end: { line: 28, column: 40 } }, "14": { start: { line: 30, column: 18 }, end: { line: 30, column: 52 } }, "15": { start: { line: 32, column: 40 }, end: { line: 32, column: 267 } }, "16": { start: { line: 32, column: 69 }, end: { line: 32, column: 80 } }, "17": { start: { line: 32, column: 103 }, end: { line: 32, column: 105 } }, "18": { start: { line: 32, column: 107 }, end: { line: 32, column: 228 } }, "19": { start: { line: 32, column: 126 }, end: { line: 32, column: 226 } }, "20": { start: { line: 32, column: 149 }, end: { line: 32, column: 224 } }, "21": { start: { line: 32, column: 201 }, end: { line: 32, column: 224 } }, "22": { start: { line: 32, column: 229 }, end: { line: 32, column: 250 } }, "23": { start: { line: 32, column: 251 }, end: { line: 32, column: 265 } }, "24": { start: { line: 34, column: 39 }, end: { line: 34, column: 93 } }, "25": { start: { line: 36, column: 14 }, end: { line: 36, column: 58 } }, "26": { start: { line: 39, column: 18 }, end: { line: 39, column: 62 } }, "27": { start: { line: 41, column: 18 }, end: { line: 41, column: 165 } }, "28": { start: { line: 41, column: 65 }, end: { line: 41, column: 97 } }, "29": { start: { line: 41, column: 118 }, end: { line: 41, column: 162 } }, "30": { start: { line: 43, column: 2 }, end: { line: 43, column: 63 } }, "31": { start: { line: 47, column: 2 }, end: { line: 47, column: 42 } }, "32": { start: { line: 49, column: 2 }, end: { line: 49, column: 24 } }, "33": { start: { line: 50, column: 2 }, end: { line: 50, column: 65 } }, "34": { start: { line: 51, column: 2 }, end: { line: 51, column: 22 } }, "35": { start: { line: 55, column: 18 }, end: { line: 55, column: 80 } }, "36": { start: { line: 56, column: 2 }, end: { line: 56, column: 36 } }, "37": { start: { line: 57, column: 14 }, end: { line: 57, column: 67 } }, "38": { start: { line: 58, column: 2 }, end: { line: 58, column: 41 } }, "39": { start: { line: 60, column: 2 }, end: { line: 67, column: 3 } }, "40": { start: { line: 61, column: 4 }, end: { line: 61, column: 26 } }, "41": { start: { line: 63, column: 4 }, end: { line: 63, column: 44 } }, "42": { start: { line: 64, column: 4 }, end: { line: 64, column: 22 } }, "43": { start: { line: 66, column: 4 }, end: { line: 66, column: 16 } }, "44": { start: { line: 69, column: 2 }, end: { line: 78, column: 3 } }, "45": { start: { line: 70, column: 4 }, end: { line: 70, column: 26 } }, "46": { start: { line: 72, column: 4 }, end: { line: 72, column: 44 } }, "47": { start: { line: 73, column: 4 }, end: { line: 73, column: 22 } }, "48": { start: { line: 75, column: 4 }, end: { line: 75, column: 34 } }, "49": { start: { line: 76, column: 4 }, end: { line: 76, column: 48 } }, "50": { start: { line: 77, column: 4 }, end: { line: 77, column: 30 } }, "51": { start: { line: 82, column: 2 }, end: { line: 82, column: 52 } }, "52": { start: { line: 84, column: 22 }, end: { line: 84, column: 73 } }, "53": { start: { line: 85, column: 2 }, end: { line: 85, column: 30 } }, "54": { start: { line: 87, column: 2 }, end: { line: 87, column: 19 } }, "55": { start: { line: 91, column: 2 }, end: { line: 91, column: 43 } }, "56": { start: { line: 96, column: 2 }, end: { line: 96, column: 24 } }, "57": { start: { line: 98, column: 2 }, end: { line: 98, column: 52 } }, "58": { start: { line: 101, column: 0 }, end: { line: 101, column: 58 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 32, column: 9 }, end: { line: 32, column: 32 } }, loc: { start: { line: 32, column: 38 }, end: { line: 32, column: 269 } }, line: 32 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 34, column: 9 }, end: { line: 34, column: 31 } }, loc: { start: { line: 34, column: 37 }, end: { line: 34, column: 95 } }, line: 34 }, "2": { name: "waitForTrace", decl: { start: { line: 38, column: 10 }, end: { line: 38, column: 22 } }, loc: { start: { line: 38, column: 25 }, end: { line: 44, column: 1 } }, line: 38 }, "3": { name: "(anonymous_3)", decl: { start: { line: 41, column: 53 }, end: { line: 41, column: 54 } }, loc: { start: { line: 41, column: 65 }, end: { line: 41, column: 97 } }, line: 41 }, "4": { name: "(anonymous_4)", decl: { start: { line: 41, column: 103 }, end: { line: 41, column: 104 } }, loc: { start: { line: 41, column: 118 }, end: { line: 41, column: 162 } }, line: 41 }, "5": { name: "advance", decl: { start: { line: 46, column: 10 }, end: { line: 46, column: 17 } }, loc: { start: { line: 46, column: 20 }, end: { line: 52, column: 1 } }, line: 46 }, "6": { name: "next", decl: { start: { line: 54, column: 10 }, end: { line: 54, column: 14 } }, loc: { start: { line: 54, column: 17 }, end: { line: 79, column: 1 } }, line: 54 }, "7": { name: "processTrace", decl: { start: { line: 81, column: 10 }, end: { line: 81, column: 22 } }, loc: { start: { line: 81, column: 30 }, end: { line: 88, column: 1 } }, line: 81 }, "8": { name: "reset", decl: { start: { line: 90, column: 10 }, end: { line: 90, column: 15 } }, loc: { start: { line: 90, column: 18 }, end: { line: 92, column: 1 } }, line: 90 }, "9": { name: "saga", decl: { start: { line: 94, column: 10 }, end: { line: 94, column: 14 } }, loc: { start: { line: 94, column: 17 }, end: { line: 99, column: 1 } }, line: 94 } }, branchMap: { "0": { loc: { start: { line: 32, column: 40 }, end: { line: 32, column: 267 } }, type: "if", locations: [{ start: { line: 32, column: 40 }, end: { line: 32, column: 267 } }, { start: { line: 32, column: 40 }, end: { line: 32, column: 267 } }], line: 32 }, "1": { loc: { start: { line: 32, column: 44 }, end: { line: 32, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 32, column: 44 }, end: { line: 32, column: 47 } }, { start: { line: 32, column: 51 }, end: { line: 32, column: 65 } }], line: 32 }, "2": { loc: { start: { line: 32, column: 107 }, end: { line: 32, column: 228 } }, type: "if", locations: [{ start: { line: 32, column: 107 }, end: { line: 32, column: 228 } }, { start: { line: 32, column: 107 }, end: { line: 32, column: 228 } }], line: 32 }, "3": { loc: { start: { line: 32, column: 149 }, end: { line: 32, column: 224 } }, type: "if", locations: [{ start: { line: 32, column: 149 }, end: { line: 32, column: 224 } }, { start: { line: 32, column: 149 }, end: { line: 32, column: 224 } }], line: 32 }, "4": { loc: { start: { line: 34, column: 46 }, end: { line: 34, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 34, column: 70 }, end: { line: 34, column: 73 } }, { start: { line: 34, column: 76 }, end: { line: 34, column: 92 } }], line: 34 }, "5": { loc: { start: { line: 34, column: 46 }, end: { line: 34, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 34, column: 46 }, end: { line: 34, column: 49 } }, { start: { line: 34, column: 53 }, end: { line: 34, column: 67 } }], line: 34 }, "6": { loc: { start: { line: 60, column: 2 }, end: { line: 67, column: 3 } }, type: "if", locations: [{ start: { line: 60, column: 2 }, end: { line: 67, column: 3 } }, { start: { line: 60, column: 2 }, end: { line: 67, column: 3 } }], line: 60 }, "7": { loc: { start: { line: 69, column: 2 }, end: { line: 78, column: 3 } }, type: "if", locations: [{ start: { line: 69, column: 2 }, end: { line: 78, column: 3 } }, { start: { line: 69, column: 2 }, end: { line: 78, column: 3 } }], line: 69 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0, "57": 0, "58": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0, 0], "7": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/trace/sagas/index.js"], names: ["advance", "processTrace", "reset", "saga", "actions", "debug", "waitForTrace", "steps", "SAVE_STEPS", "addresses", "filter", "op", "map", "stack", "length", "substring", "receiveAddresses", "next", "TOCK", "END_OF_TRACE", "remaining", "trace", "stepsRemaining", "tick", "tock", "endTrace", "saveSteps", "RECEIVE_ADDRESSES", "NEXT"], mappings: ";;;;;;;;;;QAwBiBA,O,GAAAA,O;QAmCAC,Y,GAAAA,Y;QASAC,K,GAAAA,K;QAIAC,I,GAAAA,I;;AAxEjB;;;;AAGA;;AACA;;AAEA;;IAAYC,O;;AAEZ;;;;;;;;AAPA,MAAMC,QAAQ,qBAAY,sBAAZ,CAAd;;AASA,UAAUC,YAAV,GAAyB;AACvB,MAAI,EAAEC,KAAF,KAAY,MAAM,mBAAKH,QAAQI,UAAb,CAAtB;;AAEA,MAAIC,YAAY,CACd,GAAG,kBACDF,MACGG,MADH,CACU,CAAC,EAAEC,EAAF,EAAD,KAAY,6BAAeA,EAAf,CADtB,EAEGC,GAFH,CAEO,CAAC,EAAEC,KAAF,EAAD,KAAe,OAAOA,MAAMA,MAAMC,MAAN,GAAe,CAArB,EAAwBC,SAAxB,CAAkC,EAAlC,CAF7B,CADC,CADW,CAAhB;;AAQA,QAAM,kBAAIX,QAAQY,gBAAR,CAAyBP,SAAzB,CAAJ,CAAN;AACD;;AAEM,UAAUT,OAAV,GAAoB;AACzB,QAAM,kBAAII,QAAQa,IAAR,EAAJ,CAAN;;AAEAZ,QAAM,cAAN;AACA,QAAM,mBAAK,CAACD,QAAQc,IAAT,EAAed,QAAQe,YAAvB,CAAL,CAAN;AACAd,QAAM,YAAN;AACD;;AAED,UAAUY,IAAV,GAAiB;AACf,MAAIG,YAAY,MAAM,qBAAOC,oBAAMC,cAAb,CAAtB;AACAjB,QAAM,eAAN,EAAuBe,SAAvB;AACA,MAAIb,QAAQ,MAAM,qBAAOc,oBAAMd,KAAb,CAAlB;AACAF,QAAM,iBAAN,EAAyBE,MAAMO,MAA/B;;AAEA,MAAIM,YAAY,CAAhB,EAAmB;AACjBf,UAAM,cAAN;AACA;AACA,UAAM,kBAAID,QAAQmB,IAAR,EAAJ,CAAN;AACAlB,UAAM,UAAN;;AAEAe,gBANiB,CAMJ;AACd;;AAED,MAAIA,SAAJ,EAAe;AACbf,UAAM,cAAN;AACA;AACA,UAAM,kBAAID,QAAQoB,IAAR,EAAJ,CAAN;AACAnB,UAAM,UAAN;AACD,GALD,MAKO;AACLA,UAAM,sBAAN;AACA,UAAM,kBAAID,QAAQqB,QAAR,EAAJ,CAAN;AACApB,UAAM,kBAAN;AACD;AACF;;AAEM,UAAUJ,YAAV,CAAuBoB,KAAvB,EAA8B;AACnC,QAAM,kBAAIjB,QAAQsB,SAAR,CAAkBL,KAAlB,CAAJ,CAAN;;AAEA,MAAI,EAAEZ,SAAF,KAAgB,MAAM,mBAAKL,QAAQuB,iBAAb,CAA1B;AACAtB,QAAM,oBAAN;;AAEA,SAAOI,SAAP;AACD;;AAEM,UAAUP,KAAV,GAAkB;AACvB,QAAM,kBAAIE,QAAQF,KAAR,EAAJ,CAAN;AACD;;AAEM,UAAUC,IAAV,GAAiB;AACtB;AACA,SAAOG,cAAP;;AAEA,QAAM,wBAAUF,QAAQwB,IAAlB,EAAwBX,IAAxB,CAAN;AACD;;kBAEc,yBAAW,OAAX,EAAoBd,IAApB,C", file: "index.js", sourceRoot: "/Users/tyler/projects/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:trace:sagas\");\n\nimport { take, takeEvery, put, select } from \"redux-saga/effects\";\nimport { prefixName, isCallMnemonic } from \"lib/helpers\";\n\nimport * as actions from \"../actions\";\n\nimport trace from \"../selectors\";\n\nfunction* waitForTrace() {\n  let { steps } = yield take(actions.SAVE_STEPS);\n\n  let addresses = [\n    ...new Set(\n      steps\n        .filter(({ op }) => isCallMnemonic(op))\n        .map(({ stack }) => \"0x\" + stack[stack.length - 2].substring(24))\n    )\n  ];\n\n  yield put(actions.receiveAddresses(addresses));\n}\n\nexport function* advance() {\n  yield put(actions.next());\n\n  debug(\"TOCK to take\");\n  yield take([actions.TOCK, actions.END_OF_TRACE]);\n  debug(\"TOCK taken\");\n}\n\nfunction* next() {\n  let remaining = yield select(trace.stepsRemaining);\n  debug(\"remaining: %o\", remaining);\n  let steps = yield select(trace.steps);\n  debug(\"total steps: %o\", steps.length);\n\n  if (remaining > 0) {\n    debug(\"putting TICK\");\n    // updates state for current step\n    yield put(actions.tick());\n    debug(\"put TICK\");\n\n    remaining--; // local update, just for convenience\n  }\n\n  if (remaining) {\n    debug(\"putting TOCK\");\n    // updates step to next step in trace\n    yield put(actions.tock());\n    debug(\"put TOCK\");\n  } else {\n    debug(\"putting END_OF_TRACE\");\n    yield put(actions.endTrace());\n    debug(\"put END_OF_TRACE\");\n  }\n}\n\nexport function* processTrace(trace) {\n  yield put(actions.saveSteps(trace));\n\n  let { addresses } = yield take(actions.RECEIVE_ADDRESSES);\n  debug(\"received addresses\");\n\n  return addresses;\n}\n\nexport function* reset() {\n  yield put(actions.reset());\n}\n\nexport function* saga() {\n  // wait for trace to be defined\n  yield* waitForTrace();\n\n  yield takeEvery(actions.NEXT, next);\n}\n\nexport default prefixName(\"trace\", saga);\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_24l9mdf6qw.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _set = (cov_24l9mdf6qw.s[1]++, __webpack_require__(25));var _set2 = (cov_24l9mdf6qw.s[2]++, _interopRequireDefault(_set));cov_24l9mdf6qw.s[3]++;exports.advance = advance;cov_24l9mdf6qw.s[4]++;exports.processTrace = processTrace;cov_24l9mdf6qw.s[5]++;exports.reset = reset;cov_24l9mdf6qw.s[6]++;exports.saga = saga;var _debug = (cov_24l9mdf6qw.s[7]++, __webpack_require__(0));var _debug2 = (cov_24l9mdf6qw.s[8]++, _interopRequireDefault(_debug));var _effects = (cov_24l9mdf6qw.s[9]++, __webpack_require__(15));var _helpers = (cov_24l9mdf6qw.s[10]++, __webpack_require__(2));var _actions = (cov_24l9mdf6qw.s[11]++, __webpack_require__(19));var actions = (cov_24l9mdf6qw.s[12]++, _interopRequireWildcard(_actions));var _selectors = (cov_24l9mdf6qw.s[13]++, __webpack_require__(11));var _selectors2 = (cov_24l9mdf6qw.s[14]++, _interopRequireDefault(_selectors));function _interopRequireWildcard(obj) {
  cov_24l9mdf6qw.f[0]++;cov_24l9mdf6qw.s[15]++;if ((cov_24l9mdf6qw.b[1][0]++, obj) && (cov_24l9mdf6qw.b[1][1]++, obj.__esModule)) {
    cov_24l9mdf6qw.b[0][0]++;cov_24l9mdf6qw.s[16]++;return obj;
  } else {
    cov_24l9mdf6qw.b[0][1]++;var newObj = (cov_24l9mdf6qw.s[17]++, {});cov_24l9mdf6qw.s[18]++;if (obj != null) {
      cov_24l9mdf6qw.b[2][0]++;cov_24l9mdf6qw.s[19]++;for (var key in obj) {
        cov_24l9mdf6qw.s[20]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_24l9mdf6qw.b[3][0]++;cov_24l9mdf6qw.s[21]++;newObj[key] = obj[key];
        } else {
          cov_24l9mdf6qw.b[3][1]++;
        }
      }
    } else {
      cov_24l9mdf6qw.b[2][1]++;
    }cov_24l9mdf6qw.s[22]++;newObj.default = obj;cov_24l9mdf6qw.s[23]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_24l9mdf6qw.f[1]++;cov_24l9mdf6qw.s[24]++;return (cov_24l9mdf6qw.b[5][0]++, obj) && (cov_24l9mdf6qw.b[5][1]++, obj.__esModule) ? (cov_24l9mdf6qw.b[4][0]++, obj) : (cov_24l9mdf6qw.b[4][1]++, { default: obj });
}const debug = (cov_24l9mdf6qw.s[25]++, (0, _debug2.default)("debugger:trace:sagas"));function* waitForTrace() {
  cov_24l9mdf6qw.f[2]++;let { steps } = (cov_24l9mdf6qw.s[26]++, yield (0, _effects.take)(actions.SAVE_STEPS));let addresses = (cov_24l9mdf6qw.s[27]++, [...new _set2.default(steps.filter(({ op }) => {
    cov_24l9mdf6qw.f[3]++;cov_24l9mdf6qw.s[28]++;return (0, _helpers.isCallMnemonic)(op);
  }).map(({ stack }) => {
    cov_24l9mdf6qw.f[4]++;cov_24l9mdf6qw.s[29]++;return "0x" + stack[stack.length - 2].substring(24);
  }))]);cov_24l9mdf6qw.s[30]++;yield (0, _effects.put)(actions.receiveAddresses(addresses));
}function* advance() {
  cov_24l9mdf6qw.f[5]++;cov_24l9mdf6qw.s[31]++;yield (0, _effects.put)(actions.next());cov_24l9mdf6qw.s[32]++;debug("TOCK to take");cov_24l9mdf6qw.s[33]++;yield (0, _effects.take)([actions.TOCK, actions.END_OF_TRACE]);cov_24l9mdf6qw.s[34]++;debug("TOCK taken");
}function* next() {
  cov_24l9mdf6qw.f[6]++;let remaining = (cov_24l9mdf6qw.s[35]++, yield (0, _effects.select)(_selectors2.default.stepsRemaining));cov_24l9mdf6qw.s[36]++;debug("remaining: %o", remaining);let steps = (cov_24l9mdf6qw.s[37]++, yield (0, _effects.select)(_selectors2.default.steps));cov_24l9mdf6qw.s[38]++;debug("total steps: %o", steps.length);cov_24l9mdf6qw.s[39]++;if (remaining > 0) {
    cov_24l9mdf6qw.b[6][0]++;cov_24l9mdf6qw.s[40]++;debug("putting TICK");cov_24l9mdf6qw.s[41]++;yield (0, _effects.put)(actions.tick());cov_24l9mdf6qw.s[42]++;debug("put TICK");cov_24l9mdf6qw.s[43]++;remaining--;
  } else {
    cov_24l9mdf6qw.b[6][1]++;
  }cov_24l9mdf6qw.s[44]++;if (remaining) {
    cov_24l9mdf6qw.b[7][0]++;cov_24l9mdf6qw.s[45]++;debug("putting TOCK");cov_24l9mdf6qw.s[46]++;yield (0, _effects.put)(actions.tock());cov_24l9mdf6qw.s[47]++;debug("put TOCK");
  } else {
    cov_24l9mdf6qw.b[7][1]++;cov_24l9mdf6qw.s[48]++;debug("putting END_OF_TRACE");cov_24l9mdf6qw.s[49]++;yield (0, _effects.put)(actions.endTrace());cov_24l9mdf6qw.s[50]++;debug("put END_OF_TRACE");
  }
}function* processTrace(trace) {
  cov_24l9mdf6qw.f[7]++;cov_24l9mdf6qw.s[51]++;yield (0, _effects.put)(actions.saveSteps(trace));let { addresses } = (cov_24l9mdf6qw.s[52]++, yield (0, _effects.take)(actions.RECEIVE_ADDRESSES));cov_24l9mdf6qw.s[53]++;debug("received addresses");cov_24l9mdf6qw.s[54]++;return addresses;
}function* reset() {
  cov_24l9mdf6qw.f[8]++;cov_24l9mdf6qw.s[55]++;yield (0, _effects.put)(actions.reset());
}function* saga() {
  cov_24l9mdf6qw.f[9]++;cov_24l9mdf6qw.s[56]++;yield* waitForTrace();cov_24l9mdf6qw.s[57]++;yield (0, _effects.takeEvery)(actions.NEXT, next);
}cov_24l9mdf6qw.s[58]++;exports.default = (0, _helpers.prefixName)("trace", saga);

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_deig1u90m = function () {
  var path = "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/evm/sagas/index.js",
      hash = "1837a388cc67c79c52fe881a83bd757caaeafdd8",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/evm/sagas/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 6, column: 0 }, end: { line: 6, column: 32 } }, "2": { start: { line: 7, column: 0 }, end: { line: 7, column: 34 } }, "3": { start: { line: 8, column: 0 }, end: { line: 8, column: 22 } }, "4": { start: { line: 9, column: 0 }, end: { line: 9, column: 38 } }, "5": { start: { line: 10, column: 0 }, end: { line: 10, column: 22 } }, "6": { start: { line: 11, column: 0 }, end: { line: 11, column: 20 } }, "7": { start: { line: 13, column: 13 }, end: { line: 13, column: 29 } }, "8": { start: { line: 15, column: 14 }, end: { line: 15, column: 44 } }, "9": { start: { line: 17, column: 15 }, end: { line: 17, column: 44 } }, "10": { start: { line: 19, column: 15 }, end: { line: 19, column: 37 } }, "11": { start: { line: 21, column: 26 }, end: { line: 21, column: 57 } }, "12": { start: { line: 23, column: 25 }, end: { line: 23, column: 69 } }, "13": { start: { line: 25, column: 15 }, end: { line: 25, column: 43 } }, "14": { start: { line: 27, column: 16 }, end: { line: 27, column: 37 } }, "15": { start: { line: 29, column: 14 }, end: { line: 29, column: 48 } }, "16": { start: { line: 31, column: 17 }, end: { line: 31, column: 40 } }, "17": { start: { line: 33, column: 18 }, end: { line: 33, column: 52 } }, "18": { start: { line: 35, column: 13 }, end: { line: 35, column: 38 } }, "19": { start: { line: 37, column: 11 }, end: { line: 37, column: 42 } }, "20": { start: { line: 39, column: 40 }, end: { line: 39, column: 267 } }, "21": { start: { line: 39, column: 69 }, end: { line: 39, column: 80 } }, "22": { start: { line: 39, column: 103 }, end: { line: 39, column: 105 } }, "23": { start: { line: 39, column: 107 }, end: { line: 39, column: 228 } }, "24": { start: { line: 39, column: 126 }, end: { line: 39, column: 226 } }, "25": { start: { line: 39, column: 149 }, end: { line: 39, column: 224 } }, "26": { start: { line: 39, column: 201 }, end: { line: 39, column: 224 } }, "27": { start: { line: 39, column: 229 }, end: { line: 39, column: 250 } }, "28": { start: { line: 39, column: 251 }, end: { line: 39, column: 265 } }, "29": { start: { line: 41, column: 39 }, end: { line: 41, column: 93 } }, "30": { start: { line: 43, column: 14 }, end: { line: 43, column: 56 } }, "31": { start: { line: 51, column: 14 }, end: { line: 51, column: 31 } }, "32": { start: { line: 52, column: 18 }, end: { line: 52, column: 46 } }, "33": { start: { line: 54, column: 2 }, end: { line: 54, column: 75 } }, "34": { start: { line: 56, column: 2 }, end: { line: 58, column: 3 } }, "35": { start: { line: 57, column: 4 }, end: { line: 57, column: 64 } }, "36": { start: { line: 60, column: 2 }, end: { line: 60, column: 17 } }, "37": { start: { line: 70, column: 15 }, end: { line: 70, column: 83 } }, "38": { start: { line: 71, column: 20 }, end: { line: 71, column: 34 } }, "39": { start: { line: 74, column: 2 }, end: { line: 76, column: 3 } }, "40": { start: { line: 75, column: 4 }, end: { line: 75, column: 67 } }, "41": { start: { line: 78, column: 2 }, end: { line: 78, column: 73 } }, "42": { start: { line: 80, column: 2 }, end: { line: 80, column: 17 } }, "43": { start: { line: 84, column: 2 }, end: { line: 88, column: 3 } }, "44": { start: { line: 85, column: 4 }, end: { line: 85, column: 51 } }, "45": { start: { line: 87, column: 4 }, end: { line: 87, column: 52 } }, "46": { start: { line: 92, column: 2 }, end: { line: 135, column: 3 } }, "47": { start: { line: 93, column: 4 }, end: { line: 93, column: 44 } }, "48": { start: { line: 95, column: 4 }, end: { line: 134, column: 5 } }, "49": { start: { line: 96, column: 6 }, end: { line: 96, column: 24 } }, "50": { start: { line: 97, column: 20 }, end: { line: 97, column: 92 } }, "51": { start: { line: 103, column: 6 }, end: { line: 105, column: 7 } }, "52": { start: { line: 104, column: 8 }, end: { line: 104, column: 17 } }, "53": { start: { line: 107, column: 6 }, end: { line: 107, column: 53 } }, "54": { start: { line: 108, column: 11 }, end: { line: 134, column: 5 } }, "55": { start: { line: 109, column: 6 }, end: { line: 109, column: 26 } }, "56": { start: { line: 110, column: 19 }, end: { line: 110, column: 92 } }, "57": { start: { line: 112, column: 6 }, end: { line: 112, column: 54 } }, "58": { start: { line: 113, column: 11 }, end: { line: 134, column: 5 } }, "59": { start: { line: 114, column: 6 }, end: { line: 114, column: 26 } }, "60": { start: { line: 116, column: 22 }, end: { line: 116, column: 87 } }, "61": { start: { line: 121, column: 6 }, end: { line: 131, column: 7 } }, "62": { start: { line: 122, column: 27 }, end: { line: 122, column: 96 } }, "63": { start: { line: 123, column: 8 }, end: { line: 123, column: 47 } }, "64": { start: { line: 125, column: 20 }, end: { line: 125, column: 84 } }, "65": { start: { line: 126, column: 29 }, end: { line: 126, column: 210 } }, "66": { start: { line: 127, column: 8 }, end: { line: 127, column: 51 } }, "67": { start: { line: 129, column: 8 }, end: { line: 129, column: 67 } }, "68": { start: { line: 130, column: 8 }, end: { line: 130, column: 32 } }, "69": { start: { line: 133, column: 6 }, end: { line: 133, column: 52 } }, "70": { start: { line: 139, column: 2 }, end: { line: 139, column: 43 } }, "71": { start: { line: 143, column: 2 }, end: { line: 143, column: 42 } }, "72": { start: { line: 146, column: 0 }, end: { line: 146, column: 56 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 39, column: 9 }, end: { line: 39, column: 32 } }, loc: { start: { line: 39, column: 38 }, end: { line: 39, column: 269 } }, line: 39 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 41, column: 9 }, end: { line: 41, column: 31 } }, loc: { start: { line: 41, column: 37 }, end: { line: 41, column: 95 } }, line: 41 }, "2": { name: "addContext", decl: { start: { line: 50, column: 10 }, end: { line: 50, column: 20 } }, loc: { start: { line: 50, column: 66 }, end: { line: 61, column: 1 } }, line: 50 }, "3": { name: "addInstance", decl: { start: { line: 69, column: 10 }, end: { line: 69, column: 21 } }, loc: { start: { line: 69, column: 39 }, end: { line: 81, column: 1 } }, line: 69 }, "4": { name: "begin", decl: { start: { line: 83, column: 10 }, end: { line: 83, column: 15 } }, loc: { start: { line: 83, column: 37 }, end: { line: 89, column: 1 } }, line: 83 }, "5": { name: "callstackSaga", decl: { start: { line: 91, column: 10 }, end: { line: 91, column: 23 } }, loc: { start: { line: 91, column: 26 }, end: { line: 136, column: 1 } }, line: 91 }, "6": { name: "reset", decl: { start: { line: 138, column: 10 }, end: { line: 138, column: 15 } }, loc: { start: { line: 138, column: 18 }, end: { line: 140, column: 1 } }, line: 138 }, "7": { name: "saga", decl: { start: { line: 142, column: 10 }, end: { line: 142, column: 14 } }, loc: { start: { line: 142, column: 17 }, end: { line: 144, column: 1 } }, line: 142 } }, branchMap: { "0": { loc: { start: { line: 39, column: 40 }, end: { line: 39, column: 267 } }, type: "if", locations: [{ start: { line: 39, column: 40 }, end: { line: 39, column: 267 } }, { start: { line: 39, column: 40 }, end: { line: 39, column: 267 } }], line: 39 }, "1": { loc: { start: { line: 39, column: 44 }, end: { line: 39, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 39, column: 44 }, end: { line: 39, column: 47 } }, { start: { line: 39, column: 51 }, end: { line: 39, column: 65 } }], line: 39 }, "2": { loc: { start: { line: 39, column: 107 }, end: { line: 39, column: 228 } }, type: "if", locations: [{ start: { line: 39, column: 107 }, end: { line: 39, column: 228 } }, { start: { line: 39, column: 107 }, end: { line: 39, column: 228 } }], line: 39 }, "3": { loc: { start: { line: 39, column: 149 }, end: { line: 39, column: 224 } }, type: "if", locations: [{ start: { line: 39, column: 149 }, end: { line: 39, column: 224 } }, { start: { line: 39, column: 149 }, end: { line: 39, column: 224 } }], line: 39 }, "4": { loc: { start: { line: 41, column: 46 }, end: { line: 41, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 41, column: 70 }, end: { line: 41, column: 73 } }, { start: { line: 41, column: 76 }, end: { line: 41, column: 92 } }], line: 41 }, "5": { loc: { start: { line: 41, column: 46 }, end: { line: 41, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 41, column: 46 }, end: { line: 41, column: 49 } }, { start: { line: 41, column: 53 }, end: { line: 41, column: 67 } }], line: 41 }, "6": { loc: { start: { line: 51, column: 14 }, end: { line: 51, column: 31 } }, type: "binary-expr", locations: [{ start: { line: 51, column: 14 }, end: { line: 51, column: 20 } }, { start: { line: 51, column: 24 }, end: { line: 51, column: 31 } }], line: 51 }, "7": { loc: { start: { line: 56, column: 2 }, end: { line: 58, column: 3 } }, type: "if", locations: [{ start: { line: 56, column: 2 }, end: { line: 58, column: 3 } }, { start: { line: 56, column: 2 }, end: { line: 58, column: 3 } }], line: 56 }, "8": { loc: { start: { line: 74, column: 2 }, end: { line: 76, column: 3 } }, type: "if", locations: [{ start: { line: 74, column: 2 }, end: { line: 76, column: 3 } }, { start: { line: 74, column: 2 }, end: { line: 76, column: 3 } }], line: 74 }, "9": { loc: { start: { line: 84, column: 2 }, end: { line: 88, column: 3 } }, type: "if", locations: [{ start: { line: 84, column: 2 }, end: { line: 88, column: 3 } }, { start: { line: 84, column: 2 }, end: { line: 88, column: 3 } }], line: 84 }, "10": { loc: { start: { line: 95, column: 4 }, end: { line: 134, column: 5 } }, type: "if", locations: [{ start: { line: 95, column: 4 }, end: { line: 134, column: 5 } }, { start: { line: 95, column: 4 }, end: { line: 134, column: 5 } }], line: 95 }, "11": { loc: { start: { line: 103, column: 6 }, end: { line: 105, column: 7 } }, type: "if", locations: [{ start: { line: 103, column: 6 }, end: { line: 105, column: 7 } }, { start: { line: 103, column: 6 }, end: { line: 105, column: 7 } }], line: 103 }, "12": { loc: { start: { line: 108, column: 11 }, end: { line: 134, column: 5 } }, type: "if", locations: [{ start: { line: 108, column: 11 }, end: { line: 134, column: 5 } }, { start: { line: 108, column: 11 }, end: { line: 134, column: 5 } }], line: 108 }, "13": { loc: { start: { line: 113, column: 11 }, end: { line: 134, column: 5 } }, type: "if", locations: [{ start: { line: 113, column: 11 }, end: { line: 134, column: 5 } }, { start: { line: 113, column: 11 }, end: { line: 134, column: 5 } }], line: 113 }, "14": { loc: { start: { line: 121, column: 6 }, end: { line: 131, column: 7 } }, type: "if", locations: [{ start: { line: 121, column: 6 }, end: { line: 131, column: 7 } }, { start: { line: 121, column: 6 }, end: { line: 131, column: 7 } }], line: 121 }, "15": { loc: { start: { line: 121, column: 10 }, end: { line: 121, column: 87 } }, type: "binary-expr", locations: [{ start: { line: 121, column: 10 }, end: { line: 121, column: 30 } }, { start: { line: 121, column: 34 }, end: { line: 121, column: 87 } }], line: 121 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0, "57": 0, "58": 0, "59": 0, "60": 0, "61": 0, "62": 0, "63": 0, "64": 0, "65": 0, "66": 0, "67": 0, "68": 0, "69": 0, "70": 0, "71": 0, "72": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0, 0], "7": [0, 0], "8": [0, 0], "9": [0, 0], "10": [0, 0], "11": [0, 0], "12": [0, 0], "13": [0, 0], "14": [0, 0], "15": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/evm/sagas/index.js"], names: ["addContext", "addInstance", "begin", "callstackSaga", "reset", "saga", "TruffleDecodeUtils", "actions", "data", "debug", "contractName", "address", "binary", "compiler", "raw", "context", "addBinary", "search", "evm", "info", "binaries", "undefined", "call", "create", "TICK", "current", "step", "isCall", "callAddress", "callsPrecompile", "isCreate", "createBinary", "isHalting", "callstack", "length", "dummyAddress", "creationDepth", "stack", "next", "state", "createdAddress", "Conversion", "toHexString", "toBytes", "toBN", "EVM", "WORD_SIZE", "learnAddressSaga", "returnCall"], mappings: "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", file: "index.js", sourceRoot: "/Users/tyler/projects/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:evm:sagas\");\n\nimport { call, put, take, select } from \"redux-saga/effects\";\nimport { prefixName, keccak256 } from \"lib/helpers\";\nimport * as TruffleDecodeUtils from \"truffle-decode-utils\";\n\nimport { TICK } from \"lib/trace/actions\";\nimport * as actions from \"../actions\";\n\nimport evm from \"../selectors\";\n\nimport * as data from \"lib/data/sagas\";\n\n/**\n * Adds EVM bytecode context\n *\n * @return {string} ID (0x-prefixed keccak of binary)\n */\nexport function* addContext(contractName, { address, binary }, compiler) {\n  const raw = binary || address;\n  const context = keccak256(raw);\n\n  yield put(actions.addContext(contractName, raw, compiler));\n\n  if (binary) {\n    yield put(actions.addBinary(context, binary));\n  }\n\n  return context;\n}\n\n/**\n * Adds known deployed instance of binary at address\n *\n * @param {string} binary - may be undefined (e.g. precompiles)\n * @return {string} ID (0x-prefixed keccak of binary)\n */\nexport function* addInstance(address, binary) {\n  let search = yield select(evm.info.binaries.search);\n  let { context } = search(binary);\n\n  // in case binary is unknown, add context for address\n  if (!context) {\n    context = yield* addContext(undefined, { address }, undefined);\n  }\n\n  yield put(actions.addInstance(address, context, binary));\n\n  return context;\n}\n\nexport function* begin({ address, binary }) {\n  if (address) {\n    yield put(actions.call(address));\n  } else {\n    yield put(actions.create(binary));\n  }\n}\n\nexport function* callstackSaga() {\n  while (true) {\n    yield take(TICK);\n\n    if (yield select(evm.current.step.isCall)) {\n      debug(\"got call\");\n      let address = yield select(evm.current.step.callAddress);\n\n      // if there is no binary (e.g. in the case of precompiled contracts),\n      // then there will be no trace steps for the called code, and so we\n      // shouldn't tell the debugger that we're entering another execution\n      // context\n      if (yield select(evm.current.step.callsPrecompile)) {\n        continue;\n      }\n\n      yield put(actions.call(address));\n    } else if (yield select(evm.current.step.isCreate)) {\n      debug(\"got create\");\n      let binary = yield select(evm.current.step.createBinary);\n\n      yield put(actions.create(binary));\n    } else if (yield select(evm.current.step.isHalting)) {\n      debug(\"got return\");\n\n      let callstack = yield select(evm.current.callstack);\n\n      //if the program's not ending, and we just returned from a constructor,\n      //learn the address of what we just initialized\n      //(do this before we put the return action to avoid off-by-one error)\n      if (\n        callstack.length > 1 &&\n        callstack[callstack.length - 1].address === undefined\n      ) {\n        let dummyAddress = yield select(evm.current.creationDepth);\n        debug(\"dummyAddress %d\", dummyAddress);\n\n        let stack = yield select(evm.next.state.stack);\n        let createdAddress = TruffleDecodeUtils.Conversion.toHexString(\n          TruffleDecodeUtils.Conversion.toBytes(\n            TruffleDecodeUtils.Conversion.toBN(\n              stack[stack.length - 1],\n              TruffleDecodeUtils.EVM.WORD_SIZE\n            )\n          ),\n          true\n        );\n        debug(\"createdAddress %s\", createdAddress);\n\n        yield* data.learnAddressSaga(dummyAddress, createdAddress);\n        debug(\"address learnt\");\n      }\n\n      yield put(actions.returnCall());\n    }\n  }\n}\n\nexport function* reset() {\n  yield put(actions.reset());\n}\n\nexport function* saga() {\n  yield call(callstackSaga);\n}\n\nexport default prefixName(\"evm\", saga);\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_deig1u90m.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });cov_deig1u90m.s[1]++;exports.addContext = addContext;cov_deig1u90m.s[2]++;exports.addInstance = addInstance;cov_deig1u90m.s[3]++;exports.begin = begin;cov_deig1u90m.s[4]++;exports.callstackSaga = callstackSaga;cov_deig1u90m.s[5]++;exports.reset = reset;cov_deig1u90m.s[6]++;exports.saga = saga;var _debug = (cov_deig1u90m.s[7]++, __webpack_require__(0));var _debug2 = (cov_deig1u90m.s[8]++, _interopRequireDefault(_debug));var _effects = (cov_deig1u90m.s[9]++, __webpack_require__(15));var _helpers = (cov_deig1u90m.s[10]++, __webpack_require__(2));var _truffleDecodeUtils = (cov_deig1u90m.s[11]++, __webpack_require__(14));var TruffleDecodeUtils = (cov_deig1u90m.s[12]++, _interopRequireWildcard(_truffleDecodeUtils));var _actions = (cov_deig1u90m.s[13]++, __webpack_require__(19));var _actions2 = (cov_deig1u90m.s[14]++, __webpack_require__(35));var actions = (cov_deig1u90m.s[15]++, _interopRequireWildcard(_actions2));var _selectors = (cov_deig1u90m.s[16]++, __webpack_require__(10));var _selectors2 = (cov_deig1u90m.s[17]++, _interopRequireDefault(_selectors));var _sagas = (cov_deig1u90m.s[18]++, __webpack_require__(24));var data = (cov_deig1u90m.s[19]++, _interopRequireWildcard(_sagas));function _interopRequireWildcard(obj) {
  cov_deig1u90m.f[0]++;cov_deig1u90m.s[20]++;if ((cov_deig1u90m.b[1][0]++, obj) && (cov_deig1u90m.b[1][1]++, obj.__esModule)) {
    cov_deig1u90m.b[0][0]++;cov_deig1u90m.s[21]++;return obj;
  } else {
    cov_deig1u90m.b[0][1]++;var newObj = (cov_deig1u90m.s[22]++, {});cov_deig1u90m.s[23]++;if (obj != null) {
      cov_deig1u90m.b[2][0]++;cov_deig1u90m.s[24]++;for (var key in obj) {
        cov_deig1u90m.s[25]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_deig1u90m.b[3][0]++;cov_deig1u90m.s[26]++;newObj[key] = obj[key];
        } else {
          cov_deig1u90m.b[3][1]++;
        }
      }
    } else {
      cov_deig1u90m.b[2][1]++;
    }cov_deig1u90m.s[27]++;newObj.default = obj;cov_deig1u90m.s[28]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_deig1u90m.f[1]++;cov_deig1u90m.s[29]++;return (cov_deig1u90m.b[5][0]++, obj) && (cov_deig1u90m.b[5][1]++, obj.__esModule) ? (cov_deig1u90m.b[4][0]++, obj) : (cov_deig1u90m.b[4][1]++, { default: obj });
}const debug = (cov_deig1u90m.s[30]++, (0, _debug2.default)("debugger:evm:sagas"));function* addContext(contractName, { address, binary }, compiler) {
  cov_deig1u90m.f[2]++;const raw = (cov_deig1u90m.s[31]++, (cov_deig1u90m.b[6][0]++, binary) || (cov_deig1u90m.b[6][1]++, address));const context = (cov_deig1u90m.s[32]++, (0, _helpers.keccak256)(raw));cov_deig1u90m.s[33]++;yield (0, _effects.put)(actions.addContext(contractName, raw, compiler));cov_deig1u90m.s[34]++;if (binary) {
    cov_deig1u90m.b[7][0]++;cov_deig1u90m.s[35]++;yield (0, _effects.put)(actions.addBinary(context, binary));
  } else {
    cov_deig1u90m.b[7][1]++;
  }cov_deig1u90m.s[36]++;return context;
}function* addInstance(address, binary) {
  cov_deig1u90m.f[3]++;let search = (cov_deig1u90m.s[37]++, yield (0, _effects.select)(_selectors2.default.info.binaries.search));let { context } = (cov_deig1u90m.s[38]++, search(binary));cov_deig1u90m.s[39]++;if (!context) {
    cov_deig1u90m.b[8][0]++;cov_deig1u90m.s[40]++;context = yield* addContext(undefined, { address }, undefined);
  } else {
    cov_deig1u90m.b[8][1]++;
  }cov_deig1u90m.s[41]++;yield (0, _effects.put)(actions.addInstance(address, context, binary));cov_deig1u90m.s[42]++;return context;
}function* begin({ address, binary }) {
  cov_deig1u90m.f[4]++;cov_deig1u90m.s[43]++;if (address) {
    cov_deig1u90m.b[9][0]++;cov_deig1u90m.s[44]++;yield (0, _effects.put)(actions.call(address));
  } else {
    cov_deig1u90m.b[9][1]++;cov_deig1u90m.s[45]++;yield (0, _effects.put)(actions.create(binary));
  }
}function* callstackSaga() {
  cov_deig1u90m.f[5]++;cov_deig1u90m.s[46]++;while (true) {
    cov_deig1u90m.s[47]++;yield (0, _effects.take)(_actions.TICK);cov_deig1u90m.s[48]++;if (yield (0, _effects.select)(_selectors2.default.current.step.isCall)) {
      cov_deig1u90m.b[10][0]++;cov_deig1u90m.s[49]++;debug("got call");let address = (cov_deig1u90m.s[50]++, yield (0, _effects.select)(_selectors2.default.current.step.callAddress));cov_deig1u90m.s[51]++;if (yield (0, _effects.select)(_selectors2.default.current.step.callsPrecompile)) {
        cov_deig1u90m.b[11][0]++;cov_deig1u90m.s[52]++;continue;
      } else {
        cov_deig1u90m.b[11][1]++;
      }cov_deig1u90m.s[53]++;yield (0, _effects.put)(actions.call(address));
    } else {
      cov_deig1u90m.b[10][1]++;cov_deig1u90m.s[54]++;if (yield (0, _effects.select)(_selectors2.default.current.step.isCreate)) {
        cov_deig1u90m.b[12][0]++;cov_deig1u90m.s[55]++;debug("got create");let binary = (cov_deig1u90m.s[56]++, yield (0, _effects.select)(_selectors2.default.current.step.createBinary));cov_deig1u90m.s[57]++;yield (0, _effects.put)(actions.create(binary));
      } else {
        cov_deig1u90m.b[12][1]++;cov_deig1u90m.s[58]++;if (yield (0, _effects.select)(_selectors2.default.current.step.isHalting)) {
          cov_deig1u90m.b[13][0]++;cov_deig1u90m.s[59]++;debug("got return");let callstack = (cov_deig1u90m.s[60]++, yield (0, _effects.select)(_selectors2.default.current.callstack));cov_deig1u90m.s[61]++;if ((cov_deig1u90m.b[15][0]++, callstack.length > 1) && (cov_deig1u90m.b[15][1]++, callstack[callstack.length - 1].address === undefined)) {
            cov_deig1u90m.b[14][0]++;let dummyAddress = (cov_deig1u90m.s[62]++, yield (0, _effects.select)(_selectors2.default.current.creationDepth));cov_deig1u90m.s[63]++;debug("dummyAddress %d", dummyAddress);let stack = (cov_deig1u90m.s[64]++, yield (0, _effects.select)(_selectors2.default.next.state.stack));let createdAddress = (cov_deig1u90m.s[65]++, TruffleDecodeUtils.Conversion.toHexString(TruffleDecodeUtils.Conversion.toBytes(TruffleDecodeUtils.Conversion.toBN(stack[stack.length - 1], TruffleDecodeUtils.EVM.WORD_SIZE)), true));cov_deig1u90m.s[66]++;debug("createdAddress %s", createdAddress);cov_deig1u90m.s[67]++;yield* data.learnAddressSaga(dummyAddress, createdAddress);cov_deig1u90m.s[68]++;debug("address learnt");
          } else {
            cov_deig1u90m.b[14][1]++;
          }cov_deig1u90m.s[69]++;yield (0, _effects.put)(actions.returnCall());
        } else {
          cov_deig1u90m.b[13][1]++;
        }
      }
    }
  }
}function* reset() {
  cov_deig1u90m.f[6]++;cov_deig1u90m.s[70]++;yield (0, _effects.put)(actions.reset());
}function* saga() {
  cov_deig1u90m.f[7]++;cov_deig1u90m.s[71]++;yield (0, _effects.call)(callstackSaga);
}cov_deig1u90m.s[72]++;exports.default = (0, _helpers.prefixName)("evm", saga);

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_n0hfwv6e0 = function () {
  var path = "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/evm/actions/index.js",
      hash = "249608950d3f8511f72382c60fb70dfa02c02dcc",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/evm/actions/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 6, column: 0 }, end: { line: 6, column: 32 } }, "2": { start: { line: 7, column: 0 }, end: { line: 7, column: 30 } }, "3": { start: { line: 8, column: 0 }, end: { line: 8, column: 34 } }, "4": { start: { line: 9, column: 0 }, end: { line: 9, column: 20 } }, "5": { start: { line: 10, column: 0 }, end: { line: 10, column: 24 } }, "6": { start: { line: 11, column: 0 }, end: { line: 11, column: 32 } }, "7": { start: { line: 12, column: 0 }, end: { line: 12, column: 22 } }, "8": { start: { line: 13, column: 20 }, end: { line: 13, column: 59 } }, "9": { start: { line: 15, column: 2 }, end: { line: 20, column: 4 } }, "10": { start: { line: 23, column: 19 }, end: { line: 23, column: 56 } }, "11": { start: { line: 25, column: 2 }, end: { line: 29, column: 4 } }, "12": { start: { line: 32, column: 21 }, end: { line: 32, column: 62 } }, "13": { start: { line: 34, column: 2 }, end: { line: 39, column: 4 } }, "14": { start: { line: 42, column: 13 }, end: { line: 42, column: 34 } }, "15": { start: { line: 44, column: 2 }, end: { line: 47, column: 4 } }, "16": { start: { line: 50, column: 15 }, end: { line: 50, column: 40 } }, "17": { start: { line: 52, column: 2 }, end: { line: 55, column: 4 } }, "18": { start: { line: 58, column: 15 }, end: { line: 58, column: 40 } }, "19": { start: { line: 60, column: 2 }, end: { line: 62, column: 4 } }, "20": { start: { line: 65, column: 14 }, end: { line: 65, column: 41 } }, "21": { start: { line: 67, column: 2 }, end: { line: 67, column: 25 } } }, fnMap: { "0": { name: "addContext", decl: { start: { line: 14, column: 9 }, end: { line: 14, column: 19 } }, loc: { start: { line: 14, column: 49 }, end: { line: 21, column: 1 } }, line: 14 }, "1": { name: "addBinary", decl: { start: { line: 24, column: 9 }, end: { line: 24, column: 18 } }, loc: { start: { line: 24, column: 36 }, end: { line: 30, column: 1 } }, line: 24 }, "2": { name: "addInstance", decl: { start: { line: 33, column: 9 }, end: { line: 33, column: 20 } }, loc: { start: { line: 33, column: 47 }, end: { line: 40, column: 1 } }, line: 33 }, "3": { name: "call", decl: { start: { line: 43, column: 9 }, end: { line: 43, column: 13 } }, loc: { start: { line: 43, column: 23 }, end: { line: 48, column: 1 } }, line: 43 }, "4": { name: "create", decl: { start: { line: 51, column: 9 }, end: { line: 51, column: 15 } }, loc: { start: { line: 51, column: 24 }, end: { line: 56, column: 1 } }, line: 51 }, "5": { name: "returnCall", decl: { start: { line: 59, column: 9 }, end: { line: 59, column: 19 } }, loc: { start: { line: 59, column: 22 }, end: { line: 63, column: 1 } }, line: 59 }, "6": { name: "reset", decl: { start: { line: 66, column: 9 }, end: { line: 66, column: 14 } }, loc: { start: { line: 66, column: 17 }, end: { line: 68, column: 1 } }, line: 66 } }, branchMap: {}, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0 }, b: {}, inputSourceMap: { version: 3, sources: ["lib/evm/actions/index.js"], names: ["addContext", "addBinary", "addInstance", "call", "create", "returnCall", "reset", "ADD_CONTEXT", "contractName", "raw", "compiler", "type", "ADD_BINARY", "context", "binary", "ADD_INSTANCE", "address", "CALL", "CREATE", "RETURN", "RESET"], mappings: ";;;;;QACgBA,U,GAAAA,U;QAUAC,S,GAAAA,S;QASAC,W,GAAAA,W;QAUAC,I,GAAAA,I;QAQAC,M,GAAAA,M;QAQAC,U,GAAAA,U;QAOAC,K,GAAAA,K;AArDT,MAAMC,oCAAc,iBAApB;AACA,SAASP,UAAT,CAAoBQ,YAApB,EAAkCC,GAAlC,EAAuCC,QAAvC,EAAiD;AACtD,SAAO;AACLC,UAAMJ,WADD;AAELC,gBAFK;AAGLC,OAHK;AAILC;AAJK,GAAP;AAMD;;AAEM,MAAME,kCAAa,gBAAnB;AACA,SAASX,SAAT,CAAmBY,OAAnB,EAA4BC,MAA5B,EAAoC;AACzC,SAAO;AACLH,UAAMC,UADD;AAELC,WAFK;AAGLC;AAHK,GAAP;AAKD;;AAEM,MAAMC,sCAAe,kBAArB;AACA,SAASb,WAAT,CAAqBc,OAArB,EAA8BH,OAA9B,EAAuCC,MAAvC,EAA+C;AACpD,SAAO;AACLH,UAAMI,YADD;AAELC,WAFK;AAGLH,WAHK;AAILC;AAJK,GAAP;AAMD;;AAEM,MAAMG,sBAAO,MAAb;AACA,SAASd,IAAT,CAAca,OAAd,EAAuB;AAC5B,SAAO;AACLL,UAAMM,IADD;AAELD;AAFK,GAAP;AAID;;AAEM,MAAME,0BAAS,QAAf;AACA,SAASd,MAAT,CAAgBU,MAAhB,EAAwB;AAC7B,SAAO;AACLH,UAAMO,MADD;AAELJ;AAFK,GAAP;AAID;;AAEM,MAAMK,0BAAS,QAAf;AACA,SAASd,UAAT,GAAsB;AAC3B,SAAO;AACLM,UAAMQ;AADD,GAAP;AAGD;;AAEM,MAAMC,wBAAQ,WAAd;AACA,SAASd,KAAT,GAAiB;AACtB,SAAO,EAAEK,MAAMS,KAAR,EAAP;AACD", file: "index.js", sourceRoot: "/Users/tyler/projects/truffle/packages/truffle-debugger", sourcesContent: ["export const ADD_CONTEXT = \"EVM_ADD_CONTEXT\";\nexport function addContext(contractName, raw, compiler) {\n  return {\n    type: ADD_CONTEXT,\n    contractName,\n    raw,\n    compiler\n  };\n}\n\nexport const ADD_BINARY = \"EVM_ADD_BINARY\";\nexport function addBinary(context, binary) {\n  return {\n    type: ADD_BINARY,\n    context,\n    binary\n  };\n}\n\nexport const ADD_INSTANCE = \"EVM_ADD_INSTANCE\";\nexport function addInstance(address, context, binary) {\n  return {\n    type: ADD_INSTANCE,\n    address,\n    context,\n    binary\n  };\n}\n\nexport const CALL = \"CALL\";\nexport function call(address) {\n  return {\n    type: CALL,\n    address\n  };\n}\n\nexport const CREATE = \"CREATE\";\nexport function create(binary) {\n  return {\n    type: CREATE,\n    binary\n  };\n}\n\nexport const RETURN = \"RETURN\";\nexport function returnCall() {\n  return {\n    type: RETURN\n  };\n}\n\nexport const RESET = \"EVM_RESET\";\nexport function reset() {\n  return { type: RESET };\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_n0hfwv6e0.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });cov_n0hfwv6e0.s[1]++;exports.addContext = addContext;cov_n0hfwv6e0.s[2]++;exports.addBinary = addBinary;cov_n0hfwv6e0.s[3]++;exports.addInstance = addInstance;cov_n0hfwv6e0.s[4]++;exports.call = call;cov_n0hfwv6e0.s[5]++;exports.create = create;cov_n0hfwv6e0.s[6]++;exports.returnCall = returnCall;cov_n0hfwv6e0.s[7]++;exports.reset = reset;const ADD_CONTEXT = (cov_n0hfwv6e0.s[8]++, exports.ADD_CONTEXT = "EVM_ADD_CONTEXT");function addContext(contractName, raw, compiler) {
  cov_n0hfwv6e0.f[0]++;cov_n0hfwv6e0.s[9]++;return { type: ADD_CONTEXT, contractName, raw, compiler };
}const ADD_BINARY = (cov_n0hfwv6e0.s[10]++, exports.ADD_BINARY = "EVM_ADD_BINARY");function addBinary(context, binary) {
  cov_n0hfwv6e0.f[1]++;cov_n0hfwv6e0.s[11]++;return { type: ADD_BINARY, context, binary };
}const ADD_INSTANCE = (cov_n0hfwv6e0.s[12]++, exports.ADD_INSTANCE = "EVM_ADD_INSTANCE");function addInstance(address, context, binary) {
  cov_n0hfwv6e0.f[2]++;cov_n0hfwv6e0.s[13]++;return { type: ADD_INSTANCE, address, context, binary };
}const CALL = (cov_n0hfwv6e0.s[14]++, exports.CALL = "CALL");function call(address) {
  cov_n0hfwv6e0.f[3]++;cov_n0hfwv6e0.s[15]++;return { type: CALL, address };
}const CREATE = (cov_n0hfwv6e0.s[16]++, exports.CREATE = "CREATE");function create(binary) {
  cov_n0hfwv6e0.f[4]++;cov_n0hfwv6e0.s[17]++;return { type: CREATE, binary };
}const RETURN = (cov_n0hfwv6e0.s[18]++, exports.RETURN = "RETURN");function returnCall() {
  cov_n0hfwv6e0.f[5]++;cov_n0hfwv6e0.s[19]++;return { type: RETURN };
}const RESET = (cov_n0hfwv6e0.s[20]++, exports.RESET = "EVM_RESET");function reset() {
  cov_n0hfwv6e0.f[6]++;cov_n0hfwv6e0.s[21]++;return { type: RESET };
}

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_8vmp5008r = function () {
  var path = "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/solidity/sagas/index.js",
      hash = "6864d171f911548a4268fd7bac4497c66fb80c92",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/solidity/sagas/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 6, column: 0 }, end: { line: 6, column: 30 } }, "2": { start: { line: 7, column: 0 }, end: { line: 7, column: 36 } }, "3": { start: { line: 8, column: 0 }, end: { line: 8, column: 22 } }, "4": { start: { line: 9, column: 0 }, end: { line: 9, column: 20 } }, "5": { start: { line: 11, column: 13 }, end: { line: 11, column: 29 } }, "6": { start: { line: 13, column: 14 }, end: { line: 13, column: 44 } }, "7": { start: { line: 15, column: 15 }, end: { line: 15, column: 44 } }, "8": { start: { line: 17, column: 15 }, end: { line: 17, column: 37 } }, "9": { start: { line: 19, column: 15 }, end: { line: 19, column: 36 } }, "10": { start: { line: 21, column: 14 }, end: { line: 21, column: 47 } }, "11": { start: { line: 23, column: 16 }, end: { line: 23, column: 44 } }, "12": { start: { line: 25, column: 17 }, end: { line: 25, column: 40 } }, "13": { start: { line: 27, column: 18 }, end: { line: 27, column: 52 } }, "14": { start: { line: 29, column: 40 }, end: { line: 29, column: 267 } }, "15": { start: { line: 29, column: 69 }, end: { line: 29, column: 80 } }, "16": { start: { line: 29, column: 103 }, end: { line: 29, column: 105 } }, "17": { start: { line: 29, column: 107 }, end: { line: 29, column: 228 } }, "18": { start: { line: 29, column: 126 }, end: { line: 29, column: 226 } }, "19": { start: { line: 29, column: 149 }, end: { line: 29, column: 224 } }, "20": { start: { line: 29, column: 201 }, end: { line: 29, column: 224 } }, "21": { start: { line: 29, column: 229 }, end: { line: 29, column: 250 } }, "22": { start: { line: 29, column: 251 }, end: { line: 29, column: 265 } }, "23": { start: { line: 31, column: 39 }, end: { line: 31, column: 93 } }, "24": { start: { line: 33, column: 14 }, end: { line: 33, column: 61 } }, "25": { start: { line: 36, column: 2 }, end: { line: 36, column: 70 } }, "26": { start: { line: 40, column: 2 }, end: { line: 40, column: 67 } }, "27": { start: { line: 44, column: 2 }, end: { line: 49, column: 3 } }, "28": { start: { line: 45, column: 4 }, end: { line: 45, column: 45 } }, "29": { start: { line: 46, column: 4 }, end: { line: 46, column: 22 } }, "30": { start: { line: 48, column: 4 }, end: { line: 48, column: 31 } }, "31": { start: { line: 53, column: 2 }, end: { line: 88, column: 3 } }, "32": { start: { line: 54, column: 24 }, end: { line: 54, column: 93 } }, "33": { start: { line: 55, column: 4 }, end: { line: 55, column: 57 } }, "34": { start: { line: 56, column: 9 }, end: { line: 88, column: 3 } }, "35": { start: { line: 62, column: 4 }, end: { line: 62, column: 27 } }, "36": { start: { line: 63, column: 4 }, end: { line: 82, column: 5 } }, "37": { start: { line: 65, column: 11 }, end: { line: 82, column: 5 } }, "38": { start: { line: 77, column: 6 }, end: { line: 77, column: 35 } }, "39": { start: { line: 78, column: 6 }, end: { line: 78, column: 49 } }, "40": { start: { line: 81, column: 6 }, end: { line: 81, column: 49 } }, "41": { start: { line: 83, column: 9 }, end: { line: 88, column: 3 } }, "42": { start: { line: 85, column: 4 }, end: { line: 85, column: 47 } }, "43": { start: { line: 86, column: 9 }, end: { line: 88, column: 3 } }, "44": { start: { line: 87, column: 4 }, end: { line: 87, column: 47 } }, "45": { start: { line: 92, column: 2 }, end: { line: 92, column: 43 } }, "46": { start: { line: 96, column: 2 }, end: { line: 96, column: 37 } }, "47": { start: { line: 99, column: 0 }, end: { line: 99, column: 61 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 29, column: 9 }, end: { line: 29, column: 32 } }, loc: { start: { line: 29, column: 38 }, end: { line: 29, column: 269 } }, line: 29 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 31, column: 9 }, end: { line: 31, column: 31 } }, loc: { start: { line: 31, column: 37 }, end: { line: 31, column: 95 } }, line: 31 }, "2": { name: "addSource", decl: { start: { line: 35, column: 10 }, end: { line: 35, column: 19 } }, loc: { start: { line: 35, column: 45 }, end: { line: 37, column: 1 } }, line: 35 }, "3": { name: "addSourceMap", decl: { start: { line: 39, column: 10 }, end: { line: 39, column: 22 } }, loc: { start: { line: 39, column: 42 }, end: { line: 41, column: 1 } }, line: 39 }, "4": { name: "tickSaga", decl: { start: { line: 43, column: 10 }, end: { line: 43, column: 18 } }, loc: { start: { line: 43, column: 21 }, end: { line: 50, column: 1 } }, line: 43 }, "5": { name: "functionDepthSaga", decl: { start: { line: 52, column: 10 }, end: { line: 52, column: 27 } }, loc: { start: { line: 52, column: 30 }, end: { line: 89, column: 1 } }, line: 52 }, "6": { name: "reset", decl: { start: { line: 91, column: 10 }, end: { line: 91, column: 15 } }, loc: { start: { line: 91, column: 18 }, end: { line: 93, column: 1 } }, line: 91 }, "7": { name: "saga", decl: { start: { line: 95, column: 10 }, end: { line: 95, column: 14 } }, loc: { start: { line: 95, column: 17 }, end: { line: 97, column: 1 } }, line: 95 } }, branchMap: { "0": { loc: { start: { line: 29, column: 40 }, end: { line: 29, column: 267 } }, type: "if", locations: [{ start: { line: 29, column: 40 }, end: { line: 29, column: 267 } }, { start: { line: 29, column: 40 }, end: { line: 29, column: 267 } }], line: 29 }, "1": { loc: { start: { line: 29, column: 44 }, end: { line: 29, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 29, column: 44 }, end: { line: 29, column: 47 } }, { start: { line: 29, column: 51 }, end: { line: 29, column: 65 } }], line: 29 }, "2": { loc: { start: { line: 29, column: 107 }, end: { line: 29, column: 228 } }, type: "if", locations: [{ start: { line: 29, column: 107 }, end: { line: 29, column: 228 } }, { start: { line: 29, column: 107 }, end: { line: 29, column: 228 } }], line: 29 }, "3": { loc: { start: { line: 29, column: 149 }, end: { line: 29, column: 224 } }, type: "if", locations: [{ start: { line: 29, column: 149 }, end: { line: 29, column: 224 } }, { start: { line: 29, column: 149 }, end: { line: 29, column: 224 } }], line: 29 }, "4": { loc: { start: { line: 31, column: 46 }, end: { line: 31, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 31, column: 70 }, end: { line: 31, column: 73 } }, { start: { line: 31, column: 76 }, end: { line: 31, column: 92 } }], line: 31 }, "5": { loc: { start: { line: 31, column: 46 }, end: { line: 31, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 31, column: 46 }, end: { line: 31, column: 49 } }, { start: { line: 31, column: 53 }, end: { line: 31, column: 67 } }], line: 31 }, "6": { loc: { start: { line: 53, column: 2 }, end: { line: 88, column: 3 } }, type: "if", locations: [{ start: { line: 53, column: 2 }, end: { line: 88, column: 3 } }, { start: { line: 53, column: 2 }, end: { line: 88, column: 3 } }], line: 53 }, "7": { loc: { start: { line: 56, column: 9 }, end: { line: 88, column: 3 } }, type: "if", locations: [{ start: { line: 56, column: 9 }, end: { line: 88, column: 3 } }, { start: { line: 56, column: 9 }, end: { line: 88, column: 3 } }], line: 56 }, "8": { loc: { start: { line: 63, column: 4 }, end: { line: 82, column: 5 } }, type: "if", locations: [{ start: { line: 63, column: 4 }, end: { line: 82, column: 5 } }, { start: { line: 63, column: 4 }, end: { line: 82, column: 5 } }], line: 63 }, "9": { loc: { start: { line: 65, column: 11 }, end: { line: 82, column: 5 } }, type: "if", locations: [{ start: { line: 65, column: 11 }, end: { line: 82, column: 5 } }, { start: { line: 65, column: 11 }, end: { line: 82, column: 5 } }], line: 65 }, "10": { loc: { start: { line: 65, column: 15 }, end: { line: 65, column: 177 } }, type: "binary-expr", locations: [{ start: { line: 65, column: 16 }, end: { line: 65, column: 100 } }, { start: { line: 65, column: 106 }, end: { line: 65, column: 176 } }], line: 65 }, "11": { loc: { start: { line: 83, column: 9 }, end: { line: 88, column: 3 } }, type: "if", locations: [{ start: { line: 83, column: 9 }, end: { line: 88, column: 3 } }, { start: { line: 83, column: 9 }, end: { line: 88, column: 3 } }], line: 83 }, "12": { loc: { start: { line: 86, column: 9 }, end: { line: 88, column: 3 } }, type: "if", locations: [{ start: { line: 86, column: 9 }, end: { line: 88, column: 3 } }, { start: { line: 86, column: 9 }, end: { line: 88, column: 3 } }], line: 86 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0, 0], "7": [0, 0], "8": [0, 0], "9": [0, 0], "10": [0, 0], "11": [0, 0], "12": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/solidity/sagas/index.js"], names: ["addSource", "addSourceMap", "reset", "saga", "actions", "debug", "source", "sourcePath", "ast", "binary", "sourceMap", "tickSaga", "TICK", "functionDepthSaga", "solidity", "current", "willJump", "jumpDirection", "jump", "willCall", "callsPrecompile", "needsFunctionDepthWorkaround", "isContractCall", "willCreate", "willReturn"], mappings: ";;;;;QAWiBA,S,GAAAA,S;QAIAC,Y,GAAAA,Y;QAuDAC,K,GAAAA,K;QAIAC,I,GAAAA,I;;AA1EjB;;;;AAGA;;AACA;;AAEA;;IAAYC,O;;AACZ;;AAEA;;;;;;;;AARA,MAAMC,QAAQ,qBAAY,yBAAZ,CAAd;;AAUO,UAAUL,SAAV,CAAoBM,MAApB,EAA4BC,UAA5B,EAAwCC,GAAxC,EAA6C;AAClD,QAAM,kBAAIJ,QAAQJ,SAAR,CAAkBM,MAAlB,EAA0BC,UAA1B,EAAsCC,GAAtC,CAAJ,CAAN;AACD;;AAEM,UAAUP,YAAV,CAAuBQ,MAAvB,EAA+BC,SAA/B,EAA0C;AAC/C,QAAM,kBAAIN,QAAQH,YAAR,CAAqBQ,MAArB,EAA6BC,SAA7B,CAAJ,CAAN;AACD;;AAED,UAAUC,QAAV,GAAqB;AACnB,SAAO,IAAP,EAAa;AACX,UAAM,mBAAKC,cAAL,CAAN;AACAP,UAAM,UAAN;;AAEA,WAAOQ,mBAAP;AACD;AACF;;AAED,UAAUA,iBAAV,GAA8B;AAC5B,MAAI,MAAM,qBAAOC,oBAASC,OAAT,CAAiBC,QAAxB,CAAV,EAA6C;AAC3C,QAAIC,gBAAgB,MAAM,qBAAOH,oBAASC,OAAT,CAAiBE,aAAxB,CAA1B;AACA,UAAM,kBAAIb,QAAQc,IAAR,CAAaD,aAAb,CAAJ,CAAN;AACD,GAHD,MAGO,IAAI,MAAM,qBAAOH,oBAASC,OAAT,CAAiBI,QAAxB,CAAV,EAA6C;AAClD;AACA;AACA;AACA;;AAEAd,UAAM,eAAN;AACA,QAAI,MAAM,qBAAOS,oBAASC,OAAT,CAAiBK,eAAxB,CAAV,EAAoD;AAClD;AACD,KAFD,MAEO,IACL,CAAC,MAAM,qBAAON,oBAASC,OAAT,CAAiBM,4BAAxB,CAAP,MACC,MAAM,qBAAOP,oBAASC,OAAT,CAAiBO,cAAxB,CADP,CADK,EAGL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAjB,YAAM,qBAAN;AACA,YAAM,kBAAID,QAAQc,IAAR,CAAa,GAAb,CAAJ,CAAN;AACD,KAjBM,MAiBA;AACL;AACA,YAAM,kBAAId,QAAQc,IAAR,CAAa,GAAb,CAAJ,CAAN;AACD;AACF,GA9BM,MA8BA,IAAI,MAAM,qBAAOJ,oBAASC,OAAT,CAAiBQ,UAAxB,CAAV,EAA+C;AACpD;AACA,UAAM,kBAAInB,QAAQc,IAAR,CAAa,GAAb,CAAJ,CAAN;AACD,GAHM,MAGA,IAAI,MAAM,qBAAOJ,oBAASC,OAAT,CAAiBS,UAAxB,CAAV,EAA+C;AACpD,UAAM,kBAAIpB,QAAQc,IAAR,CAAa,GAAb,CAAJ,CAAN;AACD;AACF;;AAEM,UAAUhB,KAAV,GAAkB;AACvB,QAAM,kBAAIE,QAAQF,KAAR,EAAJ,CAAN;AACD;;AAEM,UAAUC,IAAV,GAAiB;AACtB,QAAM,mBAAKQ,QAAL,CAAN;AACD;;kBAEc,yBAAW,UAAX,EAAuBR,IAAvB,C", file: "index.js", sourceRoot: "/Users/tyler/projects/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:solidity:sagas\");\n\nimport { call, put, take, select } from \"redux-saga/effects\";\nimport { prefixName } from \"lib/helpers\";\n\nimport * as actions from \"../actions\";\nimport { TICK } from \"lib/trace/actions\";\n\nimport solidity from \"../selectors\";\n\nexport function* addSource(source, sourcePath, ast) {\n  yield put(actions.addSource(source, sourcePath, ast));\n}\n\nexport function* addSourceMap(binary, sourceMap) {\n  yield put(actions.addSourceMap(binary, sourceMap));\n}\n\nfunction* tickSaga() {\n  while (true) {\n    yield take(TICK);\n    debug(\"got TICK\");\n\n    yield* functionDepthSaga();\n  }\n}\n\nfunction* functionDepthSaga() {\n  if (yield select(solidity.current.willJump)) {\n    let jumpDirection = yield select(solidity.current.jumpDirection);\n    yield put(actions.jump(jumpDirection));\n  } else if (yield select(solidity.current.willCall)) {\n    //we have several cases here:\n    //1. precompile -- *don't* put any jump\n    //2. workaround case -- put a double jump (see below)\n    //3. general case -- put a single jump as expected\n\n    debug(\"about to call\");\n    if (yield select(solidity.current.callsPrecompile)) {\n      //call to precompile; do nothing\n    } else if (\n      (yield select(solidity.current.needsFunctionDepthWorkaround)) &&\n      (yield select(solidity.current.isContractCall))\n    ) {\n      //all these parentheses are necessary\n      //HACK WORKAROUND\n      //because of the problem in solc <0.5.1 where contract method calls\n      //essentially return twice, we compensate by putting *two* inward jumps\n      //for such a call.\n      //Note that this won't work if the contract method was previously placed\n      //in a function variable!  Those will continue to screw things up!  But\n      //if a contract call is being made directly, we can detect that.\n      //Of course, all of this should work fine as of solidity 0.5.1, with no\n      //workaround necessary; this branch should only get take on old\n      //contracts.\n      debug(\"workaround invoked!\");\n      yield put(actions.jump(\"2\"));\n    } else {\n      //an ordinary call, not to a precompile & with no workaround needed\n      yield put(actions.jump(\"i\"));\n    }\n  } else if (yield select(solidity.current.willCreate)) {\n    //this case, thankfully, needs no further breakdown\n    yield put(actions.jump(\"i\"));\n  } else if (yield select(solidity.current.willReturn)) {\n    yield put(actions.jump(\"o\"));\n  }\n}\n\nexport function* reset() {\n  yield put(actions.reset());\n}\n\nexport function* saga() {\n  yield call(tickSaga);\n}\n\nexport default prefixName(\"solidity\", saga);\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_8vmp5008r.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });cov_8vmp5008r.s[1]++;exports.addSource = addSource;cov_8vmp5008r.s[2]++;exports.addSourceMap = addSourceMap;cov_8vmp5008r.s[3]++;exports.reset = reset;cov_8vmp5008r.s[4]++;exports.saga = saga;var _debug = (cov_8vmp5008r.s[5]++, __webpack_require__(0));var _debug2 = (cov_8vmp5008r.s[6]++, _interopRequireDefault(_debug));var _effects = (cov_8vmp5008r.s[7]++, __webpack_require__(15));var _helpers = (cov_8vmp5008r.s[8]++, __webpack_require__(2));var _actions = (cov_8vmp5008r.s[9]++, __webpack_require__(37));var actions = (cov_8vmp5008r.s[10]++, _interopRequireWildcard(_actions));var _actions2 = (cov_8vmp5008r.s[11]++, __webpack_require__(19));var _selectors = (cov_8vmp5008r.s[12]++, __webpack_require__(3));var _selectors2 = (cov_8vmp5008r.s[13]++, _interopRequireDefault(_selectors));function _interopRequireWildcard(obj) {
  cov_8vmp5008r.f[0]++;cov_8vmp5008r.s[14]++;if ((cov_8vmp5008r.b[1][0]++, obj) && (cov_8vmp5008r.b[1][1]++, obj.__esModule)) {
    cov_8vmp5008r.b[0][0]++;cov_8vmp5008r.s[15]++;return obj;
  } else {
    cov_8vmp5008r.b[0][1]++;var newObj = (cov_8vmp5008r.s[16]++, {});cov_8vmp5008r.s[17]++;if (obj != null) {
      cov_8vmp5008r.b[2][0]++;cov_8vmp5008r.s[18]++;for (var key in obj) {
        cov_8vmp5008r.s[19]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_8vmp5008r.b[3][0]++;cov_8vmp5008r.s[20]++;newObj[key] = obj[key];
        } else {
          cov_8vmp5008r.b[3][1]++;
        }
      }
    } else {
      cov_8vmp5008r.b[2][1]++;
    }cov_8vmp5008r.s[21]++;newObj.default = obj;cov_8vmp5008r.s[22]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_8vmp5008r.f[1]++;cov_8vmp5008r.s[23]++;return (cov_8vmp5008r.b[5][0]++, obj) && (cov_8vmp5008r.b[5][1]++, obj.__esModule) ? (cov_8vmp5008r.b[4][0]++, obj) : (cov_8vmp5008r.b[4][1]++, { default: obj });
}const debug = (cov_8vmp5008r.s[24]++, (0, _debug2.default)("debugger:solidity:sagas"));function* addSource(source, sourcePath, ast) {
  cov_8vmp5008r.f[2]++;cov_8vmp5008r.s[25]++;yield (0, _effects.put)(actions.addSource(source, sourcePath, ast));
}function* addSourceMap(binary, sourceMap) {
  cov_8vmp5008r.f[3]++;cov_8vmp5008r.s[26]++;yield (0, _effects.put)(actions.addSourceMap(binary, sourceMap));
}function* tickSaga() {
  cov_8vmp5008r.f[4]++;cov_8vmp5008r.s[27]++;while (true) {
    cov_8vmp5008r.s[28]++;yield (0, _effects.take)(_actions2.TICK);cov_8vmp5008r.s[29]++;debug("got TICK");cov_8vmp5008r.s[30]++;yield* functionDepthSaga();
  }
}function* functionDepthSaga() {
  cov_8vmp5008r.f[5]++;cov_8vmp5008r.s[31]++;if (yield (0, _effects.select)(_selectors2.default.current.willJump)) {
    cov_8vmp5008r.b[6][0]++;let jumpDirection = (cov_8vmp5008r.s[32]++, yield (0, _effects.select)(_selectors2.default.current.jumpDirection));cov_8vmp5008r.s[33]++;yield (0, _effects.put)(actions.jump(jumpDirection));
  } else {
    cov_8vmp5008r.b[6][1]++;cov_8vmp5008r.s[34]++;if (yield (0, _effects.select)(_selectors2.default.current.willCall)) {
      cov_8vmp5008r.b[7][0]++;cov_8vmp5008r.s[35]++;debug("about to call");cov_8vmp5008r.s[36]++;if (yield (0, _effects.select)(_selectors2.default.current.callsPrecompile)) {
        cov_8vmp5008r.b[8][0]++;
      } else {
        cov_8vmp5008r.b[8][1]++;cov_8vmp5008r.s[37]++;if ((cov_8vmp5008r.b[10][0]++, yield (0, _effects.select)(_selectors2.default.current.needsFunctionDepthWorkaround)) && (cov_8vmp5008r.b[10][1]++, yield (0, _effects.select)(_selectors2.default.current.isContractCall))) {
          cov_8vmp5008r.b[9][0]++;cov_8vmp5008r.s[38]++;debug("workaround invoked!");cov_8vmp5008r.s[39]++;yield (0, _effects.put)(actions.jump("2"));
        } else {
          cov_8vmp5008r.b[9][1]++;cov_8vmp5008r.s[40]++;yield (0, _effects.put)(actions.jump("i"));
        }
      }
    } else {
      cov_8vmp5008r.b[7][1]++;cov_8vmp5008r.s[41]++;if (yield (0, _effects.select)(_selectors2.default.current.willCreate)) {
        cov_8vmp5008r.b[11][0]++;cov_8vmp5008r.s[42]++;yield (0, _effects.put)(actions.jump("i"));
      } else {
        cov_8vmp5008r.b[11][1]++;cov_8vmp5008r.s[43]++;if (yield (0, _effects.select)(_selectors2.default.current.willReturn)) {
          cov_8vmp5008r.b[12][0]++;cov_8vmp5008r.s[44]++;yield (0, _effects.put)(actions.jump("o"));
        } else {
          cov_8vmp5008r.b[12][1]++;
        }
      }
    }
  }
}function* reset() {
  cov_8vmp5008r.f[6]++;cov_8vmp5008r.s[45]++;yield (0, _effects.put)(actions.reset());
}function* saga() {
  cov_8vmp5008r.f[7]++;cov_8vmp5008r.s[46]++;yield (0, _effects.call)(tickSaga);
}cov_8vmp5008r.s[47]++;exports.default = (0, _helpers.prefixName)("solidity", saga);

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_1dyox53fkf = function () {
  var path = "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/solidity/actions/index.js",
      hash = "0b8a527219bbd2d5fe3881fbeebc49e88616b827",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/solidity/actions/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 6, column: 0 }, end: { line: 6, column: 30 } }, "2": { start: { line: 7, column: 0 }, end: { line: 7, column: 36 } }, "3": { start: { line: 8, column: 0 }, end: { line: 8, column: 20 } }, "4": { start: { line: 9, column: 0 }, end: { line: 9, column: 22 } }, "5": { start: { line: 10, column: 19 }, end: { line: 10, column: 61 } }, "6": { start: { line: 12, column: 2 }, end: { line: 17, column: 4 } }, "7": { start: { line: 20, column: 22 }, end: { line: 20, column: 70 } }, "8": { start: { line: 22, column: 2 }, end: { line: 26, column: 4 } }, "9": { start: { line: 29, column: 13 }, end: { line: 29, column: 34 } }, "10": { start: { line: 31, column: 2 }, end: { line: 34, column: 4 } }, "11": { start: { line: 37, column: 14 }, end: { line: 37, column: 46 } }, "12": { start: { line: 39, column: 2 }, end: { line: 39, column: 25 } } }, fnMap: { "0": { name: "addSource", decl: { start: { line: 11, column: 9 }, end: { line: 11, column: 18 } }, loc: { start: { line: 11, column: 44 }, end: { line: 18, column: 1 } }, line: 11 }, "1": { name: "addSourceMap", decl: { start: { line: 21, column: 9 }, end: { line: 21, column: 21 } }, loc: { start: { line: 21, column: 41 }, end: { line: 27, column: 1 } }, line: 21 }, "2": { name: "jump", decl: { start: { line: 30, column: 9 }, end: { line: 30, column: 13 } }, loc: { start: { line: 30, column: 29 }, end: { line: 35, column: 1 } }, line: 30 }, "3": { name: "reset", decl: { start: { line: 38, column: 9 }, end: { line: 38, column: 14 } }, loc: { start: { line: 38, column: 17 }, end: { line: 40, column: 1 } }, line: 38 } }, branchMap: {}, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0 }, b: {}, inputSourceMap: { version: 3, sources: ["lib/solidity/actions/index.js"], names: ["addSource", "addSourceMap", "jump", "reset", "ADD_SOURCE", "source", "sourcePath", "ast", "type", "ADD_SOURCEMAP", "binary", "sourceMap", "JUMP", "jumpDirection", "RESET"], mappings: ";;;;;QACgBA,S,GAAAA,S;QAUAC,Y,GAAAA,Y;QASAC,I,GAAAA,I;QAQAC,K,GAAAA,K;AA5BT,MAAMC,kCAAa,qBAAnB;AACA,SAASJ,SAAT,CAAmBK,MAAnB,EAA2BC,UAA3B,EAAuCC,GAAvC,EAA4C;AACjD,SAAO;AACLC,UAAMJ,UADD;AAELC,UAFK;AAGLC,cAHK;AAILC;AAJK,GAAP;AAMD;;AAEM,MAAME,wCAAgB,wBAAtB;AACA,SAASR,YAAT,CAAsBS,MAAtB,EAA8BC,SAA9B,EAAyC;AAC9C,SAAO;AACLH,UAAMC,aADD;AAELC,UAFK;AAGLC;AAHK,GAAP;AAKD;;AAEM,MAAMC,sBAAO,MAAb;AACA,SAASV,IAAT,CAAcW,aAAd,EAA6B;AAClC,SAAO;AACLL,UAAMI,IADD;AAELC;AAFK,GAAP;AAID;;AAEM,MAAMC,wBAAQ,gBAAd;AACA,SAASX,KAAT,GAAiB;AACtB,SAAO,EAAEK,MAAMM,KAAR,EAAP;AACD", file: "index.js", sourceRoot: "/Users/tyler/projects/truffle/packages/truffle-debugger", sourcesContent: ["export const ADD_SOURCE = \"SOLIDITY_ADD_SOURCE\";\nexport function addSource(source, sourcePath, ast) {\n  return {\n    type: ADD_SOURCE,\n    source,\n    sourcePath,\n    ast\n  };\n}\n\nexport const ADD_SOURCEMAP = \"SOLIDITY_ADD_SOURCEMAP\";\nexport function addSourceMap(binary, sourceMap) {\n  return {\n    type: ADD_SOURCEMAP,\n    binary,\n    sourceMap\n  };\n}\n\nexport const JUMP = \"JUMP\";\nexport function jump(jumpDirection) {\n  return {\n    type: JUMP,\n    jumpDirection\n  };\n}\n\nexport const RESET = \"SOLIDITY_RESET\";\nexport function reset() {\n  return { type: RESET };\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_1dyox53fkf.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });cov_1dyox53fkf.s[1]++;exports.addSource = addSource;cov_1dyox53fkf.s[2]++;exports.addSourceMap = addSourceMap;cov_1dyox53fkf.s[3]++;exports.jump = jump;cov_1dyox53fkf.s[4]++;exports.reset = reset;const ADD_SOURCE = (cov_1dyox53fkf.s[5]++, exports.ADD_SOURCE = "SOLIDITY_ADD_SOURCE");function addSource(source, sourcePath, ast) {
  cov_1dyox53fkf.f[0]++;cov_1dyox53fkf.s[6]++;return { type: ADD_SOURCE, source, sourcePath, ast };
}const ADD_SOURCEMAP = (cov_1dyox53fkf.s[7]++, exports.ADD_SOURCEMAP = "SOLIDITY_ADD_SOURCEMAP");function addSourceMap(binary, sourceMap) {
  cov_1dyox53fkf.f[1]++;cov_1dyox53fkf.s[8]++;return { type: ADD_SOURCEMAP, binary, sourceMap };
}const JUMP = (cov_1dyox53fkf.s[9]++, exports.JUMP = "JUMP");function jump(jumpDirection) {
  cov_1dyox53fkf.f[2]++;cov_1dyox53fkf.s[10]++;return { type: JUMP, jumpDirection };
}const RESET = (cov_1dyox53fkf.s[11]++, exports.RESET = "SOLIDITY_RESET");function reset() {
  cov_1dyox53fkf.f[3]++;cov_1dyox53fkf.s[12]++;return { type: RESET };
}

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_5jz9vuptx = function () {
  var path = "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/controller/selectors/index.js",
      hash = "f4fc491c6311842e03dda12adc89e20abd31be2a",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/controller/selectors/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 13 }, end: { line: 7, column: 29 } }, "2": { start: { line: 9, column: 14 }, end: { line: 9, column: 44 } }, "3": { start: { line: 11, column: 20 }, end: { line: 11, column: 44 } }, "4": { start: { line: 13, column: 17 }, end: { line: 13, column: 45 } }, "5": { start: { line: 15, column: 18 }, end: { line: 15, column: 52 } }, "6": { start: { line: 17, column: 18 }, end: { line: 17, column: 51 } }, "7": { start: { line: 19, column: 18 }, end: { line: 19, column: 53 } }, "8": { start: { line: 21, column: 18 }, end: { line: 21, column: 46 } }, "9": { start: { line: 23, column: 18 }, end: { line: 23, column: 53 } }, "10": { start: { line: 25, column: 18 }, end: { line: 25, column: 48 } }, "11": { start: { line: 27, column: 18 }, end: { line: 27, column: 53 } }, "12": { start: { line: 29, column: 39 }, end: { line: 29, column: 93 } }, "13": { start: { line: 31, column: 14 }, end: { line: 31, column: 63 } }, "14": { start: { line: 36, column: 17 }, end: { line: 36, column: 23 } }, "15": { start: { line: 36, column: 22 }, end: { line: 36, column: 23 } }, "16": { start: { line: 41, column: 19 }, end: { line: 102, column: 2 } }, "17": { start: { line: 46, column: 18 }, end: { line: 46, column: 34 } }, "18": { start: { line: 95, column: 67 }, end: { line: 95, column: 84 } }, "19": { start: { line: 104, column: 0 }, end: { line: 104, column: 29 } } }, fnMap: { "0": { name: "_interopRequireDefault", decl: { start: { line: 29, column: 9 }, end: { line: 29, column: 31 } }, loc: { start: { line: 29, column: 37 }, end: { line: 29, column: 95 } }, line: 29 }, "1": { name: "(anonymous_1)", decl: { start: { line: 36, column: 17 }, end: { line: 36, column: 18 } }, loc: { start: { line: 36, column: 22 }, end: { line: 36, column: 23 } }, line: 36 }, "2": { name: "(anonymous_2)", decl: { start: { line: 46, column: 9 }, end: { line: 46, column: 10 } }, loc: { start: { line: 46, column: 18 }, end: { line: 46, column: 34 } }, line: 46 }, "3": { name: "(anonymous_3)", decl: { start: { line: 95, column: 58 }, end: { line: 95, column: 59 } }, loc: { start: { line: 95, column: 67 }, end: { line: 95, column: 84 } }, line: 95 } }, branchMap: { "0": { loc: { start: { line: 29, column: 46 }, end: { line: 29, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 29, column: 70 }, end: { line: 29, column: 73 } }, { start: { line: 29, column: 76 }, end: { line: 29, column: 92 } }], line: 29 }, "1": { loc: { start: { line: 29, column: 46 }, end: { line: 29, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 29, column: 46 }, end: { line: 29, column: 49 } }, { start: { line: 29, column: 53 }, end: { line: 29, column: 67 } }], line: 29 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0 }, b: { "0": [0, 0], "1": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/controller/selectors/index.js"], names: ["debug", "identity", "x", "controller", "state", "current", "functionDepth", "solidity", "executionContext", "evm", "call", "willJump", "step", "isJump", "location", "sourceRange", "source", "node", "ast", "isMultiline", "breakpoints", "finished", "trace"], mappings: ";;;;;;AAAA;;;;AAGA;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAPA,MAAMA,QAAQ,qBAAY,2BAAZ,CAAd;;AASA;;;AAGA,MAAMC,WAAYC,CAAD,IAAOA,CAAxB;;AAEA;;;AAGA,MAAMC,aAAa,sCAAmB;;AAEpC;;;AAGAC,SAASA,KAAD,IAAWA,MAAMD,UALW;AAMpC;;;AAGAE,WAAS;AACP;;;AAGAC,mBAAe,8BAAW,CAACC,oBAASF,OAAT,CAAiBC,aAAlB,CAAX,EAA6CL,QAA7C,CAJR;;AAMP;;;AAGAO,sBAAkB,8BAAW,CAACC,oBAAIJ,OAAJ,CAAYK,IAAb,CAAX,EAA+BT,QAA/B,CATX;;AAWP;;;AAGAU,cAAU,8BAAW,CAACF,oBAAIJ,OAAJ,CAAYO,IAAZ,CAAiBC,MAAlB,CAAX,EAAsCZ,QAAtC,CAdH;;AAgBP;;;AAGAa,cAAU;AACR;;;AAGAC,mBAAa,8BAAW,CAACR,oBAASF,OAAT,CAAiBU,WAAlB,CAAX,EAA2Cd,QAA3C,CAJL;;AAMR;;;AAGAe,cAAQ,8BAAW,CAACT,oBAASF,OAAT,CAAiBW,MAAlB,CAAX,EAAsCf,QAAtC,CATA;;AAWR;;;AAGAgB,YAAM,8BAAW,CAACC,oBAAIb,OAAJ,CAAYY,IAAb,CAAX,EAA+BhB,QAA/B,CAdE;;AAgBR;;;AAGAkB,mBAAa,8BAAW,CAACZ,oBAASF,OAAT,CAAiBc,WAAlB,CAAX,EAA2ClB,QAA3C;AAnBL;AAnBH,GAT2B;;AAmDpC;;;AAGAmB,eAAa,8BAAW,CAAC,SAAD,CAAX,EAAyBhB,KAAD,IAAWA,MAAMgB,WAAzC,CAtDuB;;AAwDpC;;;AAGAC,YAAU,8BAAW,CAACC,oBAAMD,QAAP,CAAX,EAA6BpB,QAA7B;;AA3D0B,CAAnB,CAAnB;;kBA+DeE,U", file: "index.js", sourceRoot: "/Users/tyler/projects/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:controller:sagas\");\n\nimport { createSelectorTree, createLeaf } from \"reselect-tree\";\n\nimport evm from \"lib/evm/selectors\";\nimport solidity from \"lib/solidity/selectors\";\nimport ast from \"lib/ast/selectors\";\nimport trace from \"lib/trace/selectors\";\n\n/**\n * @private\n */\nconst identity = (x) => x;\n\n/**\n * controller\n */\nconst controller = createSelectorTree({\n\n  /**\n   * controller.state\n   */\n  state: ((state) => state.controller),\n  /**\n   * controller.current\n   */\n  current: {\n    /**\n     * controller.current.functionDepth\n     */\n    functionDepth: createLeaf([solidity.current.functionDepth], identity),\n\n    /**\n     * controller.current.executionContext\n     */\n    executionContext: createLeaf([evm.current.call], identity),\n\n    /**\n     * controller.current.willJump\n     */\n    willJump: createLeaf([evm.current.step.isJump], identity),\n\n    /**\n     * controller.current.location\n     */\n    location: {\n      /**\n       * controller.current.location.sourceRange\n       */\n      sourceRange: createLeaf([solidity.current.sourceRange], identity),\n\n      /**\n       * controller.current.location.source\n       */\n      source: createLeaf([solidity.current.source], identity),\n\n      /**\n       * controller.current.location.node\n       */\n      node: createLeaf([ast.current.node], identity),\n\n      /**\n       * controller.current.location.isMultiline\n       */\n      isMultiline: createLeaf([solidity.current.isMultiline], identity),\n    }\n  },\n\n  /**\n   * controller.breakpoints\n   */\n  breakpoints: createLeaf([\"./state\"], (state) => state.breakpoints),\n\n  /**\n   * controller.finished\n   */\n  finished: createLeaf([trace.finished], identity),\n\n});\n\nexport default controller;\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_5jz9vuptx.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _debug = (cov_5jz9vuptx.s[1]++, __webpack_require__(0));var _debug2 = (cov_5jz9vuptx.s[2]++, _interopRequireDefault(_debug));var _reselectTree = (cov_5jz9vuptx.s[3]++, __webpack_require__(13));var _selectors = (cov_5jz9vuptx.s[4]++, __webpack_require__(10));var _selectors2 = (cov_5jz9vuptx.s[5]++, _interopRequireDefault(_selectors));var _selectors3 = (cov_5jz9vuptx.s[6]++, __webpack_require__(3));var _selectors4 = (cov_5jz9vuptx.s[7]++, _interopRequireDefault(_selectors3));var _selectors5 = (cov_5jz9vuptx.s[8]++, __webpack_require__(18));var _selectors6 = (cov_5jz9vuptx.s[9]++, _interopRequireDefault(_selectors5));var _selectors7 = (cov_5jz9vuptx.s[10]++, __webpack_require__(11));var _selectors8 = (cov_5jz9vuptx.s[11]++, _interopRequireDefault(_selectors7));function _interopRequireDefault(obj) {
  cov_5jz9vuptx.f[0]++;cov_5jz9vuptx.s[12]++;return (cov_5jz9vuptx.b[1][0]++, obj) && (cov_5jz9vuptx.b[1][1]++, obj.__esModule) ? (cov_5jz9vuptx.b[0][0]++, obj) : (cov_5jz9vuptx.b[0][1]++, { default: obj });
}const debug = (cov_5jz9vuptx.s[13]++, (0, _debug2.default)("debugger:controller:sagas"));cov_5jz9vuptx.s[14]++;const identity = x => {
  cov_5jz9vuptx.f[1]++;cov_5jz9vuptx.s[15]++;return x;
};const controller = (cov_5jz9vuptx.s[16]++, (0, _reselectTree.createSelectorTree)({ state: state => {
    cov_5jz9vuptx.f[2]++;cov_5jz9vuptx.s[17]++;return state.controller;
  }, current: { functionDepth: (0, _reselectTree.createLeaf)([_selectors4.default.current.functionDepth], identity), executionContext: (0, _reselectTree.createLeaf)([_selectors2.default.current.call], identity), willJump: (0, _reselectTree.createLeaf)([_selectors2.default.current.step.isJump], identity), location: { sourceRange: (0, _reselectTree.createLeaf)([_selectors4.default.current.sourceRange], identity), source: (0, _reselectTree.createLeaf)([_selectors4.default.current.source], identity), node: (0, _reselectTree.createLeaf)([_selectors6.default.current.node], identity), isMultiline: (0, _reselectTree.createLeaf)([_selectors4.default.current.isMultiline], identity) } }, breakpoints: (0, _reselectTree.createLeaf)(["./state"], state => {
    cov_5jz9vuptx.f[3]++;cov_5jz9vuptx.s[18]++;return state.breakpoints;
  }), finished: (0, _reselectTree.createLeaf)([_selectors8.default.finished], identity) }));cov_5jz9vuptx.s[19]++;exports.default = controller;

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _entries = __webpack_require__(8);

var _entries2 = _interopRequireDefault(_entries);

var _assign = __webpack_require__(9);

var _assign2 = _interopRequireDefault(_assign);

var _values = __webpack_require__(26);

var _values2 = _interopRequireDefault(_values);

var _asyncToGenerator2 = __webpack_require__(1);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

let prepareDebugger = (() => {
  var _ref3 = (0, _asyncToGenerator3.default)(function* (testName, sources) {
    const provider = _ganacheCore2.default.provider({ seed: "debugger", gasLimit: 7000000 });

    let { abstractions, artifacts: contracts, files } = yield (0, _helpers.prepareContracts)(provider, sources);

    let instance = yield abstractions[contractName(testName)].deployed();
    let receipt = yield instance.run();
    let txHash = receipt.tx;

    let bugger = yield _debugger2.default.forTx(txHash, { provider, files, contracts });

    let session = bugger.connect();

    let source = sources[fileName(testName)];

    //we'll need the debugger-internal ID of this source
    let debuggerSources = session.view(_selectors2.default.info.sources);
    let matchingSources = (0, _values2.default)(debuggerSources).filter(function (sourceObject) {
      return sourceObject.sourcePath.includes(contractName(testName));
    });
    let sourceId = matchingSources[0].id;

    let breakpoint = {
      sourceId,
      line: lastStatementLine(source)
    };

    session.addBreakpoint(breakpoint);

    session.continueUntilBreakpoint();

    return session;
  });

  return function prepareDebugger(_x, _x2) {
    return _ref3.apply(this, arguments);
  };
})();

let decode = (() => {
  var _ref4 = (0, _asyncToGenerator3.default)(function* (name) {
    let result = yield this.session.variable(name);

    if (Array.isArray(result)) {
      result = result.map(function (element) {
        if (_bn2.default.isBN(element)) {
          // We're assuming these tests have small numbers
          return element.toNumber();
        } else if (typeof element.toString === "function") {
          return element.toString();
        } else {
          return element;
        }
      });
    } else if (typeof result === "object") {
      switch (result.type) {
        case "mapping":
          {
            result = (0, _assign2.default)({}, ...(0, _entries2.default)(result.members).map(function ([key, value]) {
              if (_bn2.default.isBN(value)) {
                // We're assuming these tests have small numbers
                value = value.toNumber();
              } else if (typeof value.toString === "function") {
                value = value.toString();
              }

              return {
                [key]: value
              };
            }));
            break;
          }
      }
    }

    return result;
  });

  return function decode(_x3) {
    return _ref4.apply(this, arguments);
  };
})();

exports.generateUints = generateUints;
exports.describeDecoding = describeDecoding;

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _ganacheCore = __webpack_require__(6);

var _ganacheCore2 = _interopRequireDefault(_ganacheCore);

var _chai = __webpack_require__(4);

var _changeCase = __webpack_require__(85);

var _changeCase2 = _interopRequireDefault(_changeCase);

var _bn = __webpack_require__(40);

var _bn2 = _interopRequireDefault(_bn);

var _helpers = __webpack_require__(5);

var _debugger = __webpack_require__(7);

var _debugger2 = _interopRequireDefault(_debugger);

var _selectors = __webpack_require__(3);

var _selectors2 = _interopRequireDefault(_selectors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("test:data:decode");

function* generateUints() {
  let x = 0;
  while (true) {
    yield x;
    x++;
  }
}

function contractName(testName) {
  return testName.replace(/ /g, "");
}

function fileName(testName) {
  return `${contractName(testName)}.sol`;
}

function generateTests(fixtures) {
  var _this = this;

  for (let _ref of fixtures) {
    let { name, value: expected } = _ref;

    it(`correctly decodes ${name}`, (0, _asyncToGenerator3.default)(function* () {
      const response = yield _this.decode(name);
      _chai.assert.deepEqual(response, expected);
    }));
  }
}

function lastStatementLine(source) {
  const lines = source.split("\n");
  for (let i = lines.length - 1; i >= 0; i--) {
    let line = lines[i];
    if (line.indexOf(";") != -1) {
      return i;
    }
  }
}

function describeDecoding(testName, fixtures, selector, generateSource) {
  const sources = {
    [fileName(testName)]: generateSource(contractName(testName), fixtures)
  };

  describe(testName, function () {
    var _this2 = this;

    const testDebug = (0, _debug2.default)(`test:data:decode:${_changeCase2.default.paramCase(testName)}`);

    testDebug("source %s", (0, _values2.default)(sources)[0]);

    this.timeout(30000);

    before("runs and observes debugger", (0, _asyncToGenerator3.default)(function* () {
      _this2.session = yield prepareDebugger(testName, sources);
      _this2.decode = decode;

      if (selector) {
        debug("selector %O", _this2.session.view(selector));
      }
    }));

    generateTests.bind(this)(fixtures);
  });
}

/***/ }),
/* 40 */
/***/ (function(module, exports) {

module.exports = require("bn.js");

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

// runtime helper
function inManifest(id) { return global.__webpackManifest__.indexOf(id) >= 0;}
function run(id) { __webpack_require__(id);}

// modules to execute goes here
var ids = [
/*require.resolve*/(42),/*require.resolve*/(81),/*require.resolve*/(82),/*require.resolve*/(39),/*require.resolve*/(86),/*require.resolve*/(87),/*require.resolve*/(88),/*require.resolve*/(89),/*require.resolve*/(5),/*require.resolve*/(90),/*require.resolve*/(91),/*require.resolve*/(92)
];

ids.filter(inManifest).forEach(run)

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _asyncToGenerator2 = __webpack_require__(1);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _chai = __webpack_require__(4);

var _ganacheCore = __webpack_require__(6);

var _ganacheCore2 = _interopRequireDefault(_ganacheCore);

var _helpers = __webpack_require__(5);

var _debugger = __webpack_require__(7);

var _debugger2 = _interopRequireDefault(_debugger);

var _selectors = __webpack_require__(18);

var _selectors2 = _interopRequireDefault(_selectors);

var _selectors3 = __webpack_require__(3);

var _selectors4 = _interopRequireDefault(_selectors3);

var _selectors5 = __webpack_require__(11);

var _selectors6 = _interopRequireDefault(_selectors5);

var _map = __webpack_require__(28);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("test:ast");

const __VARIABLES = `
pragma solidity ~0.5;

contract Variables {
  event Result(uint256 result);

  uint256 qux;
  string quux;

  function stack(uint256 foo) public returns (uint256) {
    uint256 bar = foo + 1;
    uint256 baz = innerStack(bar);

    baz += 4;

    qux = baz;

    emit Result(baz);

    return baz;
  }

  function innerStack(uint256 baz) public returns (uint256) {
    uint256 bar = baz + 2;
    return bar;
  }
}
`;

let sources = {
  "Variables.sol": __VARIABLES
};

describe("AST", function () {
  var provider;

  var abstractions;
  var artifacts;
  var files;

  before("Create Provider", (0, _asyncToGenerator3.default)(function* () {
    provider = _ganacheCore2.default.provider({ seed: "debugger", gasLimit: 7000000 });
  }));

  before("Prepare contracts and artifacts", (0, _asyncToGenerator3.default)(function* () {
    this.timeout(30000);

    let prepared = yield (0, _helpers.prepareContracts)(provider, sources);
    abstractions = prepared.abstractions;
    artifacts = prepared.artifacts;
    files = prepared.files;
  }));

  describe("Node pointer", function () {
    it("traverses", (0, _asyncToGenerator3.default)(function* () {
      this.timeout(0);
      let instance = yield abstractions.Variables.deployed();
      let receipt = yield instance.stack(4);
      let txHash = receipt.tx;

      let bugger = yield _debugger2.default.forTx(txHash, {
        provider,
        files,
        contracts: artifacts
      });

      let session = bugger.connect();
      debug("ast: %O", session.view(_selectors2.default.current.tree));

      do {
        let { start, length } = session.view(_selectors4.default.current.sourceRange);
        let end = start + length;

        let node = session.view(_selectors2.default.current.node);

        let [nodeStart, nodeLength] = (0, _map.getRange)(node);
        let nodeEnd = nodeStart + nodeLength;

        let pointer = session.view(_selectors2.default.current.pointer);

        _chai.assert.isAtMost(nodeStart, start, `Node ${pointer} at should not begin after instruction source range`);
        _chai.assert.isAtLeast(nodeEnd, end, `Node ${pointer} should not end after source`);

        session.stepNext();
      } while (!session.view(_selectors6.default.finished));
    }));
  });
});

/***/ }),
/* 43 */
/***/ (function(module, exports) {

module.exports = require("path");

/***/ }),
/* 44 */
/***/ (function(module, exports) {

module.exports = require("fs-extra");

/***/ }),
/* 45 */
/***/ (function(module, exports) {

module.exports = require("truffle-workflow-compile");

/***/ }),
/* 46 */
/***/ (function(module, exports) {

module.exports = require("truffle-debug-utils");

/***/ }),
/* 47 */
/***/ (function(module, exports) {

module.exports = require("truffle-artifactor");

/***/ }),
/* 48 */
/***/ (function(module, exports) {

module.exports = require("truffle-migrate");

/***/ }),
/* 49 */
/***/ (function(module, exports) {

module.exports = require("truffle-box");

/***/ }),
/* 50 */
/***/ (function(module, exports) {

module.exports = require("truffle-resolver");

/***/ }),
/* 51 */
/***/ (function(module, exports) {

module.exports = require("truffle-expect");

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_2mk3gwf2gn = function () {
  var path = "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/session/index.js",
      hash = "580f30e2d8ed8611e9c23f7d97ed7e2b737120df",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/session/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 25 }, end: { line: 7, column: 74 } }, "2": { start: { line: 9, column: 25 }, end: { line: 9, column: 67 } }, "3": { start: { line: 11, column: 14 }, end: { line: 11, column: 60 } }, "4": { start: { line: 13, column: 15 }, end: { line: 13, column: 46 } }, "5": { start: { line: 15, column: 15 }, end: { line: 15, column: 55 } }, "6": { start: { line: 17, column: 16 }, end: { line: 17, column: 48 } }, "7": { start: { line: 19, column: 13 }, end: { line: 19, column: 29 } }, "8": { start: { line: 21, column: 14 }, end: { line: 21, column: 44 } }, "9": { start: { line: 23, column: 13 }, end: { line: 23, column: 33 } }, "10": { start: { line: 25, column: 14 }, end: { line: 25, column: 44 } }, "11": { start: { line: 27, column: 15 }, end: { line: 27, column: 48 } }, "12": { start: { line: 29, column: 17 }, end: { line: 29, column: 50 } }, "13": { start: { line: 31, column: 16 }, end: { line: 31, column: 36 } }, "14": { start: { line: 33, column: 14 }, end: { line: 33, column: 48 } }, "15": { start: { line: 35, column: 17 }, end: { line: 35, column: 46 } }, "16": { start: { line: 37, column: 18 }, end: { line: 37, column: 52 } }, "17": { start: { line: 39, column: 13 }, end: { line: 39, column: 31 } }, "18": { start: { line: 41, column: 14 }, end: { line: 41, column: 44 } }, "19": { start: { line: 43, column: 16 }, end: { line: 43, column: 37 } }, "20": { start: { line: 45, column: 17 }, end: { line: 45, column: 50 } }, "21": { start: { line: 47, column: 40 }, end: { line: 47, column: 267 } }, "22": { start: { line: 47, column: 69 }, end: { line: 47, column: 80 } }, "23": { start: { line: 47, column: 103 }, end: { line: 47, column: 105 } }, "24": { start: { line: 47, column: 107 }, end: { line: 47, column: 228 } }, "25": { start: { line: 47, column: 126 }, end: { line: 47, column: 226 } }, "26": { start: { line: 47, column: 149 }, end: { line: 47, column: 224 } }, "27": { start: { line: 47, column: 201 }, end: { line: 47, column: 224 } }, "28": { start: { line: 47, column: 229 }, end: { line: 47, column: 250 } }, "29": { start: { line: 47, column: 251 }, end: { line: 47, column: 265 } }, "30": { start: { line: 49, column: 39 }, end: { line: 49, column: 93 } }, "31": { start: { line: 51, column: 14 }, end: { line: 51, column: 54 } }, "32": { start: { line: 68, column: 4 }, end: { line: 68, column: 76 } }, "33": { start: { line: 70, column: 32 }, end: { line: 70, column: 67 } }, "34": { start: { line: 73, column: 4 }, end: { line: 73, column: 69 } }, "35": { start: { line: 75, column: 4 }, end: { line: 75, column: 58 } }, "36": { start: { line: 79, column: 4 }, end: { line: 87, column: 7 } }, "37": { start: { line: 80, column: 6 }, end: { line: 86, column: 9 } }, "38": { start: { line: 81, column: 8 }, end: { line: 85, column: 9 } }, "39": { start: { line: 82, column: 10 }, end: { line: 82, column: 19 } }, "40": { start: { line: 83, column: 15 }, end: { line: 85, column: 9 } }, "41": { start: { line: 84, column: 10 }, end: { line: 84, column: 50 } }, "42": { start: { line: 103, column: 24 }, end: { line: 103, column: 26 } }, "43": { start: { line: 104, column: 19 }, end: { line: 104, column: 21 } }, "44": { start: { line: 107, column: 4 }, end: { line: 141, column: 5 } }, "45": { start: { line: 118, column: 10 }, end: { line: 118, column: 18 } }, "46": { start: { line: 120, column: 6 }, end: { line: 120, column: 39 } }, "47": { start: { line: 121, column: 6 }, end: { line: 121, column: 37 } }, "48": { start: { line: 123, column: 6 }, end: { line: 123, column: 62 } }, "49": { start: { line: 125, column: 6 }, end: { line: 131, column: 7 } }, "50": { start: { line: 126, column: 8 }, end: { line: 130, column: 11 } }, "51": { start: { line: 133, column: 6 }, end: { line: 140, column: 7 } }, "52": { start: { line: 134, column: 8 }, end: { line: 139, column: 11 } }, "53": { start: { line: 143, column: 4 }, end: { line: 147, column: 5 } }, "54": { start: { line: 144, column: 6 }, end: { line: 144, column: 53 } }, "55": { start: { line: 146, column: 6 }, end: { line: 146, column: 55 } }, "56": { start: { line: 146, column: 34 }, end: { line: 146, column: 53 } }, "57": { start: { line: 149, column: 4 }, end: { line: 149, column: 33 } }, "58": { start: { line: 153, column: 4 }, end: { line: 153, column: 34 } }, "59": { start: { line: 157, column: 4 }, end: { line: 157, column: 32 } }, "60": { start: { line: 161, column: 4 }, end: { line: 161, column: 33 } }, "61": { start: { line: 163, column: 4 }, end: { line: 163, column: 16 } }, "62": { start: { line: 167, column: 4 }, end: { line: 167, column: 49 } }, "63": { start: { line: 171, column: 4 }, end: { line: 171, column: 47 } }, "64": { start: { line: 175, column: 4 }, end: { line: 175, column: 48 } }, "65": { start: { line: 179, column: 4 }, end: { line: 179, column: 48 } }, "66": { start: { line: 183, column: 4 }, end: { line: 183, column: 48 } }, "67": { start: { line: 187, column: 4 }, end: { line: 187, column: 47 } }, "68": { start: { line: 191, column: 4 }, end: { line: 191, column: 45 } }, "69": { start: { line: 195, column: 4 }, end: { line: 195, column: 63 } }, "70": { start: { line: 199, column: 4 }, end: { line: 199, column: 63 } }, "71": { start: { line: 203, column: 4 }, end: { line: 203, column: 66 } }, "72": { start: { line: 207, column: 4 }, end: { line: 207, column: 60 } }, "73": { start: { line: 211, column: 16 }, end: { line: 211, column: 20 } }, "74": { start: { line: 213, column: 4 }, end: { line: 238, column: 9 } }, "75": { start: { line: 214, column: 6 }, end: { line: 237, column: 9 } }, "76": { start: { line: 215, column: 27 }, end: { line: 215, column: 32 } }, "77": { start: { line: 216, column: 28 }, end: { line: 226, column: 10 } }, "78": { start: { line: 217, column: 46 }, end: { line: 217, column: 102 } }, "79": { start: { line: 219, column: 10 }, end: { line: 219, column: 79 } }, "80": { start: { line: 221, column: 10 }, end: { line: 225, column: 11 } }, "81": { start: { line: 222, column: 12 }, end: { line: 222, column: 32 } }, "82": { start: { line: 223, column: 12 }, end: { line: 223, column: 26 } }, "83": { start: { line: 224, column: 12 }, end: { line: 224, column: 22 } }, "84": { start: { line: 228, column: 32 }, end: { line: 228, column: 88 } }, "85": { start: { line: 230, column: 8 }, end: { line: 230, column: 63 } }, "86": { start: { line: 232, column: 8 }, end: { line: 236, column: 9 } }, "87": { start: { line: 233, column: 10 }, end: { line: 233, column: 30 } }, "88": { start: { line: 234, column: 10 }, end: { line: 234, column: 24 } }, "89": { start: { line: 235, column: 10 }, end: { line: 235, column: 20 } }, "90": { start: { line: 242, column: 17 }, end: { line: 242, column: 21 } }, "91": { start: { line: 244, column: 4 }, end: { line: 252, column: 9 } }, "92": { start: { line: 245, column: 6 }, end: { line: 245, column: 33 } }, "93": { start: { line: 247, column: 26 }, end: { line: 247, column: 90 } }, "94": { start: { line: 248, column: 19 }, end: { line: 248, column: 76 } }, "95": { start: { line: 250, column: 21 }, end: { line: 250, column: 67 } }, "96": { start: { line: 251, column: 6 }, end: { line: 251, column: 57 } }, "97": { start: { line: 256, column: 17 }, end: { line: 256, column: 21 } }, "98": { start: { line: 258, column: 4 }, end: { line: 262, column: 9 } }, "99": { start: { line: 259, column: 6 }, end: { line: 259, column: 33 } }, "100": { start: { line: 261, column: 6 }, end: { line: 261, column: 80 } }, "101": { start: { line: 265, column: 0 }, end: { line: 265, column: 26 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 47, column: 9 }, end: { line: 47, column: 32 } }, loc: { start: { line: 47, column: 38 }, end: { line: 47, column: 269 } }, line: 47 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 49, column: 9 }, end: { line: 49, column: 31 } }, loc: { start: { line: 49, column: 37 }, end: { line: 49, column: 95 } }, line: 49 }, "2": { name: "(anonymous_2)", decl: { start: { line: 64, column: 2 }, end: { line: 64, column: 3 } }, loc: { start: { line: 64, column: 50 }, end: { line: 76, column: 3 } }, line: 64 }, "3": { name: "(anonymous_3)", decl: { start: { line: 78, column: 2 }, end: { line: 78, column: 3 } }, loc: { start: { line: 78, column: 10 }, end: { line: 88, column: 3 } }, line: 78 }, "4": { name: "(anonymous_4)", decl: { start: { line: 79, column: 33 }, end: { line: 79, column: 34 } }, loc: { start: { line: 79, column: 53 }, end: { line: 87, column: 5 } }, line: 79 }, "5": { name: "(anonymous_5)", decl: { start: { line: 80, column: 28 }, end: { line: 80, column: 29 } }, loc: { start: { line: 80, column: 34 }, end: { line: 86, column: 7 } }, line: 80 }, "6": { name: "(anonymous_6)", decl: { start: { line: 102, column: 2 }, end: { line: 102, column: 3 } }, loc: { start: { line: 102, column: 44 }, end: { line: 150, column: 3 } }, line: 102 }, "7": { name: "(anonymous_7)", decl: { start: { line: 146, column: 26 }, end: { line: 146, column: 27 } }, loc: { start: { line: 146, column: 34 }, end: { line: 146, column: 53 } }, line: 146 }, "8": { name: "(anonymous_8)", decl: { start: { line: 152, column: 2 }, end: { line: 152, column: 3 } }, loc: { start: { line: 152, column: 14 }, end: { line: 154, column: 3 } }, line: 152 }, "9": { name: "(anonymous_9)", decl: { start: { line: 156, column: 2 }, end: { line: 156, column: 3 } }, loc: { start: { line: 156, column: 17 }, end: { line: 158, column: 3 } }, line: 156 }, "10": { name: "(anonymous_10)", decl: { start: { line: 160, column: 2 }, end: { line: 160, column: 3 } }, loc: { start: { line: 160, column: 19 }, end: { line: 164, column: 3 } }, line: 160 }, "11": { name: "(anonymous_11)", decl: { start: { line: 166, column: 2 }, end: { line: 166, column: 3 } }, loc: { start: { line: 166, column: 14 }, end: { line: 168, column: 3 } }, line: 166 }, "12": { name: "(anonymous_12)", decl: { start: { line: 170, column: 2 }, end: { line: 170, column: 3 } }, loc: { start: { line: 170, column: 12 }, end: { line: 172, column: 3 } }, line: 170 }, "13": { name: "(anonymous_13)", decl: { start: { line: 174, column: 2 }, end: { line: 174, column: 3 } }, loc: { start: { line: 174, column: 13 }, end: { line: 176, column: 3 } }, line: 174 }, "14": { name: "(anonymous_14)", decl: { start: { line: 178, column: 2 }, end: { line: 178, column: 3 } }, loc: { start: { line: 178, column: 13 }, end: { line: 180, column: 3 } }, line: 178 }, "15": { name: "(anonymous_15)", decl: { start: { line: 182, column: 2 }, end: { line: 182, column: 3 } }, loc: { start: { line: 182, column: 13 }, end: { line: 184, column: 3 } }, line: 182 }, "16": { name: "(anonymous_16)", decl: { start: { line: 186, column: 2 }, end: { line: 186, column: 3 } }, loc: { start: { line: 186, column: 12 }, end: { line: 188, column: 3 } }, line: 186 }, "17": { name: "(anonymous_17)", decl: { start: { line: 190, column: 2 }, end: { line: 190, column: 3 } }, loc: { start: { line: 190, column: 10 }, end: { line: 192, column: 3 } }, line: 190 }, "18": { name: "(anonymous_18)", decl: { start: { line: 194, column: 2 }, end: { line: 194, column: 3 } }, loc: { start: { line: 194, column: 28 }, end: { line: 196, column: 3 } }, line: 194 }, "19": { name: "(anonymous_19)", decl: { start: { line: 198, column: 2 }, end: { line: 198, column: 3 } }, loc: { start: { line: 198, column: 28 }, end: { line: 200, column: 3 } }, line: 198 }, "20": { name: "(anonymous_20)", decl: { start: { line: 202, column: 2 }, end: { line: 202, column: 3 } }, loc: { start: { line: 202, column: 31 }, end: { line: 204, column: 3 } }, line: 202 }, "21": { name: "(anonymous_21)", decl: { start: { line: 206, column: 2 }, end: { line: 206, column: 3 } }, loc: { start: { line: 206, column: 25 }, end: { line: 208, column: 3 } }, line: 206 }, "22": { name: "(anonymous_22)", decl: { start: { line: 210, column: 2 }, end: { line: 210, column: 3 } }, loc: { start: { line: 210, column: 16 }, end: { line: 239, column: 3 } }, line: 210 }, "23": { name: "(anonymous_23)", decl: { start: { line: 213, column: 43 }, end: { line: 213, column: 44 } }, loc: { start: { line: 213, column: 56 }, end: { line: 238, column: 5 } }, line: 213 }, "24": { name: "(anonymous_24)", decl: { start: { line: 214, column: 35 }, end: { line: 214, column: 36 } }, loc: { start: { line: 214, column: 54 }, end: { line: 237, column: 7 } }, line: 214 }, "25": { name: "(anonymous_25)", decl: { start: { line: 216, column: 51 }, end: { line: 216, column: 52 } }, loc: { start: { line: 216, column: 63 }, end: { line: 226, column: 9 } }, line: 216 }, "26": { name: "(anonymous_26)", decl: { start: { line: 241, column: 2 }, end: { line: 241, column: 3 } }, loc: { start: { line: 241, column: 17 }, end: { line: 253, column: 3 } }, line: 241 }, "27": { name: "(anonymous_27)", decl: { start: { line: 244, column: 43 }, end: { line: 244, column: 44 } }, loc: { start: { line: 244, column: 56 }, end: { line: 252, column: 5 } }, line: 244 }, "28": { name: "(anonymous_28)", decl: { start: { line: 255, column: 2 }, end: { line: 255, column: 3 } }, loc: { start: { line: 255, column: 14 }, end: { line: 263, column: 3 } }, line: 255 }, "29": { name: "(anonymous_29)", decl: { start: { line: 258, column: 43 }, end: { line: 258, column: 44 } }, loc: { start: { line: 258, column: 56 }, end: { line: 262, column: 5 } }, line: 258 } }, branchMap: { "0": { loc: { start: { line: 47, column: 40 }, end: { line: 47, column: 267 } }, type: "if", locations: [{ start: { line: 47, column: 40 }, end: { line: 47, column: 267 } }, { start: { line: 47, column: 40 }, end: { line: 47, column: 267 } }], line: 47 }, "1": { loc: { start: { line: 47, column: 44 }, end: { line: 47, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 47, column: 44 }, end: { line: 47, column: 47 } }, { start: { line: 47, column: 51 }, end: { line: 47, column: 65 } }], line: 47 }, "2": { loc: { start: { line: 47, column: 107 }, end: { line: 47, column: 228 } }, type: "if", locations: [{ start: { line: 47, column: 107 }, end: { line: 47, column: 228 } }, { start: { line: 47, column: 107 }, end: { line: 47, column: 228 } }], line: 47 }, "3": { loc: { start: { line: 47, column: 149 }, end: { line: 47, column: 224 } }, type: "if", locations: [{ start: { line: 47, column: 149 }, end: { line: 47, column: 224 } }, { start: { line: 47, column: 149 }, end: { line: 47, column: 224 } }], line: 47 }, "4": { loc: { start: { line: 49, column: 46 }, end: { line: 49, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 49, column: 70 }, end: { line: 49, column: 73 } }, { start: { line: 49, column: 76 }, end: { line: 49, column: 92 } }], line: 49 }, "5": { loc: { start: { line: 49, column: 46 }, end: { line: 49, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 49, column: 46 }, end: { line: 49, column: 49 } }, { start: { line: 49, column: 53 }, end: { line: 49, column: 67 } }], line: 49 }, "6": { loc: { start: { line: 81, column: 8 }, end: { line: 85, column: 9 } }, type: "if", locations: [{ start: { line: 81, column: 8 }, end: { line: 85, column: 9 } }, { start: { line: 81, column: 8 }, end: { line: 85, column: 9 } }], line: 81 }, "7": { loc: { start: { line: 83, column: 15 }, end: { line: 85, column: 9 } }, type: "if", locations: [{ start: { line: 83, column: 15 }, end: { line: 85, column: 9 } }, { start: { line: 83, column: 15 }, end: { line: 85, column: 9 } }], line: 83 }, "8": { loc: { start: { line: 102, column: 30 }, end: { line: 102, column: 42 } }, type: "default-arg", locations: [{ start: { line: 102, column: 38 }, end: { line: 102, column: 42 } }], line: 102 }, "9": { loc: { start: { line: 125, column: 6 }, end: { line: 131, column: 7 } }, type: "if", locations: [{ start: { line: 125, column: 6 }, end: { line: 131, column: 7 } }, { start: { line: 125, column: 6 }, end: { line: 131, column: 7 } }], line: 125 }, "10": { loc: { start: { line: 125, column: 10 }, end: { line: 125, column: 34 } }, type: "binary-expr", locations: [{ start: { line: 125, column: 10 }, end: { line: 125, column: 16 } }, { start: { line: 125, column: 20 }, end: { line: 125, column: 34 } }], line: 125 }, "11": { loc: { start: { line: 133, column: 6 }, end: { line: 140, column: 7 } }, type: "if", locations: [{ start: { line: 133, column: 6 }, end: { line: 140, column: 7 } }, { start: { line: 133, column: 6 }, end: { line: 140, column: 7 } }], line: 133 }, "12": { loc: { start: { line: 133, column: 10 }, end: { line: 133, column: 50 } }, type: "binary-expr", locations: [{ start: { line: 133, column: 10 }, end: { line: 133, column: 24 } }, { start: { line: 133, column: 28 }, end: { line: 133, column: 50 } }], line: 133 }, "13": { loc: { start: { line: 143, column: 4 }, end: { line: 147, column: 5 } }, type: "if", locations: [{ start: { line: 143, column: 4 }, end: { line: 147, column: 5 } }, { start: { line: 143, column: 4 }, end: { line: 147, column: 5 } }], line: 143 }, "14": { loc: { start: { line: 221, column: 10 }, end: { line: 225, column: 11 } }, type: "if", locations: [{ start: { line: 221, column: 10 }, end: { line: 225, column: 11 } }, { start: { line: 221, column: 10 }, end: { line: 225, column: 11 } }], line: 221 }, "15": { loc: { start: { line: 221, column: 14 }, end: { line: 221, column: 63 } }, type: "binary-expr", locations: [{ start: { line: 221, column: 14 }, end: { line: 221, column: 46 } }, { start: { line: 221, column: 50 }, end: { line: 221, column: 63 } }], line: 221 }, "16": { loc: { start: { line: 232, column: 8 }, end: { line: 236, column: 9 } }, type: "if", locations: [{ start: { line: 232, column: 8 }, end: { line: 236, column: 9 } }, { start: { line: 232, column: 8 }, end: { line: 236, column: 9 } }], line: 232 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0, "57": 0, "58": 0, "59": 0, "60": 0, "61": 0, "62": 0, "63": 0, "64": 0, "65": 0, "66": 0, "67": 0, "68": 0, "69": 0, "70": 0, "71": 0, "72": 0, "73": 0, "74": 0, "75": 0, "76": 0, "77": 0, "78": 0, "79": 0, "80": 0, "81": 0, "82": 0, "83": 0, "84": 0, "85": 0, "86": 0, "87": 0, "88": 0, "89": 0, "90": 0, "91": 0, "92": 0, "93": 0, "94": 0, "95": 0, "96": 0, "97": 0, "98": 0, "99": 0, "100": 0, "101": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0, 0], "7": [0, 0], "8": [0], "9": [0, 0], "10": [0, 0], "11": [0, 0], "12": [0, 0], "13": [0, 0], "14": [0, 0], "15": [0, 0], "16": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/session/index.js"], names: ["controller", "actions", "debug", "Session", "constructor", "contracts", "files", "txHash", "provider", "_store", "reducer", "rootSaga", "contexts", "sources", "normalize", "dispatch", "recordContracts", "start", "ready", "accept", "reject", "subscribe", "state", "session", "status", "error", "sourcesByPath", "contract", "contractName", "binary", "sourceMap", "deployedBinary", "deployedSourceMap", "sourcePath", "source", "ast", "compiler", "push", "map", "file", "getState", "view", "selector", "action", "interrupt", "advance", "stepNext", "stepOver", "stepInto", "stepOut", "reset", "continueUntilBreakpoint", "addBreakpoint", "breakpoint", "removeBreakpoint", "removeAllBreakpoints", "decodeReady", "haveResolved", "unsubscribe", "subscriptionDecodingStarted", "data", "proc", "decodingMappingKeys", "resolve", "decodingStarted", "variable", "name", "definitions", "current", "identifiers", "refs", "decode", "views", "decoder", "variables", "decoded"], mappings: ";;;;;;;;;;;;;;;;;;AAAA;;;;AAGA;;;;AAEA;;IAAYA,U;;AACZ;;IAAYC,O;;AACZ;;;;AAEA;;;;AACA;;;;;;;;AATA,MAAMC,QAAQ,qBAAY,kBAAZ,CAAd,C,CAA+C;;AAW/C;;;AAGe,MAAMC,OAAN,CAAc;AAC3B;;;;;;;AAOAC,cAAYC,SAAZ,EAAuBC,KAAvB,EAA8BC,MAA9B,EAAsCC,QAAtC,EAAgD;AAC9C;;;AAGA,SAAKC,MAAL,GAAc,qBAAeC,kBAAf,EAAwBC,eAAxB,CAAd;;AAEA,QAAI,EAAEC,QAAF,EAAYC,OAAZ,KAAwBV,QAAQW,SAAR,CAAkBT,SAAlB,EAA6BC,KAA7B,CAA5B;;AAEA;AACA,SAAKG,MAAL,CAAYM,QAAZ,CAAqBd,QAAQe,eAAR,CAAwBJ,QAAxB,EAAkCC,OAAlC,CAArB;;AAEA,SAAKJ,MAAL,CAAYM,QAAZ,CAAqBd,QAAQgB,KAAR,CAAcV,MAAd,EAAsBC,QAAtB,CAArB;AACD;;AAEDU,UAAQ;AACN,WAAO,sBAAY,CAACC,MAAD,EAASC,MAAT,KAAoB;AACrC,WAAKX,MAAL,CAAYY,SAAZ,CAAsB,MAAM;AAC1B,YAAI,KAAKC,KAAL,CAAWC,OAAX,CAAmBC,MAAnB,IAA6B,QAAjC,EAA2C;AACzCL;AACD,SAFD,MAEO,IAAI,OAAO,KAAKG,KAAL,CAAWC,OAAX,CAAmBC,MAA1B,IAAoC,QAAxC,EAAkD;AACvDJ,iBAAO,KAAKE,KAAL,CAAWC,OAAX,CAAmBC,MAAnB,CAA0BC,KAAjC;AACD;AACF,OAND;AAOD,KARM,CAAP;AASD;;AAED;;;;;;;;;;;;AAYA,SAAOX,SAAP,CAAiBT,SAAjB,EAA4BC,QAAQ,IAApC,EAA0C;AACxC,QAAIoB,gBAAgB,EAApB;AACA,QAAId,WAAW,EAAf;AACA,QAAIC,OAAJ;;AAEA,SAAK,IAAIc,QAAT,IAAqBtB,SAArB,EAAgC;AAC9B,UAAI;AACFuB,oBADE;AAEFC,cAFE;AAGFC,iBAHE;AAIFC,sBAJE;AAKFC,yBALE;AAMFC,kBANE;AAOFC,cAPE;AAQFC,WARE;AASFC;AATE,UAUAT,QAVJ;;AAYAzB,YAAM,cAAN,EAAsB4B,SAAtB;AACA5B,YAAM,aAAN,EAAqBkC,QAArB;;AAEAV,oBAAcO,UAAd,IAA4B,EAAEA,UAAF,EAAcC,MAAd,EAAsBC,GAAtB,EAA5B;;AAEA,UAAIN,UAAUA,UAAU,IAAxB,EAA8B;AAC5BjB,iBAASyB,IAAT,CAAc;AACZT,sBADY;AAEZC,gBAFY;AAGZC;AAHY,SAAd;AAKD;;AAED,UAAIC,kBAAkBA,kBAAkB,IAAxC,EAA8C;AAC5CnB,iBAASyB,IAAT,CAAc;AACZT,sBADY;AAEZC,kBAAQE,cAFI;AAGZD,qBAAWE,iBAHC;AAIZI;AAJY,SAAd;AAMD;AACF;;AAED,QAAI,CAAC9B,KAAL,EAAY;AACVO,gBAAU,sBAAca,aAAd,CAAV;AACD,KAFD,MAEO;AACLb,gBAAUP,MAAMgC,GAAN,CAAUC,QAAQb,cAAca,IAAd,CAAlB,CAAV;AACD;;AAED,WAAO,EAAE3B,QAAF,EAAYC,OAAZ,EAAP;AACD;;AAED,MAAIS,KAAJ,GAAY;AACV,WAAO,KAAKb,MAAL,CAAY+B,QAAZ,EAAP;AACD;;AAEDC,OAAKC,QAAL,EAAe;AACb,WAAOA,SAAS,KAAKpB,KAAd,CAAP;AACD;;AAEDP,WAAS4B,MAAT,EAAiB;AACf,SAAKlC,MAAL,CAAYM,QAAZ,CAAqB4B,MAArB;;AAEA,WAAO,IAAP;AACD;;AAEDC,cAAY;AACV,WAAO,KAAK7B,QAAL,CAAcf,WAAW4C,SAAX,EAAd,CAAP;AACD;;AAEDC,YAAU;AACR,WAAO,KAAK9B,QAAL,CAAcf,WAAW6C,OAAX,EAAd,CAAP;AACD;;AAEDC,aAAW;AACT,WAAO,KAAK/B,QAAL,CAAcf,WAAW8C,QAAX,EAAd,CAAP;AACD;;AAEDC,aAAW;AACT,WAAO,KAAKhC,QAAL,CAAcf,WAAW+C,QAAX,EAAd,CAAP;AACD;;AAEDC,aAAW;AACT,WAAO,KAAKjC,QAAL,CAAcf,WAAWgD,QAAX,EAAd,CAAP;AACD;;AAEDC,YAAU;AACR,WAAO,KAAKlC,QAAL,CAAcf,WAAWiD,OAAX,EAAd,CAAP;AACD;;AAEDC,UAAQ;AACN,WAAO,KAAKnC,QAAL,CAAcf,WAAWkD,KAAX,EAAd,CAAP;AACD;;AAEDC,4BAA0B;AACxB,WAAO,KAAKpC,QAAL,CAAcf,WAAWmD,uBAAX,EAAd,CAAP;AACD;;AAEDC,gBAAcC,UAAd,EAA0B;AACxB,WAAO,KAAKtC,QAAL,CAAcf,WAAWoD,aAAX,CAAyBC,UAAzB,CAAd,CAAP;AACD;;AAEDC,mBAAiBD,UAAjB,EAA6B;AAC3B,WAAO,KAAKtC,QAAL,CAAcf,WAAWsD,gBAAX,CAA4BD,UAA5B,CAAd,CAAP;AACD;;AAEDE,yBAAuB;AACrB,WAAO,KAAKxC,QAAL,CAAcf,WAAWuD,oBAAX,EAAd,CAAP;AACD;;AAEKC,aAAN,GAAoB;AAAA;;AAAA;AAClB,aAAO,sBAAY,mBAAW;AAC5B,YAAIC,eAAe,KAAnB;AACA,cAAMC,cAAc,MAAKjD,MAAL,CAAYY,SAAZ,CAAsB,YAAM;AAC9C,gBAAMsC,8BAA8B,MAAKlB,IAAL,CAClCmB,oBAAKC,IAAL,CAAUC,mBADwB,CAApC;;AAIA5D,gBAAM,gCAAN,EAAwCyD,2BAAxC;;AAEA,cAAIA,+BAA+B,CAA/B,IAAoC,CAACF,YAAzC,EAAuD;AACrDA,2BAAe,IAAf;AACAC;AACAK;AACD;AACF,SAZmB,CAApB;;AAcA,cAAMC,kBAAkB,MAAKvB,IAAL,CAAUmB,oBAAKC,IAAL,CAAUC,mBAApB,CAAxB;;AAEA5D,cAAM,8BAAN,EAAsC8D,eAAtC;;AAEA,YAAIA,mBAAmB,CAAvB,EAA0B;AACxBP,yBAAe,IAAf;AACAC;AACAK;AACD;AACF,OAzBM,CAAP;AADkB;AA2BnB;;AAEKE,UAAN,CAAeC,IAAf,EAAqB;AAAA;;AAAA;AACnB,YAAM,OAAKV,WAAL,EAAN;;AAEA,YAAMW,cAAc,OAAK1B,IAAL,CAAUmB,oBAAKQ,OAAL,CAAaC,WAAb,CAAyBF,WAAnC,CAApB;AACA,YAAMG,OAAO,OAAK7B,IAAL,CAAUmB,oBAAKQ,OAAL,CAAaC,WAAb,CAAyBC,IAAnC,CAAb;;AAEA,YAAMC,SAAS,OAAK9B,IAAL,CAAUmB,oBAAKY,KAAL,CAAWC,OAArB,CAAf;AACA,aAAO,MAAMF,OAAOJ,YAAYD,IAAZ,CAAP,EAA0BI,KAAKJ,IAAL,CAA1B,CAAb;AAPmB;AAQpB;;AAEKQ,WAAN,GAAkB;AAAA;;AAAA;AAChB,YAAM,OAAKlB,WAAL,EAAN;;AAEA,aAAO,MAAM,OAAKf,IAAL,CAAUmB,oBAAKQ,OAAL,CAAaC,WAAb,CAAyBM,OAAnC,CAAb;AAHgB;AAIjB;AArM0B;kBAARxE,O", file: "index.js", sourceRoot: "/Users/tyler/projects/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:session\"); //eslint-disable-line no-unused-vars\n\nimport configureStore from \"lib/store\";\n\nimport * as controller from \"lib/controller/actions\";\nimport * as actions from \"./actions\";\nimport data from \"lib/data/selectors\";\n\nimport rootSaga from \"./sagas\";\nimport reducer from \"./reducers\";\n\n/**\n * Debugger Session\n */\nexport default class Session {\n  /**\n   * @param {Array<Contract>} contracts - contract definitions\n   * @param {Array<String>} files - array of filenames for sourceMap indexes\n   * @param {string} txHash - transaction hash\n   * @param {Web3Provider} provider - web3 provider\n   * @private\n   */\n  constructor(contracts, files, txHash, provider) {\n    /**\n     * @private\n     */\n    this._store = configureStore(reducer, rootSaga);\n\n    let { contexts, sources } = Session.normalize(contracts, files);\n\n    // record contracts\n    this._store.dispatch(actions.recordContracts(contexts, sources));\n\n    this._store.dispatch(actions.start(txHash, provider));\n  }\n\n  ready() {\n    return new Promise((accept, reject) => {\n      this._store.subscribe(() => {\n        if (this.state.session.status == \"ACTIVE\") {\n          accept();\n        } else if (typeof this.state.session.status == \"object\") {\n          reject(this.state.session.status.error);\n        }\n      });\n    });\n  }\n\n  /**\n   * Split up artifacts into \"contexts\" and \"sources\", dividing artifact\n   * data into appropriate buckets.\n   *\n   * Multiple contracts can be defined in the same source file, but have\n   * different bytecodes.\n   *\n   * This iterates over the contracts and collects binaries separately\n   * from sources, using the optional `files` argument to force\n   * source ordering.\n   * @private\n   */\n  static normalize(contracts, files = null) {\n    let sourcesByPath = {};\n    let contexts = [];\n    let sources;\n\n    for (let contract of contracts) {\n      let {\n        contractName,\n        binary,\n        sourceMap,\n        deployedBinary,\n        deployedSourceMap,\n        sourcePath,\n        source,\n        ast,\n        compiler\n      } = contract;\n\n      debug(\"sourceMap %o\", sourceMap);\n      debug(\"compiler %o\", compiler);\n\n      sourcesByPath[sourcePath] = { sourcePath, source, ast };\n\n      if (binary && binary != \"0x\") {\n        contexts.push({\n          contractName,\n          binary,\n          sourceMap\n        });\n      }\n\n      if (deployedBinary && deployedBinary != \"0x\") {\n        contexts.push({\n          contractName,\n          binary: deployedBinary,\n          sourceMap: deployedSourceMap,\n          compiler\n        });\n      }\n    }\n\n    if (!files) {\n      sources = Object.values(sourcesByPath);\n    } else {\n      sources = files.map(file => sourcesByPath[file]);\n    }\n\n    return { contexts, sources };\n  }\n\n  get state() {\n    return this._store.getState();\n  }\n\n  view(selector) {\n    return selector(this.state);\n  }\n\n  dispatch(action) {\n    this._store.dispatch(action);\n\n    return true;\n  }\n\n  interrupt() {\n    return this.dispatch(controller.interrupt());\n  }\n\n  advance() {\n    return this.dispatch(controller.advance());\n  }\n\n  stepNext() {\n    return this.dispatch(controller.stepNext());\n  }\n\n  stepOver() {\n    return this.dispatch(controller.stepOver());\n  }\n\n  stepInto() {\n    return this.dispatch(controller.stepInto());\n  }\n\n  stepOut() {\n    return this.dispatch(controller.stepOut());\n  }\n\n  reset() {\n    return this.dispatch(controller.reset());\n  }\n\n  continueUntilBreakpoint() {\n    return this.dispatch(controller.continueUntilBreakpoint());\n  }\n\n  addBreakpoint(breakpoint) {\n    return this.dispatch(controller.addBreakpoint(breakpoint));\n  }\n\n  removeBreakpoint(breakpoint) {\n    return this.dispatch(controller.removeBreakpoint(breakpoint));\n  }\n\n  removeAllBreakpoints() {\n    return this.dispatch(controller.removeAllBreakpoints());\n  }\n\n  async decodeReady() {\n    return new Promise(resolve => {\n      let haveResolved = false;\n      const unsubscribe = this._store.subscribe(() => {\n        const subscriptionDecodingStarted = this.view(\n          data.proc.decodingMappingKeys\n        );\n\n        debug(\"following decoding started: %d\", subscriptionDecodingStarted);\n\n        if (subscriptionDecodingStarted <= 0 && !haveResolved) {\n          haveResolved = true;\n          unsubscribe();\n          resolve();\n        }\n      });\n\n      const decodingStarted = this.view(data.proc.decodingMappingKeys);\n\n      debug(\"initial decoding started: %d\", decodingStarted);\n\n      if (decodingStarted <= 0) {\n        haveResolved = true;\n        unsubscribe();\n        resolve();\n      }\n    });\n  }\n\n  async variable(name) {\n    await this.decodeReady();\n\n    const definitions = this.view(data.current.identifiers.definitions);\n    const refs = this.view(data.current.identifiers.refs);\n\n    const decode = this.view(data.views.decoder);\n    return await decode(definitions[name], refs[name]);\n  }\n\n  async variables() {\n    await this.decodeReady();\n\n    return await this.view(data.current.identifiers.decoded);\n  }\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_2mk3gwf2gn.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _asyncToGenerator2 = (cov_2mk3gwf2gn.s[1]++, __webpack_require__(1));var _asyncToGenerator3 = (cov_2mk3gwf2gn.s[2]++, _interopRequireDefault(_asyncToGenerator2));var _values = (cov_2mk3gwf2gn.s[3]++, __webpack_require__(26));var _values2 = (cov_2mk3gwf2gn.s[4]++, _interopRequireDefault(_values));var _promise = (cov_2mk3gwf2gn.s[5]++, __webpack_require__(20));var _promise2 = (cov_2mk3gwf2gn.s[6]++, _interopRequireDefault(_promise));var _debug = (cov_2mk3gwf2gn.s[7]++, __webpack_require__(0));var _debug2 = (cov_2mk3gwf2gn.s[8]++, _interopRequireDefault(_debug));var _store = (cov_2mk3gwf2gn.s[9]++, __webpack_require__(53));var _store2 = (cov_2mk3gwf2gn.s[10]++, _interopRequireDefault(_store));var _actions = (cov_2mk3gwf2gn.s[11]++, __webpack_require__(27));var controller = (cov_2mk3gwf2gn.s[12]++, _interopRequireWildcard(_actions));var _actions2 = (cov_2mk3gwf2gn.s[13]++, __webpack_require__(21));var actions = (cov_2mk3gwf2gn.s[14]++, _interopRequireWildcard(_actions2));var _selectors = (cov_2mk3gwf2gn.s[15]++, __webpack_require__(22));var _selectors2 = (cov_2mk3gwf2gn.s[16]++, _interopRequireDefault(_selectors));var _sagas = (cov_2mk3gwf2gn.s[17]++, __webpack_require__(68));var _sagas2 = (cov_2mk3gwf2gn.s[18]++, _interopRequireDefault(_sagas));var _reducers = (cov_2mk3gwf2gn.s[19]++, __webpack_require__(74));var _reducers2 = (cov_2mk3gwf2gn.s[20]++, _interopRequireDefault(_reducers));function _interopRequireWildcard(obj) {
  cov_2mk3gwf2gn.f[0]++;cov_2mk3gwf2gn.s[21]++;if ((cov_2mk3gwf2gn.b[1][0]++, obj) && (cov_2mk3gwf2gn.b[1][1]++, obj.__esModule)) {
    cov_2mk3gwf2gn.b[0][0]++;cov_2mk3gwf2gn.s[22]++;return obj;
  } else {
    cov_2mk3gwf2gn.b[0][1]++;var newObj = (cov_2mk3gwf2gn.s[23]++, {});cov_2mk3gwf2gn.s[24]++;if (obj != null) {
      cov_2mk3gwf2gn.b[2][0]++;cov_2mk3gwf2gn.s[25]++;for (var key in obj) {
        cov_2mk3gwf2gn.s[26]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_2mk3gwf2gn.b[3][0]++;cov_2mk3gwf2gn.s[27]++;newObj[key] = obj[key];
        } else {
          cov_2mk3gwf2gn.b[3][1]++;
        }
      }
    } else {
      cov_2mk3gwf2gn.b[2][1]++;
    }cov_2mk3gwf2gn.s[28]++;newObj.default = obj;cov_2mk3gwf2gn.s[29]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_2mk3gwf2gn.f[1]++;cov_2mk3gwf2gn.s[30]++;return (cov_2mk3gwf2gn.b[5][0]++, obj) && (cov_2mk3gwf2gn.b[5][1]++, obj.__esModule) ? (cov_2mk3gwf2gn.b[4][0]++, obj) : (cov_2mk3gwf2gn.b[4][1]++, { default: obj });
}const debug = (cov_2mk3gwf2gn.s[31]++, (0, _debug2.default)("debugger:session"));class Session {
  constructor(contracts, files, txHash, provider) {
    cov_2mk3gwf2gn.f[2]++;cov_2mk3gwf2gn.s[32]++;this._store = (0, _store2.default)(_reducers2.default, _sagas2.default);let { contexts, sources } = (cov_2mk3gwf2gn.s[33]++, Session.normalize(contracts, files));cov_2mk3gwf2gn.s[34]++;this._store.dispatch(actions.recordContracts(contexts, sources));cov_2mk3gwf2gn.s[35]++;this._store.dispatch(actions.start(txHash, provider));
  }ready() {
    cov_2mk3gwf2gn.f[3]++;cov_2mk3gwf2gn.s[36]++;return new _promise2.default((accept, reject) => {
      cov_2mk3gwf2gn.f[4]++;cov_2mk3gwf2gn.s[37]++;this._store.subscribe(() => {
        cov_2mk3gwf2gn.f[5]++;cov_2mk3gwf2gn.s[38]++;if (this.state.session.status == "ACTIVE") {
          cov_2mk3gwf2gn.b[6][0]++;cov_2mk3gwf2gn.s[39]++;accept();
        } else {
          cov_2mk3gwf2gn.b[6][1]++;cov_2mk3gwf2gn.s[40]++;if (typeof this.state.session.status == "object") {
            cov_2mk3gwf2gn.b[7][0]++;cov_2mk3gwf2gn.s[41]++;reject(this.state.session.status.error);
          } else {
            cov_2mk3gwf2gn.b[7][1]++;
          }
        }
      });
    });
  }static normalize(contracts, files = (cov_2mk3gwf2gn.b[8][0]++, null)) {
    cov_2mk3gwf2gn.f[6]++;let sourcesByPath = (cov_2mk3gwf2gn.s[42]++, {});let contexts = (cov_2mk3gwf2gn.s[43]++, []);let sources;cov_2mk3gwf2gn.s[44]++;for (let contract of contracts) {
      let { contractName, binary, sourceMap, deployedBinary, deployedSourceMap, sourcePath, source, ast, compiler } = (cov_2mk3gwf2gn.s[45]++, contract);cov_2mk3gwf2gn.s[46]++;debug("sourceMap %o", sourceMap);cov_2mk3gwf2gn.s[47]++;debug("compiler %o", compiler);cov_2mk3gwf2gn.s[48]++;sourcesByPath[sourcePath] = { sourcePath, source, ast };cov_2mk3gwf2gn.s[49]++;if ((cov_2mk3gwf2gn.b[10][0]++, binary) && (cov_2mk3gwf2gn.b[10][1]++, binary != "0x")) {
        cov_2mk3gwf2gn.b[9][0]++;cov_2mk3gwf2gn.s[50]++;contexts.push({ contractName, binary, sourceMap });
      } else {
        cov_2mk3gwf2gn.b[9][1]++;
      }cov_2mk3gwf2gn.s[51]++;if ((cov_2mk3gwf2gn.b[12][0]++, deployedBinary) && (cov_2mk3gwf2gn.b[12][1]++, deployedBinary != "0x")) {
        cov_2mk3gwf2gn.b[11][0]++;cov_2mk3gwf2gn.s[52]++;contexts.push({ contractName, binary: deployedBinary, sourceMap: deployedSourceMap, compiler });
      } else {
        cov_2mk3gwf2gn.b[11][1]++;
      }
    }cov_2mk3gwf2gn.s[53]++;if (!files) {
      cov_2mk3gwf2gn.b[13][0]++;cov_2mk3gwf2gn.s[54]++;sources = (0, _values2.default)(sourcesByPath);
    } else {
      cov_2mk3gwf2gn.b[13][1]++;cov_2mk3gwf2gn.s[55]++;sources = files.map(file => {
        cov_2mk3gwf2gn.f[7]++;cov_2mk3gwf2gn.s[56]++;return sourcesByPath[file];
      });
    }cov_2mk3gwf2gn.s[57]++;return { contexts, sources };
  }get state() {
    cov_2mk3gwf2gn.f[8]++;cov_2mk3gwf2gn.s[58]++;return this._store.getState();
  }view(selector) {
    cov_2mk3gwf2gn.f[9]++;cov_2mk3gwf2gn.s[59]++;return selector(this.state);
  }dispatch(action) {
    cov_2mk3gwf2gn.f[10]++;cov_2mk3gwf2gn.s[60]++;this._store.dispatch(action);cov_2mk3gwf2gn.s[61]++;return true;
  }interrupt() {
    cov_2mk3gwf2gn.f[11]++;cov_2mk3gwf2gn.s[62]++;return this.dispatch(controller.interrupt());
  }advance() {
    cov_2mk3gwf2gn.f[12]++;cov_2mk3gwf2gn.s[63]++;return this.dispatch(controller.advance());
  }stepNext() {
    cov_2mk3gwf2gn.f[13]++;cov_2mk3gwf2gn.s[64]++;return this.dispatch(controller.stepNext());
  }stepOver() {
    cov_2mk3gwf2gn.f[14]++;cov_2mk3gwf2gn.s[65]++;return this.dispatch(controller.stepOver());
  }stepInto() {
    cov_2mk3gwf2gn.f[15]++;cov_2mk3gwf2gn.s[66]++;return this.dispatch(controller.stepInto());
  }stepOut() {
    cov_2mk3gwf2gn.f[16]++;cov_2mk3gwf2gn.s[67]++;return this.dispatch(controller.stepOut());
  }reset() {
    cov_2mk3gwf2gn.f[17]++;cov_2mk3gwf2gn.s[68]++;return this.dispatch(controller.reset());
  }continueUntilBreakpoint() {
    cov_2mk3gwf2gn.f[18]++;cov_2mk3gwf2gn.s[69]++;return this.dispatch(controller.continueUntilBreakpoint());
  }addBreakpoint(breakpoint) {
    cov_2mk3gwf2gn.f[19]++;cov_2mk3gwf2gn.s[70]++;return this.dispatch(controller.addBreakpoint(breakpoint));
  }removeBreakpoint(breakpoint) {
    cov_2mk3gwf2gn.f[20]++;cov_2mk3gwf2gn.s[71]++;return this.dispatch(controller.removeBreakpoint(breakpoint));
  }removeAllBreakpoints() {
    cov_2mk3gwf2gn.f[21]++;cov_2mk3gwf2gn.s[72]++;return this.dispatch(controller.removeAllBreakpoints());
  }decodeReady() {
    cov_2mk3gwf2gn.f[22]++;var _this = (cov_2mk3gwf2gn.s[73]++, this);cov_2mk3gwf2gn.s[74]++;return (0, _asyncToGenerator3.default)(function* () {
      cov_2mk3gwf2gn.f[23]++;cov_2mk3gwf2gn.s[75]++;return new _promise2.default(function (resolve) {
        cov_2mk3gwf2gn.f[24]++;let haveResolved = (cov_2mk3gwf2gn.s[76]++, false);const unsubscribe = (cov_2mk3gwf2gn.s[77]++, _this._store.subscribe(function () {
          cov_2mk3gwf2gn.f[25]++;const subscriptionDecodingStarted = (cov_2mk3gwf2gn.s[78]++, _this.view(_selectors2.default.proc.decodingMappingKeys));cov_2mk3gwf2gn.s[79]++;debug("following decoding started: %d", subscriptionDecodingStarted);cov_2mk3gwf2gn.s[80]++;if ((cov_2mk3gwf2gn.b[15][0]++, subscriptionDecodingStarted <= 0) && (cov_2mk3gwf2gn.b[15][1]++, !haveResolved)) {
            cov_2mk3gwf2gn.b[14][0]++;cov_2mk3gwf2gn.s[81]++;haveResolved = true;cov_2mk3gwf2gn.s[82]++;unsubscribe();cov_2mk3gwf2gn.s[83]++;resolve();
          } else {
            cov_2mk3gwf2gn.b[14][1]++;
          }
        }));const decodingStarted = (cov_2mk3gwf2gn.s[84]++, _this.view(_selectors2.default.proc.decodingMappingKeys));cov_2mk3gwf2gn.s[85]++;debug("initial decoding started: %d", decodingStarted);cov_2mk3gwf2gn.s[86]++;if (decodingStarted <= 0) {
          cov_2mk3gwf2gn.b[16][0]++;cov_2mk3gwf2gn.s[87]++;haveResolved = true;cov_2mk3gwf2gn.s[88]++;unsubscribe();cov_2mk3gwf2gn.s[89]++;resolve();
        } else {
          cov_2mk3gwf2gn.b[16][1]++;
        }
      });
    })();
  }variable(name) {
    cov_2mk3gwf2gn.f[26]++;var _this2 = (cov_2mk3gwf2gn.s[90]++, this);cov_2mk3gwf2gn.s[91]++;return (0, _asyncToGenerator3.default)(function* () {
      cov_2mk3gwf2gn.f[27]++;cov_2mk3gwf2gn.s[92]++;yield _this2.decodeReady();const definitions = (cov_2mk3gwf2gn.s[93]++, _this2.view(_selectors2.default.current.identifiers.definitions));const refs = (cov_2mk3gwf2gn.s[94]++, _this2.view(_selectors2.default.current.identifiers.refs));const decode = (cov_2mk3gwf2gn.s[95]++, _this2.view(_selectors2.default.views.decoder));cov_2mk3gwf2gn.s[96]++;return yield decode(definitions[name], refs[name]);
    })();
  }variables() {
    cov_2mk3gwf2gn.f[28]++;var _this3 = (cov_2mk3gwf2gn.s[97]++, this);cov_2mk3gwf2gn.s[98]++;return (0, _asyncToGenerator3.default)(function* () {
      cov_2mk3gwf2gn.f[29]++;cov_2mk3gwf2gn.s[99]++;yield _this3.decodeReady();cov_2mk3gwf2gn.s[100]++;return yield _this3.view(_selectors2.default.current.identifiers.decoded);
    })();
  }
}cov_2mk3gwf2gn.s[101]++;exports.default = Session;

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_2h2anvztol = function () {
  var path = "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/store/index.js",
      hash = "cd0fb045609a12a7127c42a13b0a82ff8b1f2ff2",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/store/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 9, column: 1 } }, "1": { start: { line: 4, column: 2 }, end: { line: 4, column: 43 } }, "2": { start: { line: 5, column: 7 }, end: { line: 9, column: 1 } }, "3": { start: { line: 6, column: 2 }, end: { line: 6, column: 37 } }, "4": { start: { line: 8, column: 2 }, end: { line: 8, column: 44 } } }, fnMap: {}, branchMap: { "0": { loc: { start: { line: 3, column: 0 }, end: { line: 9, column: 1 } }, type: "if", locations: [{ start: { line: 3, column: 0 }, end: { line: 9, column: 1 } }, { start: { line: 3, column: 0 }, end: { line: 9, column: 1 } }], line: 3 }, "1": { loc: { start: { line: 5, column: 7 }, end: { line: 9, column: 1 } }, type: "if", locations: [{ start: { line: 5, column: 7 }, end: { line: 9, column: 1 } }, { start: { line: 5, column: 7 }, end: { line: 9, column: 1 } }], line: 5 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0 }, f: {}, b: { "0": [0, 0], "1": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/store/index.js"], names: ["process", "env", "NODE_ENV", "module", "exports", "require"], mappings: ";;AAAA,IAAIA,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCC,SAAOC,OAAP,GAAiBC,QAAQ,cAAR,CAAjB;AACD,CAFD,MAEO,IAAIL,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,MAA7B,EAAqC;AAC1CC,SAAOC,OAAP,GAAiBC,QAAQ,QAAR,CAAjB;AACD,CAFM,MAEA;AACLF,SAAOC,OAAP,GAAiBC,QAAQ,eAAR,CAAjB;AACD", file: "index.js", sourceRoot: "/Users/tyler/projects/truffle/packages/truffle-debugger", sourcesContent: ["if (process.env.NODE_ENV === \"production\") {\n  module.exports = require(\"./production\");\n} else if (process.env.NODE_ENV === \"test\") {\n  module.exports = require(\"./test\");\n} else {\n  module.exports = require(\"./development\");\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_2h2anvztol.s[0]++;if (false) {
  cov_2h2anvztol.b[0][0]++;cov_2h2anvztol.s[1]++;module.exports = require("./production");
} else {
  cov_2h2anvztol.b[0][1]++;cov_2h2anvztol.s[2]++;if (true) {
    cov_2h2anvztol.b[1][0]++;cov_2h2anvztol.s[3]++;module.exports = __webpack_require__(54);
  } else {
    cov_2h2anvztol.b[1][1]++;cov_2h2anvztol.s[4]++;module.exports = require("./development");
  }
}

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_1sjyoi6wcy = function () {
  var path = "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/store/test.js",
      hash = "a0bdc7b192e18c897f97343b88234bc20774765a",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/store/test.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 14 }, end: { line: 7, column: 33 } }, "2": { start: { line: 9, column: 15 }, end: { line: 9, column: 46 } }, "3": { start: { line: 11, column: 39 }, end: { line: 11, column: 93 } }, "4": { start: { line: 13, column: 0 }, end: { line: 13, column: 35 } } }, fnMap: { "0": { name: "_interopRequireDefault", decl: { start: { line: 11, column: 9 }, end: { line: 11, column: 31 } }, loc: { start: { line: 11, column: 37 }, end: { line: 11, column: 95 } }, line: 11 } }, branchMap: { "0": { loc: { start: { line: 11, column: 46 }, end: { line: 11, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 11, column: 70 }, end: { line: 11, column: 73 } }, { start: { line: 11, column: 76 }, end: { line: 11, column: 92 } }], line: 11 }, "1": { loc: { start: { line: 11, column: 46 }, end: { line: 11, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 11, column: 46 }, end: { line: 11, column: 49 } }, { start: { line: 11, column: 53 }, end: { line: 11, column: 67 } }], line: 11 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0 }, f: { "0": 0 }, b: { "0": [0, 0], "1": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/store/test.js"], names: ["configureStore"], mappings: ";;;;;;AAAA;;;;;;kBACeA,gB", file: "test.js", sourceRoot: "/Users/tyler/projects/truffle/packages/truffle-debugger", sourcesContent: ["import configureStore from \"./common\";\nexport default configureStore;\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_1sjyoi6wcy.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _common = (cov_1sjyoi6wcy.s[1]++, __webpack_require__(55));var _common2 = (cov_1sjyoi6wcy.s[2]++, _interopRequireDefault(_common));function _interopRequireDefault(obj) {
  cov_1sjyoi6wcy.f[0]++;cov_1sjyoi6wcy.s[3]++;return (cov_1sjyoi6wcy.b[1][0]++, obj) && (cov_1sjyoi6wcy.b[1][1]++, obj.__esModule) ? (cov_1sjyoi6wcy.b[0][0]++, obj) : (cov_1sjyoi6wcy.b[0][1]++, { default: obj });
}cov_1sjyoi6wcy.s[4]++;exports.default = _common2.default;

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_1e3rpbayv7 = function () {
  var path = "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/store/common.js",
      hash = "4a686945eb5ef8a640a55c442c732f89b576ddd9",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/store/common.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 15 }, end: { line: 7, column: 62 } }, "2": { start: { line: 9, column: 16 }, end: { line: 9, column: 48 } }, "3": { start: { line: 11, column: 14 }, end: { line: 11, column: 60 } }, "4": { start: { line: 13, column: 15 }, end: { line: 13, column: 46 } }, "5": { start: { line: 15, column: 0 }, end: { line: 15, column: 44 } }, "6": { start: { line: 16, column: 0 }, end: { line: 16, column: 33 } }, "7": { start: { line: 18, column: 13 }, end: { line: 18, column: 29 } }, "8": { start: { line: 20, column: 14 }, end: { line: 20, column: 44 } }, "9": { start: { line: 22, column: 13 }, end: { line: 22, column: 29 } }, "10": { start: { line: 24, column: 17 }, end: { line: 24, column: 38 } }, "11": { start: { line: 26, column: 18 }, end: { line: 26, column: 52 } }, "12": { start: { line: 28, column: 22 }, end: { line: 28, column: 49 } }, "13": { start: { line: 30, column: 23 }, end: { line: 30, column: 62 } }, "14": { start: { line: 32, column: 39 }, end: { line: 32, column: 93 } }, "15": { start: { line: 34, column: 14 }, end: { line: 34, column: 59 } }, "16": { start: { line: 35, column: 19 }, end: { line: 35, column: 57 } }, "17": { start: { line: 38, column: 2 }, end: { line: 38, column: 50 } }, "18": { start: { line: 39, column: 2 }, end: { line: 39, column: 47 } }, "19": { start: { line: 40, column: 2 }, end: { line: 40, column: 51 } }, "20": { start: { line: 42, column: 2 }, end: { line: 44, column: 3 } }, "21": { start: { line: 43, column: 4 }, end: { line: 43, column: 17 } }, "22": { start: { line: 46, column: 18 }, end: { line: 46, column: 70 } }, "23": { start: { line: 46, column: 27 }, end: { line: 46, column: 70 } }, "24": { start: { line: 48, column: 2 }, end: { line: 64, column: 3 } }, "25": { start: { line: 49, column: 4 }, end: { line: 51, column: 5 } }, "26": { start: { line: 50, column: 6 }, end: { line: 50, column: 124 } }, "27": { start: { line: 53, column: 4 }, end: { line: 53, column: 30 } }, "28": { start: { line: 54, column: 9 }, end: { line: 64, column: 3 } }, "29": { start: { line: 55, column: 4 }, end: { line: 55, column: 119 } }, "30": { start: { line: 55, column: 87 }, end: { line: 55, column: 115 } }, "31": { start: { line: 56, column: 9 }, end: { line: 64, column: 3 } }, "32": { start: { line: 57, column: 16 }, end: { line: 57, column: 21 } }, "33": { start: { line: 58, column: 24 }, end: { line: 58, column: 64 } }, "34": { start: { line: 59, column: 18 }, end: { line: 59, column: 58 } }, "35": { start: { line: 60, column: 19 }, end: { line: 60, column: 72 } }, "36": { start: { line: 61, column: 4 }, end: { line: 61, column: 43 } }, "37": { start: { line: 63, column: 4 }, end: { line: 63, column: 17 } }, "38": { start: { line: 68, column: 25 }, end: { line: 68, column: 51 } }, "39": { start: { line: 70, column: 2 }, end: { line: 72, column: 3 } }, "40": { start: { line: 71, column: 4 }, end: { line: 71, column: 38 } }, "41": { start: { line: 74, column: 27 }, end: { line: 81, column: 4 } }, "42": { start: { line: 76, column: 31 }, end: { line: 79, column: 6 } }, "43": { start: { line: 83, column: 14 }, end: { line: 83, column: 141 } }, "44": { start: { line: 85, column: 2 }, end: { line: 85, column: 27 } }, "45": { start: { line: 87, column: 2 }, end: { line: 87, column: 15 } } }, fnMap: { "0": { name: "_interopRequireDefault", decl: { start: { line: 32, column: 9 }, end: { line: 32, column: 31 } }, loc: { start: { line: 32, column: 37 }, end: { line: 32, column: 95 } }, line: 32 }, "1": { name: "abbreviateValues", decl: { start: { line: 37, column: 9 }, end: { line: 37, column: 25 } }, loc: { start: { line: 37, column: 58 }, end: { line: 65, column: 1 } }, line: 37 }, "2": { name: "(anonymous_2)", decl: { start: { line: 46, column: 18 }, end: { line: 46, column: 19 } }, loc: { start: { line: 46, column: 27 }, end: { line: 46, column: 70 } }, line: 46 }, "3": { name: "(anonymous_3)", decl: { start: { line: 55, column: 74 }, end: { line: 55, column: 75 } }, loc: { start: { line: 55, column: 87 }, end: { line: 55, column: 115 } }, line: 55 }, "4": { name: "configureStore", decl: { start: { line: 67, column: 9 }, end: { line: 67, column: 23 } }, loc: { start: { line: 67, column: 71 }, end: { line: 88, column: 1 } }, line: 67 }, "5": { name: "(anonymous_5)", decl: { start: { line: 76, column: 22 }, end: { line: 76, column: 23 } }, loc: { start: { line: 76, column: 31 }, end: { line: 79, column: 6 } }, line: 76 } }, branchMap: { "0": { loc: { start: { line: 32, column: 46 }, end: { line: 32, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 32, column: 70 }, end: { line: 32, column: 73 } }, { start: { line: 32, column: 76 }, end: { line: 32, column: 92 } }], line: 32 }, "1": { loc: { start: { line: 32, column: 46 }, end: { line: 32, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 32, column: 46 }, end: { line: 32, column: 49 } }, { start: { line: 32, column: 53 }, end: { line: 32, column: 67 } }], line: 32 }, "2": { loc: { start: { line: 37, column: 33 }, end: { line: 37, column: 45 } }, type: "default-arg", locations: [{ start: { line: 37, column: 43 }, end: { line: 37, column: 45 } }], line: 37 }, "3": { loc: { start: { line: 37, column: 47 }, end: { line: 37, column: 56 } }, type: "default-arg", locations: [{ start: { line: 37, column: 55 }, end: { line: 37, column: 56 } }], line: 37 }, "4": { loc: { start: { line: 38, column: 24 }, end: { line: 38, column: 49 } }, type: "binary-expr", locations: [{ start: { line: 38, column: 24 }, end: { line: 38, column: 43 } }, { start: { line: 38, column: 47 }, end: { line: 38, column: 49 } }], line: 38 }, "5": { loc: { start: { line: 39, column: 23 }, end: { line: 39, column: 46 } }, type: "binary-expr", locations: [{ start: { line: 39, column: 23 }, end: { line: 39, column: 41 } }, { start: { line: 39, column: 45 }, end: { line: 39, column: 46 } }], line: 39 }, "6": { loc: { start: { line: 40, column: 25 }, end: { line: 40, column: 50 } }, type: "binary-expr", locations: [{ start: { line: 40, column: 25 }, end: { line: 40, column: 45 } }, { start: { line: 40, column: 49 }, end: { line: 40, column: 50 } }], line: 40 }, "7": { loc: { start: { line: 42, column: 2 }, end: { line: 44, column: 3 } }, type: "if", locations: [{ start: { line: 42, column: 2 }, end: { line: 44, column: 3 } }, { start: { line: 42, column: 2 }, end: { line: 44, column: 3 } }], line: 42 }, "8": { loc: { start: { line: 48, column: 2 }, end: { line: 64, column: 3 } }, type: "if", locations: [{ start: { line: 48, column: 2 }, end: { line: 64, column: 3 } }, { start: { line: 48, column: 2 }, end: { line: 64, column: 3 } }], line: 48 }, "9": { loc: { start: { line: 49, column: 4 }, end: { line: 51, column: 5 } }, type: "if", locations: [{ start: { line: 49, column: 4 }, end: { line: 51, column: 5 } }, { start: { line: 49, column: 4 }, end: { line: 51, column: 5 } }], line: 49 }, "10": { loc: { start: { line: 54, column: 9 }, end: { line: 64, column: 3 } }, type: "if", locations: [{ start: { line: 54, column: 9 }, end: { line: 64, column: 3 } }, { start: { line: 54, column: 9 }, end: { line: 64, column: 3 } }], line: 54 }, "11": { loc: { start: { line: 56, column: 9 }, end: { line: 64, column: 3 } }, type: "if", locations: [{ start: { line: 56, column: 9 }, end: { line: 64, column: 3 } }, { start: { line: 56, column: 9 }, end: { line: 64, column: 3 } }], line: 56 }, "12": { loc: { start: { line: 56, column: 13 }, end: { line: 56, column: 76 } }, type: "binary-expr", locations: [{ start: { line: 56, column: 13 }, end: { line: 56, column: 38 } }, { start: { line: 56, column: 42 }, end: { line: 56, column: 76 } }], line: 56 }, "13": { loc: { start: { line: 70, column: 2 }, end: { line: 72, column: 3 } }, type: "if", locations: [{ start: { line: 70, column: 2 }, end: { line: 72, column: 3 } }, { start: { line: 70, column: 2 }, end: { line: 72, column: 3 } }], line: 70 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0], "3": [0], "4": [0, 0], "5": [0, 0], "6": [0, 0], "7": [0, 0], "8": [0, 0], "9": [0, 0], "10": [0, 0], "11": [0, 0], "12": [0, 0], "13": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/store/common.js"], names: ["abbreviateValues", "configureStore", "debug", "reduxDebug", "value", "options", "depth", "stringLimit", "arrayLimit", "recurseLimit", "recurse", "child", "Array", "length", "slice", "map", "Object", "k", "v", "inner", "extractAmount", "leading", "Math", "ceil", "trailing", "floor", "reducer", "saga", "initialState", "composeEnhancers", "sagaMiddleware", "compose", "loggerMiddleware", "log", "stateTransformer", "state", "actionTransformer", "store", "run"], mappings: ";;;;;;;;;;;;;;QAQgBA,gB,GAAAA,gB;kBAyCQC,c;;AAjDxB;;;;AAIA;;AACA;;;;AACA;;;;;;AALA,MAAMC,QAAQ,qBAAY,uBAAZ,CAAd;AACA,MAAMC,aAAa,qBAAY,gBAAZ,CAAnB;;AAMO,SAASH,gBAAT,CAA0BI,KAA1B,EAAiCC,UAAU,EAA3C,EAA+CC,QAAQ,CAAvD,EAA0D;AAC/DD,UAAQE,WAAR,GAAsBF,QAAQE,WAAR,IAAuB,EAA7C;AACAF,UAAQG,UAAR,GAAqBH,QAAQG,UAAR,IAAsB,CAA3C;AACAH,UAAQI,YAAR,GAAuBJ,QAAQI,YAAR,IAAwB,CAA/C;;AAEA,MAAIH,QAAQD,QAAQI,YAApB,EAAkC;AAChC,WAAO,KAAP;AACD;;AAED,QAAMC,UAAWC,KAAD,IAAWX,iBAAiBW,KAAjB,EAAwBN,OAAxB,EAAiCC,QAAQ,CAAzC,CAA3B;;AAEA,MAAIF,iBAAiBQ,KAArB,EAA4B;AAC1B,QAAIR,MAAMS,MAAN,GAAeR,QAAQG,UAA3B,EAAuC;AACrCJ,cAAQ,CACN,GAAGA,MAAMU,KAAN,CAAY,CAAZ,EAAeT,QAAQG,UAAR,GAAqB,CAApC,CADG,EAEN,KAFM,EAGN,GAAGJ,MAAMU,KAAN,CAAYV,MAAMS,MAAN,GAAeR,QAAQG,UAAR,GAAqB,CAApC,GAAwC,CAApD,CAHG,CAAR;AAKD;;AAED,WAAOJ,MAAMW,GAAN,CAAUL,OAAV,CAAP;AAED,GAXD,MAWO,IAAIN,iBAAiBY,MAArB,EAA6B;AAClC,WAAO,sBAAc,EAAd,EACL,GAAG,uBAAeZ,KAAf,EAAsBW,GAAtB,CACD,CAAC,CAACE,CAAD,EAAIC,CAAJ,CAAD,MAAa,EAAE,CAACR,QAAQO,CAAR,CAAD,GAAcP,QAAQQ,CAAR,CAAhB,EAAb,CADC,CADE,CAAP;AAMD,GAPM,MAOA,IAAI,OAAOd,KAAP,KAAiB,QAAjB,IAA6BA,MAAMS,MAAN,GAAeR,QAAQE,WAAxD,EAAqE;AAC1E,QAAIY,QAAQ,KAAZ;AACA,QAAIC,gBAAgB,CAACf,QAAQE,WAAR,GAAsBY,MAAMN,MAA7B,IAAuC,CAA3D;AACA,QAAIQ,UAAUjB,MAAMU,KAAN,CAAY,CAAZ,EAAeQ,KAAKC,IAAL,CAAUH,aAAV,CAAf,CAAd;AACA,QAAII,WAAWpB,MAAMU,KAAN,CAAYV,MAAMS,MAAN,GAAeS,KAAKG,KAAL,CAAWL,aAAX,CAA3B,CAAf;AACA,WAAQ,GAAEC,OAAQ,GAAEF,KAAM,GAAEK,QAAS,EAArC;AAED,GAPM,MAOA;AACL,WAAOpB,KAAP;AACD;AACF;;AAEc,SAASH,cAAT,CAAyByB,OAAzB,EAAkCC,IAAlC,EAAwCC,YAAxC,EAAsDC,gBAAtD,EAAwE;AACrF,QAAMC,iBAAiB,0BAAvB;;AAEA,MAAI,CAACD,gBAAL,EAAuB;AACrBA,uBAAmBE,cAAnB;AACD;;AAED,QAAMC,mBAAmB,8BAAa;AACpCC,SAAK9B,UAD+B;AAEpC+B,sBAAmBC,KAAD,IAAWnC,iBAAiBmC,KAAjB,EAAwB;AACnD3B,kBAAY,CADuC;AAEnDC,oBAAc;AAFqC,KAAxB,CAFO;AAMpC2B,uBAAmBpC;AANiB,GAAb,CAAzB;;AASA,MAAIqC,QAAQ,wBACVX,OADU,EACDE,YADC,EAGVC,iBACE,4BACEC,cADF,EAEEE,gBAFF,CADF,CAHU,CAAZ;;AAWAF,iBAAeQ,GAAf,CAAmBX,IAAnB;;AAEA,SAAOU,KAAP;AACD", file: "common.js", sourceRoot: "/Users/tyler/projects/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:store:common\");\nconst reduxDebug = debugModule(\"debugger:redux\");\n\nimport { compose, createStore, applyMiddleware } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport createLogger from \"redux-cli-logger\";\n\nexport function abbreviateValues(value, options = {}, depth = 0) {\n  options.stringLimit = options.stringLimit || 66;\n  options.arrayLimit = options.arrayLimit || 8;\n  options.recurseLimit = options.recurseLimit || 4;\n\n  if (depth > options.recurseLimit) {\n    return \"...\";\n  }\n\n  const recurse = (child) => abbreviateValues(child, options, depth + 1);\n\n  if (value instanceof Array) {\n    if (value.length > options.arrayLimit) {\n      value = [\n        ...value.slice(0, options.arrayLimit / 2),\n        \"...\",\n        ...value.slice(value.length - options.arrayLimit / 2 + 1)\n      ];\n    }\n\n    return value.map(recurse);\n\n  } else if (value instanceof Object) {\n    return Object.assign({},\n      ...Object.entries(value).map(\n        ([k, v]) => ({ [recurse(k)]: recurse(v) })\n      )\n    );\n\n  } else if (typeof value === \"string\" && value.length > options.stringLimit) {\n    let inner = \"...\";\n    let extractAmount = (options.stringLimit - inner.length) / 2;\n    let leading = value.slice(0, Math.ceil(extractAmount));\n    let trailing = value.slice(value.length - Math.floor(extractAmount));\n    return `${leading}${inner}${trailing}`;\n\n  } else {\n    return value;\n  }\n}\n\nexport default function configureStore (reducer, saga, initialState, composeEnhancers) {\n  const sagaMiddleware = createSagaMiddleware();\n\n  if (!composeEnhancers) {\n    composeEnhancers = compose;\n  }\n\n  const loggerMiddleware = createLogger({\n    log: reduxDebug,\n    stateTransformer: (state) => abbreviateValues(state, {\n      arrayLimit: 4,\n      recurseLimit: 3\n    }),\n    actionTransformer: abbreviateValues,\n  });\n\n  let store = createStore(\n    reducer, initialState,\n\n    composeEnhancers(\n      applyMiddleware(\n        sagaMiddleware,\n        loggerMiddleware\n      )\n    )\n  );\n\n  sagaMiddleware.run(saga);\n\n  return store;\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_1e3rpbayv7.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _entries = (cov_1e3rpbayv7.s[1]++, __webpack_require__(8));var _entries2 = (cov_1e3rpbayv7.s[2]++, _interopRequireDefault(_entries));var _assign = (cov_1e3rpbayv7.s[3]++, __webpack_require__(9));var _assign2 = (cov_1e3rpbayv7.s[4]++, _interopRequireDefault(_assign));cov_1e3rpbayv7.s[5]++;exports.abbreviateValues = abbreviateValues;cov_1e3rpbayv7.s[6]++;exports.default = configureStore;var _debug = (cov_1e3rpbayv7.s[7]++, __webpack_require__(0));var _debug2 = (cov_1e3rpbayv7.s[8]++, _interopRequireDefault(_debug));var _redux = (cov_1e3rpbayv7.s[9]++, __webpack_require__(16));var _reduxSaga = (cov_1e3rpbayv7.s[10]++, __webpack_require__(56));var _reduxSaga2 = (cov_1e3rpbayv7.s[11]++, _interopRequireDefault(_reduxSaga));var _reduxCliLogger = (cov_1e3rpbayv7.s[12]++, __webpack_require__(57));var _reduxCliLogger2 = (cov_1e3rpbayv7.s[13]++, _interopRequireDefault(_reduxCliLogger));function _interopRequireDefault(obj) {
  cov_1e3rpbayv7.f[0]++;cov_1e3rpbayv7.s[14]++;return (cov_1e3rpbayv7.b[1][0]++, obj) && (cov_1e3rpbayv7.b[1][1]++, obj.__esModule) ? (cov_1e3rpbayv7.b[0][0]++, obj) : (cov_1e3rpbayv7.b[0][1]++, { default: obj });
}const debug = (cov_1e3rpbayv7.s[15]++, (0, _debug2.default)("debugger:store:common"));const reduxDebug = (cov_1e3rpbayv7.s[16]++, (0, _debug2.default)("debugger:redux"));function abbreviateValues(value, options = (cov_1e3rpbayv7.b[2][0]++, {}), depth = (cov_1e3rpbayv7.b[3][0]++, 0)) {
  cov_1e3rpbayv7.f[1]++;cov_1e3rpbayv7.s[17]++;options.stringLimit = (cov_1e3rpbayv7.b[4][0]++, options.stringLimit) || (cov_1e3rpbayv7.b[4][1]++, 66);cov_1e3rpbayv7.s[18]++;options.arrayLimit = (cov_1e3rpbayv7.b[5][0]++, options.arrayLimit) || (cov_1e3rpbayv7.b[5][1]++, 8);cov_1e3rpbayv7.s[19]++;options.recurseLimit = (cov_1e3rpbayv7.b[6][0]++, options.recurseLimit) || (cov_1e3rpbayv7.b[6][1]++, 4);cov_1e3rpbayv7.s[20]++;if (depth > options.recurseLimit) {
    cov_1e3rpbayv7.b[7][0]++;cov_1e3rpbayv7.s[21]++;return "...";
  } else {
    cov_1e3rpbayv7.b[7][1]++;
  }cov_1e3rpbayv7.s[22]++;const recurse = child => {
    cov_1e3rpbayv7.f[2]++;cov_1e3rpbayv7.s[23]++;return abbreviateValues(child, options, depth + 1);
  };cov_1e3rpbayv7.s[24]++;if (value instanceof Array) {
    cov_1e3rpbayv7.b[8][0]++;cov_1e3rpbayv7.s[25]++;if (value.length > options.arrayLimit) {
      cov_1e3rpbayv7.b[9][0]++;cov_1e3rpbayv7.s[26]++;value = [...value.slice(0, options.arrayLimit / 2), "...", ...value.slice(value.length - options.arrayLimit / 2 + 1)];
    } else {
      cov_1e3rpbayv7.b[9][1]++;
    }cov_1e3rpbayv7.s[27]++;return value.map(recurse);
  } else {
    cov_1e3rpbayv7.b[8][1]++;cov_1e3rpbayv7.s[28]++;if (value instanceof Object) {
      cov_1e3rpbayv7.b[10][0]++;cov_1e3rpbayv7.s[29]++;return (0, _assign2.default)({}, ...(0, _entries2.default)(value).map(([k, v]) => {
        cov_1e3rpbayv7.f[3]++;cov_1e3rpbayv7.s[30]++;return { [recurse(k)]: recurse(v) };
      }));
    } else {
      cov_1e3rpbayv7.b[10][1]++;cov_1e3rpbayv7.s[31]++;if ((cov_1e3rpbayv7.b[12][0]++, typeof value === "string") && (cov_1e3rpbayv7.b[12][1]++, value.length > options.stringLimit)) {
        cov_1e3rpbayv7.b[11][0]++;let inner = (cov_1e3rpbayv7.s[32]++, "...");let extractAmount = (cov_1e3rpbayv7.s[33]++, (options.stringLimit - inner.length) / 2);let leading = (cov_1e3rpbayv7.s[34]++, value.slice(0, Math.ceil(extractAmount)));let trailing = (cov_1e3rpbayv7.s[35]++, value.slice(value.length - Math.floor(extractAmount)));cov_1e3rpbayv7.s[36]++;return `${leading}${inner}${trailing}`;
      } else {
        cov_1e3rpbayv7.b[11][1]++;cov_1e3rpbayv7.s[37]++;return value;
      }
    }
  }
}function configureStore(reducer, saga, initialState, composeEnhancers) {
  cov_1e3rpbayv7.f[4]++;const sagaMiddleware = (cov_1e3rpbayv7.s[38]++, (0, _reduxSaga2.default)());cov_1e3rpbayv7.s[39]++;if (!composeEnhancers) {
    cov_1e3rpbayv7.b[13][0]++;cov_1e3rpbayv7.s[40]++;composeEnhancers = _redux.compose;
  } else {
    cov_1e3rpbayv7.b[13][1]++;
  }const loggerMiddleware = (cov_1e3rpbayv7.s[41]++, (0, _reduxCliLogger2.default)({ log: reduxDebug, stateTransformer: state => {
      cov_1e3rpbayv7.f[5]++;cov_1e3rpbayv7.s[42]++;return abbreviateValues(state, { arrayLimit: 4, recurseLimit: 3 });
    }, actionTransformer: abbreviateValues }));let store = (cov_1e3rpbayv7.s[43]++, (0, _redux.createStore)(reducer, initialState, composeEnhancers((0, _redux.applyMiddleware)(sagaMiddleware, loggerMiddleware))));cov_1e3rpbayv7.s[44]++;sagaMiddleware.run(saga);cov_1e3rpbayv7.s[45]++;return store;
}

/***/ }),
/* 56 */
/***/ (function(module, exports) {

module.exports = require("redux-saga");

/***/ }),
/* 57 */
/***/ (function(module, exports) {

module.exports = require("redux-cli-logger");

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

var json = typeof JSON !== 'undefined' ? JSON : __webpack_require__(59);

module.exports = function (obj, opts) {
    if (!opts) opts = {};
    if (typeof opts === 'function') opts = { cmp: opts };
    var space = opts.space || '';
    if (typeof space === 'number') space = Array(space+1).join(' ');
    var cycles = (typeof opts.cycles === 'boolean') ? opts.cycles : false;
    var replacer = opts.replacer || function(key, value) { return value; };

    var cmp = opts.cmp && (function (f) {
        return function (node) {
            return function (a, b) {
                var aobj = { key: a, value: node[a] };
                var bobj = { key: b, value: node[b] };
                return f(aobj, bobj);
            };
        };
    })(opts.cmp);

    var seen = [];
    return (function stringify (parent, key, node, level) {
        var indent = space ? ('\n' + new Array(level + 1).join(space)) : '';
        var colonSeparator = space ? ': ' : ':';

        if (node && node.toJSON && typeof node.toJSON === 'function') {
            node = node.toJSON();
        }

        node = replacer.call(parent, key, node);

        if (node === undefined) {
            return;
        }
        if (typeof node !== 'object' || node === null) {
            return json.stringify(node);
        }
        if (isArray(node)) {
            var out = [];
            for (var i = 0; i < node.length; i++) {
                var item = stringify(node, i, node[i], level+1) || json.stringify(null);
                out.push(indent + space + item);
            }
            return '[' + out.join(',') + indent + ']';
        }
        else {
            if (seen.indexOf(node) !== -1) {
                if (cycles) return json.stringify('__cycle__');
                throw new TypeError('Converting circular structure to JSON');
            }
            else seen.push(node);

            var keys = objectKeys(node).sort(cmp && cmp(node));
            var out = [];
            for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                var value = stringify(node, key, node[key], level+1);

                if(!value) continue;

                var keyValue = json.stringify(key)
                    + colonSeparator
                    + value;
                ;
                out.push(indent + space + keyValue);
            }
            seen.splice(seen.indexOf(node), 1);
            return '{' + out.join(',') + indent + '}';
        }
    })({ '': obj }, '', obj, 0);
};

var isArray = Array.isArray || function (x) {
    return {}.toString.call(x) === '[object Array]';
};

var objectKeys = Object.keys || function (obj) {
    var has = Object.prototype.hasOwnProperty || function () { return true };
    var keys = [];
    for (var key in obj) {
        if (has.call(obj, key)) keys.push(key);
    }
    return keys;
};


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

exports.parse = __webpack_require__(60);
exports.stringify = __webpack_require__(61);


/***/ }),
/* 60 */
/***/ (function(module, exports) {

var at, // The index of the current character
    ch, // The current character
    escapee = {
        '"':  '"',
        '\\': '\\',
        '/':  '/',
        b:    '\b',
        f:    '\f',
        n:    '\n',
        r:    '\r',
        t:    '\t'
    },
    text,

    error = function (m) {
        // Call error when something is wrong.
        throw {
            name:    'SyntaxError',
            message: m,
            at:      at,
            text:    text
        };
    },
    
    next = function (c) {
        // If a c parameter is provided, verify that it matches the current character.
        if (c && c !== ch) {
            error("Expected '" + c + "' instead of '" + ch + "'");
        }
        
        // Get the next character. When there are no more characters,
        // return the empty string.
        
        ch = text.charAt(at);
        at += 1;
        return ch;
    },
    
    number = function () {
        // Parse a number value.
        var number,
            string = '';
        
        if (ch === '-') {
            string = '-';
            next('-');
        }
        while (ch >= '0' && ch <= '9') {
            string += ch;
            next();
        }
        if (ch === '.') {
            string += '.';
            while (next() && ch >= '0' && ch <= '9') {
                string += ch;
            }
        }
        if (ch === 'e' || ch === 'E') {
            string += ch;
            next();
            if (ch === '-' || ch === '+') {
                string += ch;
                next();
            }
            while (ch >= '0' && ch <= '9') {
                string += ch;
                next();
            }
        }
        number = +string;
        if (!isFinite(number)) {
            error("Bad number");
        } else {
            return number;
        }
    },
    
    string = function () {
        // Parse a string value.
        var hex,
            i,
            string = '',
            uffff;
        
        // When parsing for string values, we must look for " and \ characters.
        if (ch === '"') {
            while (next()) {
                if (ch === '"') {
                    next();
                    return string;
                } else if (ch === '\\') {
                    next();
                    if (ch === 'u') {
                        uffff = 0;
                        for (i = 0; i < 4; i += 1) {
                            hex = parseInt(next(), 16);
                            if (!isFinite(hex)) {
                                break;
                            }
                            uffff = uffff * 16 + hex;
                        }
                        string += String.fromCharCode(uffff);
                    } else if (typeof escapee[ch] === 'string') {
                        string += escapee[ch];
                    } else {
                        break;
                    }
                } else {
                    string += ch;
                }
            }
        }
        error("Bad string");
    },

    white = function () {

// Skip whitespace.

        while (ch && ch <= ' ') {
            next();
        }
    },

    word = function () {

// true, false, or null.

        switch (ch) {
        case 't':
            next('t');
            next('r');
            next('u');
            next('e');
            return true;
        case 'f':
            next('f');
            next('a');
            next('l');
            next('s');
            next('e');
            return false;
        case 'n':
            next('n');
            next('u');
            next('l');
            next('l');
            return null;
        }
        error("Unexpected '" + ch + "'");
    },

    value,  // Place holder for the value function.

    array = function () {

// Parse an array value.

        var array = [];

        if (ch === '[') {
            next('[');
            white();
            if (ch === ']') {
                next(']');
                return array;   // empty array
            }
            while (ch) {
                array.push(value());
                white();
                if (ch === ']') {
                    next(']');
                    return array;
                }
                next(',');
                white();
            }
        }
        error("Bad array");
    },

    object = function () {

// Parse an object value.

        var key,
            object = {};

        if (ch === '{') {
            next('{');
            white();
            if (ch === '}') {
                next('}');
                return object;   // empty object
            }
            while (ch) {
                key = string();
                white();
                next(':');
                if (Object.hasOwnProperty.call(object, key)) {
                    error('Duplicate key "' + key + '"');
                }
                object[key] = value();
                white();
                if (ch === '}') {
                    next('}');
                    return object;
                }
                next(',');
                white();
            }
        }
        error("Bad object");
    };

value = function () {

// Parse a JSON value. It could be an object, an array, a string, a number,
// or a word.

    white();
    switch (ch) {
    case '{':
        return object();
    case '[':
        return array();
    case '"':
        return string();
    case '-':
        return number();
    default:
        return ch >= '0' && ch <= '9' ? number() : word();
    }
};

// Return the json_parse function. It will have access to all of the above
// functions and variables.

module.exports = function (source, reviver) {
    var result;
    
    text = source;
    at = 0;
    ch = ' ';
    result = value();
    white();
    if (ch) {
        error("Syntax error");
    }

    // If there is a reviver function, we recursively walk the new structure,
    // passing each name/value pair to the reviver function for possible
    // transformation, starting with a temporary root object that holds the result
    // in an empty key. If there is not a reviver function, we simply return the
    // result.

    return typeof reviver === 'function' ? (function walk(holder, key) {
        var k, v, value = holder[key];
        if (value && typeof value === 'object') {
            for (k in value) {
                if (Object.prototype.hasOwnProperty.call(value, k)) {
                    v = walk(value, k);
                    if (v !== undefined) {
                        value[k] = v;
                    } else {
                        delete value[k];
                    }
                }
            }
        }
        return reviver.call(holder, key, value);
    }({'': result}, '')) : result;
};


/***/ }),
/* 61 */
/***/ (function(module, exports) {

var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
    escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
    gap,
    indent,
    meta = {    // table of character substitutions
        '\b': '\\b',
        '\t': '\\t',
        '\n': '\\n',
        '\f': '\\f',
        '\r': '\\r',
        '"' : '\\"',
        '\\': '\\\\'
    },
    rep;

function quote(string) {
    // If the string contains no control characters, no quote characters, and no
    // backslash characters, then we can safely slap some quotes around it.
    // Otherwise we must also replace the offending characters with safe escape
    // sequences.
    
    escapable.lastIndex = 0;
    return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
        var c = meta[a];
        return typeof c === 'string' ? c :
            '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
    }) + '"' : '"' + string + '"';
}

function str(key, holder) {
    // Produce a string from holder[key].
    var i,          // The loop counter.
        k,          // The member key.
        v,          // The member value.
        length,
        mind = gap,
        partial,
        value = holder[key];
    
    // If the value has a toJSON method, call it to obtain a replacement value.
    if (value && typeof value === 'object' &&
            typeof value.toJSON === 'function') {
        value = value.toJSON(key);
    }
    
    // If we were called with a replacer function, then call the replacer to
    // obtain a replacement value.
    if (typeof rep === 'function') {
        value = rep.call(holder, key, value);
    }
    
    // What happens next depends on the value's type.
    switch (typeof value) {
        case 'string':
            return quote(value);
        
        case 'number':
            // JSON numbers must be finite. Encode non-finite numbers as null.
            return isFinite(value) ? String(value) : 'null';
        
        case 'boolean':
        case 'null':
            // If the value is a boolean or null, convert it to a string. Note:
            // typeof null does not produce 'null'. The case is included here in
            // the remote chance that this gets fixed someday.
            return String(value);
            
        case 'object':
            if (!value) return 'null';
            gap += indent;
            partial = [];
            
            // Array.isArray
            if (Object.prototype.toString.apply(value) === '[object Array]') {
                length = value.length;
                for (i = 0; i < length; i += 1) {
                    partial[i] = str(i, value) || 'null';
                }
                
                // Join all of the elements together, separated with commas, and
                // wrap them in brackets.
                v = partial.length === 0 ? '[]' : gap ?
                    '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' :
                    '[' + partial.join(',') + ']';
                gap = mind;
                return v;
            }
            
            // If the replacer is an array, use it to select the members to be
            // stringified.
            if (rep && typeof rep === 'object') {
                length = rep.length;
                for (i = 0; i < length; i += 1) {
                    k = rep[i];
                    if (typeof k === 'string') {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            }
            else {
                // Otherwise, iterate through all of the keys in the object.
                for (k in value) {
                    if (Object.prototype.hasOwnProperty.call(value, k)) {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            }
            
        // Join all of the member texts together, separated with commas,
        // and wrap them in braces.

        v = partial.length === 0 ? '{}' : gap ?
            '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' :
            '{' + partial.join(',') + '}';
        gap = mind;
        return v;
    }
}

module.exports = function (value, replacer, space) {
    var i;
    gap = '';
    indent = '';
    
    // If the space parameter is a number, make an indent string containing that
    // many spaces.
    if (typeof space === 'number') {
        for (i = 0; i < space; i += 1) {
            indent += ' ';
        }
    }
    // If the space parameter is a string, it will be used as the indent string.
    else if (typeof space === 'string') {
        indent = space;
    }

    // If there is a replacer, it must be a function or an array.
    // Otherwise, throw an error.
    rep = replacer;
    if (replacer && typeof replacer !== 'function'
    && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) {
        throw new Error('JSON.stringify');
    }
    
    // Make a fake root object containing our value under the key of ''.
    // Return the result of stringifying the value.
    return str('', {'': value});
};


/***/ }),
/* 62 */
/***/ (function(module, exports) {

module.exports = require("truffle-solidity-utils");

/***/ }),
/* 63 */
/***/ (function(module, exports) {

module.exports = require("truffle-code-utils");

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// An augmented AVL Tree where each node maintains a list of records and their search intervals.
// Record is composed of an interval and its underlying data, sent by a client. This allows the
// interval tree to have the same interval inserted multiple times, as long its data is different.
// Both insertion and deletion require O(log n) time. Searching requires O(k*logn) time, where `k`
// is the number of intervals in the output list.
Object.defineProperty(exports, "__esModule", { value: true });
var isSame = __webpack_require__(65);
function height(node) {
    if (node === undefined) {
        return -1;
    }
    else {
        return node.height;
    }
}
var Node = /** @class */ (function () {
    function Node(intervalTree, record) {
        this.intervalTree = intervalTree;
        this.records = [];
        this.height = 0;
        this.key = record.low;
        this.max = record.high;
        // Save the array of all records with the same key for this node
        this.records.push(record);
    }
    // Gets the highest record.high value for this node
    Node.prototype.getNodeHigh = function () {
        var high = this.records[0].high;
        for (var i = 1; i < this.records.length; i++) {
            if (this.records[i].high > high) {
                high = this.records[i].high;
            }
        }
        return high;
    };
    // Updates height value of the node. Called during insertion, rebalance, removal
    Node.prototype.updateHeight = function () {
        this.height = Math.max(height(this.left), height(this.right)) + 1;
    };
    // Updates the max value of all the parents after inserting into already existing node, as well as
    // removing the node completely or removing the record of an already existing node. Starts with
    // the parent of an affected node and bubbles up to root
    Node.prototype.updateMaxOfParents = function () {
        if (this === undefined) {
            return;
        }
        var thisHigh = this.getNodeHigh();
        if (this.left !== undefined && this.right !== undefined) {
            this.max = Math.max(Math.max(this.left.max, this.right.max), thisHigh);
        }
        else if (this.left !== undefined && this.right === undefined) {
            this.max = Math.max(this.left.max, thisHigh);
        }
        else if (this.left === undefined && this.right !== undefined) {
            this.max = Math.max(this.right.max, thisHigh);
        }
        else {
            this.max = thisHigh;
        }
        if (this.parent) {
            this.parent.updateMaxOfParents();
        }
    };
    /*
    Left-Left case:
  
           z                                      y
          / \                                   /   \
         y   T4      Right Rotate (z)          x     z
        / \          - - - - - - - - ->       / \   / \
       x   T3                                T1 T2 T3 T4
      / \
    T1   T2
  
    Left-Right case:
  
         z                               z                           x
        / \                             / \                        /   \
       y   T4  Left Rotate (y)         x  T4  Right Rotate(z)     y     z
      / \      - - - - - - - - ->     / \      - - - - - - - ->  / \   / \
    T1   x                           y  T3                      T1 T2 T3 T4
        / \                         / \
      T2   T3                      T1 T2
    */
    // Handles Left-Left case and Left-Right case after rebalancing AVL tree
    Node.prototype._updateMaxAfterRightRotate = function () {
        var parent = this.parent;
        var left = parent.left;
        // Update max of left sibling (x in first case, y in second)
        var thisParentLeftHigh = left.getNodeHigh();
        if (left.left === undefined && left.right !== undefined) {
            left.max = Math.max(thisParentLeftHigh, left.right.max);
        }
        else if (left.left !== undefined && left.right === undefined) {
            left.max = Math.max(thisParentLeftHigh, left.left.max);
        }
        else if (left.left === undefined && left.right === undefined) {
            left.max = thisParentLeftHigh;
        }
        else {
            left.max = Math.max(Math.max(left.left.max, left.right.max), thisParentLeftHigh);
        }
        // Update max of itself (z)
        var thisHigh = this.getNodeHigh();
        if (this.left === undefined && this.right !== undefined) {
            this.max = Math.max(thisHigh, this.right.max);
        }
        else if (this.left !== undefined && this.right === undefined) {
            this.max = Math.max(thisHigh, this.left.max);
        }
        else if (this.left === undefined && this.right === undefined) {
            this.max = thisHigh;
        }
        else {
            this.max = Math.max(Math.max(this.left.max, this.right.max), thisHigh);
        }
        // Update max of parent (y in first case, x in second)
        parent.max = Math.max(Math.max(parent.left.max, parent.right.max), parent.getNodeHigh());
    };
    /*
    Right-Right case:
  
      z                               y
     / \                            /   \
    T1  y     Left Rotate(z)       z     x
       / \   - - - - - - - ->     / \   / \
      T2  x                      T1 T2 T3 T4
         / \
        T3 T4
  
    Right-Left case:
  
       z                            z                            x
      / \                          / \                         /   \
     T1  y   Right Rotate (y)     T1  x      Left Rotate(z)   z     y
        / \  - - - - - - - - ->      / \   - - - - - - - ->  / \   / \
       x  T4                        T2  y                   T1 T2 T3 T4
      / \                              / \
    T2   T3                           T3 T4
    */
    // Handles Right-Right case and Right-Left case in rebalancing AVL tree
    Node.prototype._updateMaxAfterLeftRotate = function () {
        var parent = this.parent;
        var right = parent.right;
        // Update max of right sibling (x in first case, y in second)
        var thisParentRightHigh = right.getNodeHigh();
        if (right.left === undefined && right.right !== undefined) {
            right.max = Math.max(thisParentRightHigh, right.right.max);
        }
        else if (right.left !== undefined && right.right === undefined) {
            right.max = Math.max(thisParentRightHigh, right.left.max);
        }
        else if (right.left === undefined && right.right === undefined) {
            right.max = thisParentRightHigh;
        }
        else {
            right.max = Math.max(Math.max(right.left.max, right.right.max), thisParentRightHigh);
        }
        // Update max of itself (z)
        var thisHigh = this.getNodeHigh();
        if (this.left === undefined && this.right !== undefined) {
            this.max = Math.max(thisHigh, this.right.max);
        }
        else if (this.left !== undefined && this.right === undefined) {
            this.max = Math.max(thisHigh, this.left.max);
        }
        else if (this.left === undefined && this.right === undefined) {
            this.max = thisHigh;
        }
        else {
            this.max = Math.max(Math.max(this.left.max, this.right.max), thisHigh);
        }
        // Update max of parent (y in first case, x in second)
        parent.max = Math.max(Math.max(parent.left.max, right.max), parent.getNodeHigh());
    };
    Node.prototype._leftRotate = function () {
        var rightChild = this.right;
        rightChild.parent = this.parent;
        if (rightChild.parent === undefined) {
            this.intervalTree.root = rightChild;
        }
        else {
            if (rightChild.parent.left === this) {
                rightChild.parent.left = rightChild;
            }
            else if (rightChild.parent.right === this) {
                rightChild.parent.right = rightChild;
            }
        }
        this.right = rightChild.left;
        if (this.right !== undefined) {
            this.right.parent = this;
        }
        rightChild.left = this;
        this.parent = rightChild;
        this.updateHeight();
        rightChild.updateHeight();
    };
    Node.prototype._rightRotate = function () {
        var leftChild = this.left;
        leftChild.parent = this.parent;
        if (leftChild.parent === undefined) {
            this.intervalTree.root = leftChild;
        }
        else {
            if (leftChild.parent.left === this) {
                leftChild.parent.left = leftChild;
            }
            else if (leftChild.parent.right === this) {
                leftChild.parent.right = leftChild;
            }
        }
        this.left = leftChild.right;
        if (this.left !== undefined) {
            this.left.parent = this;
        }
        leftChild.right = this;
        this.parent = leftChild;
        this.updateHeight();
        leftChild.updateHeight();
    };
    // Rebalances the tree if the height value between two nodes of the same parent is greater than
    // two. There are 4 cases that can happen which are outlined in the graphics above
    Node.prototype._rebalance = function () {
        if (height(this.left) >= 2 + height(this.right)) {
            var left = this.left;
            if (height(left.left) >= height(left.right)) {
                // Left-Left case
                this._rightRotate();
                this._updateMaxAfterRightRotate();
            }
            else {
                // Left-Right case
                left._leftRotate();
                this._rightRotate();
                this._updateMaxAfterRightRotate();
            }
        }
        else if (height(this.right) >= 2 + height(this.left)) {
            var right = this.right;
            if (height(right.right) >= height(right.left)) {
                // Right-Right case
                this._leftRotate();
                this._updateMaxAfterLeftRotate();
            }
            else {
                // Right-Left case
                right._rightRotate();
                this._leftRotate();
                this._updateMaxAfterLeftRotate();
            }
        }
    };
    Node.prototype.insert = function (record) {
        if (record.low < this.key) {
            // Insert into left subtree
            if (this.left === undefined) {
                this.left = new Node(this.intervalTree, record);
                this.left.parent = this;
            }
            else {
                this.left.insert(record);
            }
        }
        else {
            // Insert into right subtree
            if (this.right === undefined) {
                this.right = new Node(this.intervalTree, record);
                this.right.parent = this;
            }
            else {
                this.right.insert(record);
            }
        }
        // Update the max value of this ancestor if needed
        if (this.max < record.high) {
            this.max = record.high;
        }
        // Update height of each node
        this.updateHeight();
        // Rebalance the tree to ensure all operations are executed in O(logn) time. This is especially
        // important in searching, as the tree has a high chance of degenerating without the rebalancing
        this._rebalance();
    };
    Node.prototype._getOverlappingRecords = function (currentNode, low, high) {
        if (currentNode.key <= high && low <= currentNode.getNodeHigh()) {
            // Nodes are overlapping, check if individual records in the node are overlapping
            var tempResults = [];
            for (var i = 0; i < currentNode.records.length; i++) {
                if (currentNode.records[i].high >= low) {
                    tempResults.push(currentNode.records[i]);
                }
            }
            return tempResults;
        }
        return [];
    };
    Node.prototype.search = function (low, high) {
        // Don't search nodes that don't exist
        if (this === undefined) {
            return [];
        }
        var leftSearch = [];
        var ownSearch = [];
        var rightSearch = [];
        // If interval is to the right of the rightmost point of any interval in this node and all its
        // children, there won't be any matches
        if (low > this.max) {
            return [];
        }
        // Search left children
        if (this.left !== undefined && this.left.max >= low) {
            leftSearch = this.left.search(low, high);
        }
        // Check this node
        ownSearch = this._getOverlappingRecords(this, low, high);
        // If interval is to the left of the start of this interval, then it can't be in any child to
        // the right
        if (high < this.key) {
            return leftSearch.concat(ownSearch);
        }
        // Otherwise, search right children
        if (this.right !== undefined) {
            rightSearch = this.right.search(low, high);
        }
        // Return accumulated results, if any
        return leftSearch.concat(ownSearch, rightSearch);
    };
    // Searches for a node by a `key` value
    Node.prototype.searchExisting = function (low) {
        if (this === undefined) {
            return undefined;
        }
        if (this.key === low) {
            return this;
        }
        else if (low < this.key) {
            if (this.left !== undefined) {
                return this.left.searchExisting(low);
            }
        }
        else {
            if (this.right !== undefined) {
                return this.right.searchExisting(low);
            }
        }
        return undefined;
    };
    // Returns the smallest node of the subtree
    Node.prototype._minValue = function () {
        if (this.left === undefined) {
            return this;
        }
        else {
            return this.left._minValue();
        }
    };
    Node.prototype.remove = function (node) {
        var parent = this.parent;
        if (node.key < this.key) {
            // Node to be removed is on the left side
            if (this.left !== undefined) {
                return this.left.remove(node);
            }
            else {
                return undefined;
            }
        }
        else if (node.key > this.key) {
            // Node to be removed is on the right side
            if (this.right !== undefined) {
                return this.right.remove(node);
            }
            else {
                return undefined;
            }
        }
        else {
            if (this.left !== undefined && this.right !== undefined) {
                // Node has two children
                var minValue = this.right._minValue();
                this.key = minValue.key;
                this.records = minValue.records;
                return this.right.remove(this);
            }
            else if (parent.left === this) {
                // One child or no child case on left side
                if (this.right !== undefined) {
                    parent.left = this.right;
                    this.right.parent = parent;
                }
                else {
                    parent.left = this.left;
                    if (this.left !== undefined) {
                        this.left.parent = parent;
                    }
                }
                parent.updateMaxOfParents();
                parent.updateHeight();
                parent._rebalance();
                return this;
            }
            else if (parent.right === this) {
                // One child or no child case on right side
                if (this.right !== undefined) {
                    parent.right = this.right;
                    this.right.parent = parent;
                }
                else {
                    parent.right = this.left;
                    if (this.left !== undefined) {
                        this.left.parent = parent;
                    }
                }
                parent.updateMaxOfParents();
                parent.updateHeight();
                parent._rebalance();
                return this;
            }
        }
    };
    return Node;
}());
exports.Node = Node;
var IntervalTree = /** @class */ (function () {
    function IntervalTree() {
        this.count = 0;
    }
    IntervalTree.prototype.insert = function (record) {
        if (record.low > record.high) {
            throw new Error('`low` value must be lower or equal to `high` value');
        }
        if (this.root === undefined) {
            // Base case: Tree is empty, new node becomes root
            this.root = new Node(this, record);
            this.count++;
            return true;
        }
        else {
            // Otherwise, check if node already exists with the same key
            var node = this.root.searchExisting(record.low);
            if (node !== undefined) {
                // Check the records in this node if there already is the one with same low, high, data
                for (var i = 0; i < node.records.length; i++) {
                    if (isSame(node.records[i], record)) {
                        // This record is same as the one we're trying to insert; return false to indicate
                        // nothing has been inserted
                        return false;
                    }
                }
                // Add the record to the node
                node.records.push(record);
                // Update max of the node and its parents if necessary
                if (record.high > node.max) {
                    node.max = record.high;
                    if (node.parent) {
                        node.parent.updateMaxOfParents();
                    }
                }
                this.count++;
                return true;
            }
            else {
                // Node with this key doesn't already exist. Call insert function on root's node
                this.root.insert(record);
                this.count++;
                return true;
            }
        }
    };
    IntervalTree.prototype.search = function (low, high) {
        if (this.root === undefined) {
            // Tree is empty; return empty array
            return [];
        }
        else {
            return this.root.search(low, high);
        }
    };
    IntervalTree.prototype.remove = function (record) {
        if (this.root === undefined) {
            // Tree is empty; nothing to remove
            return false;
        }
        else {
            var node = this.root.searchExisting(record.low);
            if (node === undefined) {
                return false;
            }
            else if (node.records.length > 1) {
                var removedRecord = void 0;
                // Node with this key has 2 or more records. Find the one we need and remove it
                for (var i = 0; i < node.records.length; i++) {
                    if (isSame(node.records[i], record)) {
                        removedRecord = node.records[i];
                        node.records.splice(i, 1);
                        break;
                    }
                }
                if (removedRecord) {
                    removedRecord = undefined;
                    // Update max of that node and its parents if necessary
                    if (record.high === node.max) {
                        var nodeHigh = node.getNodeHigh();
                        if (node.left !== undefined && node.right !== undefined) {
                            node.max = Math.max(Math.max(node.left.max, node.right.max), nodeHigh);
                        }
                        else if (node.left !== undefined && node.right === undefined) {
                            node.max = Math.max(node.left.max, nodeHigh);
                        }
                        else if (node.left === undefined && node.right !== undefined) {
                            node.max = Math.max(node.right.max, nodeHigh);
                        }
                        else {
                            node.max = nodeHigh;
                        }
                        if (node.parent) {
                            node.parent.updateMaxOfParents();
                        }
                    }
                    this.count--;
                    return true;
                }
                else {
                    return false;
                }
            }
            else if (node.records.length === 1) {
                // Node with this key has only 1 record. Check if the remaining record in this node is
                // actually the one we want to remove
                if (isSame(node.records[0], record)) {
                    // The remaining record is the one we want to remove. Remove the whole node from the tree
                    if (this.root.key === node.key) {
                        // We're removing the root element. Create a dummy node that will temporarily take
                        // root's parent role
                        var rootParent = new Node(this, { low: record.low, high: record.low });
                        rootParent.left = this.root;
                        this.root.parent = rootParent;
                        var removedNode = this.root.remove(node);
                        this.root = rootParent.left;
                        if (this.root !== undefined) {
                            this.root.parent = undefined;
                        }
                        if (removedNode) {
                            removedNode = undefined;
                            this.count--;
                            return true;
                        }
                        else {
                            return false;
                        }
                    }
                    else {
                        var removedNode = this.root.remove(node);
                        if (removedNode) {
                            removedNode = undefined;
                            this.count--;
                            return true;
                        }
                        else {
                            return false;
                        }
                    }
                }
                else {
                    // The remaining record is not the one we want to remove
                    return false;
                }
            }
            else {
                // No records at all in this node?! Shouldn't happen
                return false;
            }
        }
    };
    IntervalTree.prototype.inOrder = function () {
        return new InOrder(this.root);
    };
    IntervalTree.prototype.preOrder = function () {
        return new PreOrder(this.root);
    };
    return IntervalTree;
}());
exports.IntervalTree = IntervalTree;
var DataIntervalTree = /** @class */ (function () {
    function DataIntervalTree() {
        this.tree = new IntervalTree();
    }
    DataIntervalTree.prototype.insert = function (low, high, data) {
        return this.tree.insert({ low: low, high: high, data: data });
    };
    DataIntervalTree.prototype.remove = function (low, high, data) {
        return this.tree.remove({ low: low, high: high, data: data });
    };
    DataIntervalTree.prototype.search = function (low, high) {
        return this.tree.search(low, high).map(function (v) { return v.data; });
    };
    DataIntervalTree.prototype.inOrder = function () {
        return this.tree.inOrder();
    };
    DataIntervalTree.prototype.preOrder = function () {
        return this.tree.preOrder();
    };
    Object.defineProperty(DataIntervalTree.prototype, "count", {
        get: function () {
            return this.tree.count;
        },
        enumerable: true,
        configurable: true
    });
    return DataIntervalTree;
}());
exports.default = DataIntervalTree;
var InOrder = /** @class */ (function () {
    function InOrder(startNode) {
        this.stack = [];
        if (startNode !== undefined) {
            this.push(startNode);
        }
    }
    InOrder.prototype.next = function () {
        // Will only happen if stack is empty and pop is called
        if (this.currentNode === undefined) {
            return {
                done: true,
                value: undefined,
            };
        }
        // Process this node
        if (this.i < this.currentNode.records.length) {
            return {
                done: false,
                value: this.currentNode.records[this.i++],
            };
        }
        if (this.currentNode.right !== undefined) {
            this.push(this.currentNode.right);
        }
        else {
            // Might pop the last and set this.currentNode = undefined
            this.pop();
        }
        return this.next();
    };
    InOrder.prototype.push = function (node) {
        this.currentNode = node;
        this.i = 0;
        while (this.currentNode.left !== undefined) {
            this.stack.push(this.currentNode);
            this.currentNode = this.currentNode.left;
        }
    };
    InOrder.prototype.pop = function () {
        this.currentNode = this.stack.pop();
        this.i = 0;
    };
    return InOrder;
}());
exports.InOrder = InOrder;
if (typeof Symbol === 'function') {
    InOrder.prototype[Symbol.iterator] = function () { return this; };
}
var PreOrder = /** @class */ (function () {
    function PreOrder(startNode) {
        this.stack = [];
        this.i = 0;
        this.currentNode = startNode;
    }
    PreOrder.prototype.next = function () {
        // Will only happen if stack is empty and pop is called,
        // which only happens if there is no right node (i.e we are done)
        if (this.currentNode === undefined) {
            return {
                done: true,
                value: undefined,
            };
        }
        // Process this node
        if (this.i < this.currentNode.records.length) {
            return {
                done: false,
                value: this.currentNode.records[this.i++],
            };
        }
        if (this.currentNode.right !== undefined) {
            this.push(this.currentNode.right);
        }
        if (this.currentNode.left !== undefined) {
            this.push(this.currentNode.left);
        }
        this.pop();
        return this.next();
    };
    PreOrder.prototype.push = function (node) {
        this.stack.push(node);
    };
    PreOrder.prototype.pop = function () {
        this.currentNode = this.stack.pop();
        this.i = 0;
    };
    return PreOrder;
}());
exports.PreOrder = PreOrder;
if (typeof Symbol === 'function') {
    PreOrder.prototype[Symbol.iterator] = function () { return this; };
}
//# sourceMappingURL=index.js.map

/***/ }),
/* 65 */
/***/ (function(module, exports) {

//

module.exports = function shallowEqual(objA, objB, compare, compareContext) {
  var ret = compare ? compare.call(compareContext, objA, objB) : void 0;

  if (ret !== void 0) {
    return !!ret;
  }

  if (objA === objB) {
    return true;
  }

  if (typeof objA !== "object" || !objA || typeof objB !== "object" || !objB) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);

  // Test for A's keys different from B.
  for (var idx = 0; idx < keysA.length; idx++) {
    var key = keysA[idx];

    if (!bHasOwnProperty(key)) {
      return false;
    }

    var valueA = objA[key];
    var valueB = objB[key];

    ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;

    if (ret === false || (ret === void 0 && valueA !== valueB)) {
      return false;
    }
  }

  return true;
};


/***/ }),
/* 66 */
/***/ (function(module, exports) {

module.exports = require("fast-levenshtein");

/***/ }),
/* 67 */
/***/ (function(module, exports) {

exports = module.exports = SemVer;

// The debug function is excluded entirely from the minified version.
/* nomin */ var debug;
/* nomin */ if (typeof process === 'object' &&
    /* nomin */ process.env &&
    /* nomin */ process.env.NODE_DEBUG &&
    /* nomin */ /\bsemver\b/i.test(process.env.NODE_DEBUG))
  /* nomin */ debug = function() {
    /* nomin */ var args = Array.prototype.slice.call(arguments, 0);
    /* nomin */ args.unshift('SEMVER');
    /* nomin */ console.log.apply(console, args);
    /* nomin */ };
/* nomin */ else
  /* nomin */ debug = function() {};

// Note: this is the semver.org version of the spec that it implements
// Not necessarily the package version of this code.
exports.SEMVER_SPEC_VERSION = '2.0.0';

var MAX_LENGTH = 256;
var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;

// Max safe segment length for coercion.
var MAX_SAFE_COMPONENT_LENGTH = 16;

// The actual regexps go on exports.re
var re = exports.re = [];
var src = exports.src = [];
var R = 0;

// The following Regular Expressions can be used for tokenizing,
// validating, and parsing SemVer version strings.

// ## Numeric Identifier
// A single `0`, or a non-zero digit followed by zero or more digits.

var NUMERICIDENTIFIER = R++;
src[NUMERICIDENTIFIER] = '0|[1-9]\\d*';
var NUMERICIDENTIFIERLOOSE = R++;
src[NUMERICIDENTIFIERLOOSE] = '[0-9]+';


// ## Non-numeric Identifier
// Zero or more digits, followed by a letter or hyphen, and then zero or
// more letters, digits, or hyphens.

var NONNUMERICIDENTIFIER = R++;
src[NONNUMERICIDENTIFIER] = '\\d*[a-zA-Z-][a-zA-Z0-9-]*';


// ## Main Version
// Three dot-separated numeric identifiers.

var MAINVERSION = R++;
src[MAINVERSION] = '(' + src[NUMERICIDENTIFIER] + ')\\.' +
                   '(' + src[NUMERICIDENTIFIER] + ')\\.' +
                   '(' + src[NUMERICIDENTIFIER] + ')';

var MAINVERSIONLOOSE = R++;
src[MAINVERSIONLOOSE] = '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' +
                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' +
                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')';

// ## Pre-release Version Identifier
// A numeric identifier, or a non-numeric identifier.

var PRERELEASEIDENTIFIER = R++;
src[PRERELEASEIDENTIFIER] = '(?:' + src[NUMERICIDENTIFIER] +
                            '|' + src[NONNUMERICIDENTIFIER] + ')';

var PRERELEASEIDENTIFIERLOOSE = R++;
src[PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[NUMERICIDENTIFIERLOOSE] +
                                 '|' + src[NONNUMERICIDENTIFIER] + ')';


// ## Pre-release Version
// Hyphen, followed by one or more dot-separated pre-release version
// identifiers.

var PRERELEASE = R++;
src[PRERELEASE] = '(?:-(' + src[PRERELEASEIDENTIFIER] +
                  '(?:\\.' + src[PRERELEASEIDENTIFIER] + ')*))';

var PRERELEASELOOSE = R++;
src[PRERELEASELOOSE] = '(?:-?(' + src[PRERELEASEIDENTIFIERLOOSE] +
                       '(?:\\.' + src[PRERELEASEIDENTIFIERLOOSE] + ')*))';

// ## Build Metadata Identifier
// Any combination of digits, letters, or hyphens.

var BUILDIDENTIFIER = R++;
src[BUILDIDENTIFIER] = '[0-9A-Za-z-]+';

// ## Build Metadata
// Plus sign, followed by one or more period-separated build metadata
// identifiers.

var BUILD = R++;
src[BUILD] = '(?:\\+(' + src[BUILDIDENTIFIER] +
             '(?:\\.' + src[BUILDIDENTIFIER] + ')*))';


// ## Full Version String
// A main version, followed optionally by a pre-release version and
// build metadata.

// Note that the only major, minor, patch, and pre-release sections of
// the version string are capturing groups.  The build metadata is not a
// capturing group, because it should not ever be used in version
// comparison.

var FULL = R++;
var FULLPLAIN = 'v?' + src[MAINVERSION] +
                src[PRERELEASE] + '?' +
                src[BUILD] + '?';

src[FULL] = '^' + FULLPLAIN + '$';

// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
// common in the npm registry.
var LOOSEPLAIN = '[v=\\s]*' + src[MAINVERSIONLOOSE] +
                 src[PRERELEASELOOSE] + '?' +
                 src[BUILD] + '?';

var LOOSE = R++;
src[LOOSE] = '^' + LOOSEPLAIN + '$';

var GTLT = R++;
src[GTLT] = '((?:<|>)?=?)';

// Something like "2.*" or "1.2.x".
// Note that "x.x" is a valid xRange identifer, meaning "any version"
// Only the first item is strictly required.
var XRANGEIDENTIFIERLOOSE = R++;
src[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + '|x|X|\\*';
var XRANGEIDENTIFIER = R++;
src[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + '|x|X|\\*';

var XRANGEPLAIN = R++;
src[XRANGEPLAIN] = '[v=\\s]*(' + src[XRANGEIDENTIFIER] + ')' +
                   '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' +
                   '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' +
                   '(?:' + src[PRERELEASE] + ')?' +
                   src[BUILD] + '?' +
                   ')?)?';

var XRANGEPLAINLOOSE = R++;
src[XRANGEPLAINLOOSE] = '[v=\\s]*(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
                        '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
                        '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
                        '(?:' + src[PRERELEASELOOSE] + ')?' +
                        src[BUILD] + '?' +
                        ')?)?';

var XRANGE = R++;
src[XRANGE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAIN] + '$';
var XRANGELOOSE = R++;
src[XRANGELOOSE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAINLOOSE] + '$';

// Coercion.
// Extract anything that could conceivably be a part of a valid semver
var COERCE = R++;
src[COERCE] = '(?:^|[^\\d])' +
              '(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '})' +
              '(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +
              '(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +
              '(?:$|[^\\d])';

// Tilde ranges.
// Meaning is "reasonably at or greater than"
var LONETILDE = R++;
src[LONETILDE] = '(?:~>?)';

var TILDETRIM = R++;
src[TILDETRIM] = '(\\s*)' + src[LONETILDE] + '\\s+';
re[TILDETRIM] = new RegExp(src[TILDETRIM], 'g');
var tildeTrimReplace = '$1~';

var TILDE = R++;
src[TILDE] = '^' + src[LONETILDE] + src[XRANGEPLAIN] + '$';
var TILDELOOSE = R++;
src[TILDELOOSE] = '^' + src[LONETILDE] + src[XRANGEPLAINLOOSE] + '$';

// Caret ranges.
// Meaning is "at least and backwards compatible with"
var LONECARET = R++;
src[LONECARET] = '(?:\\^)';

var CARETTRIM = R++;
src[CARETTRIM] = '(\\s*)' + src[LONECARET] + '\\s+';
re[CARETTRIM] = new RegExp(src[CARETTRIM], 'g');
var caretTrimReplace = '$1^';

var CARET = R++;
src[CARET] = '^' + src[LONECARET] + src[XRANGEPLAIN] + '$';
var CARETLOOSE = R++;
src[CARETLOOSE] = '^' + src[LONECARET] + src[XRANGEPLAINLOOSE] + '$';

// A simple gt/lt/eq thing, or just "" to indicate "any version"
var COMPARATORLOOSE = R++;
src[COMPARATORLOOSE] = '^' + src[GTLT] + '\\s*(' + LOOSEPLAIN + ')$|^$';
var COMPARATOR = R++;
src[COMPARATOR] = '^' + src[GTLT] + '\\s*(' + FULLPLAIN + ')$|^$';


// An expression to strip any whitespace between the gtlt and the thing
// it modifies, so that `> 1.2.3` ==> `>1.2.3`
var COMPARATORTRIM = R++;
src[COMPARATORTRIM] = '(\\s*)' + src[GTLT] +
                      '\\s*(' + LOOSEPLAIN + '|' + src[XRANGEPLAIN] + ')';

// this one has to use the /g flag
re[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], 'g');
var comparatorTrimReplace = '$1$2$3';


// Something like `1.2.3 - 1.2.4`
// Note that these all use the loose form, because they'll be
// checked against either the strict or loose comparator form
// later.
var HYPHENRANGE = R++;
src[HYPHENRANGE] = '^\\s*(' + src[XRANGEPLAIN] + ')' +
                   '\\s+-\\s+' +
                   '(' + src[XRANGEPLAIN] + ')' +
                   '\\s*$';

var HYPHENRANGELOOSE = R++;
src[HYPHENRANGELOOSE] = '^\\s*(' + src[XRANGEPLAINLOOSE] + ')' +
                        '\\s+-\\s+' +
                        '(' + src[XRANGEPLAINLOOSE] + ')' +
                        '\\s*$';

// Star ranges basically just allow anything at all.
var STAR = R++;
src[STAR] = '(<|>)?=?\\s*\\*';

// Compile to actual regexp objects.
// All are flag-free, unless they were created above with a flag.
for (var i = 0; i < R; i++) {
  debug(i, src[i]);
  if (!re[i])
    re[i] = new RegExp(src[i]);
}

exports.parse = parse;
function parse(version, options) {
  if (!options || typeof options !== 'object')
    options = { loose: !!options, includePrerelease: false }

  if (version instanceof SemVer)
    return version;

  if (typeof version !== 'string')
    return null;

  if (version.length > MAX_LENGTH)
    return null;

  var r = options.loose ? re[LOOSE] : re[FULL];
  if (!r.test(version))
    return null;

  try {
    return new SemVer(version, options);
  } catch (er) {
    return null;
  }
}

exports.valid = valid;
function valid(version, options) {
  var v = parse(version, options);
  return v ? v.version : null;
}


exports.clean = clean;
function clean(version, options) {
  var s = parse(version.trim().replace(/^[=v]+/, ''), options);
  return s ? s.version : null;
}

exports.SemVer = SemVer;

function SemVer(version, options) {
  if (!options || typeof options !== 'object')
    options = { loose: !!options, includePrerelease: false }
  if (version instanceof SemVer) {
    if (version.loose === options.loose)
      return version;
    else
      version = version.version;
  } else if (typeof version !== 'string') {
    throw new TypeError('Invalid Version: ' + version);
  }

  if (version.length > MAX_LENGTH)
    throw new TypeError('version is longer than ' + MAX_LENGTH + ' characters')

  if (!(this instanceof SemVer))
    return new SemVer(version, options);

  debug('SemVer', version, options);
  this.options = options;
  this.loose = !!options.loose;

  var m = version.trim().match(options.loose ? re[LOOSE] : re[FULL]);

  if (!m)
    throw new TypeError('Invalid Version: ' + version);

  this.raw = version;

  // these are actually numbers
  this.major = +m[1];
  this.minor = +m[2];
  this.patch = +m[3];

  if (this.major > MAX_SAFE_INTEGER || this.major < 0)
    throw new TypeError('Invalid major version')

  if (this.minor > MAX_SAFE_INTEGER || this.minor < 0)
    throw new TypeError('Invalid minor version')

  if (this.patch > MAX_SAFE_INTEGER || this.patch < 0)
    throw new TypeError('Invalid patch version')

  // numberify any prerelease numeric ids
  if (!m[4])
    this.prerelease = [];
  else
    this.prerelease = m[4].split('.').map(function(id) {
      if (/^[0-9]+$/.test(id)) {
        var num = +id;
        if (num >= 0 && num < MAX_SAFE_INTEGER)
          return num;
      }
      return id;
    });

  this.build = m[5] ? m[5].split('.') : [];
  this.format();
}

SemVer.prototype.format = function() {
  this.version = this.major + '.' + this.minor + '.' + this.patch;
  if (this.prerelease.length)
    this.version += '-' + this.prerelease.join('.');
  return this.version;
};

SemVer.prototype.toString = function() {
  return this.version;
};

SemVer.prototype.compare = function(other) {
  debug('SemVer.compare', this.version, this.options, other);
  if (!(other instanceof SemVer))
    other = new SemVer(other, this.options);

  return this.compareMain(other) || this.comparePre(other);
};

SemVer.prototype.compareMain = function(other) {
  if (!(other instanceof SemVer))
    other = new SemVer(other, this.options);

  return compareIdentifiers(this.major, other.major) ||
         compareIdentifiers(this.minor, other.minor) ||
         compareIdentifiers(this.patch, other.patch);
};

SemVer.prototype.comparePre = function(other) {
  if (!(other instanceof SemVer))
    other = new SemVer(other, this.options);

  // NOT having a prerelease is > having one
  if (this.prerelease.length && !other.prerelease.length)
    return -1;
  else if (!this.prerelease.length && other.prerelease.length)
    return 1;
  else if (!this.prerelease.length && !other.prerelease.length)
    return 0;

  var i = 0;
  do {
    var a = this.prerelease[i];
    var b = other.prerelease[i];
    debug('prerelease compare', i, a, b);
    if (a === undefined && b === undefined)
      return 0;
    else if (b === undefined)
      return 1;
    else if (a === undefined)
      return -1;
    else if (a === b)
      continue;
    else
      return compareIdentifiers(a, b);
  } while (++i);
};

// preminor will bump the version up to the next minor release, and immediately
// down to pre-release. premajor and prepatch work the same way.
SemVer.prototype.inc = function(release, identifier) {
  switch (release) {
    case 'premajor':
      this.prerelease.length = 0;
      this.patch = 0;
      this.minor = 0;
      this.major++;
      this.inc('pre', identifier);
      break;
    case 'preminor':
      this.prerelease.length = 0;
      this.patch = 0;
      this.minor++;
      this.inc('pre', identifier);
      break;
    case 'prepatch':
      // If this is already a prerelease, it will bump to the next version
      // drop any prereleases that might already exist, since they are not
      // relevant at this point.
      this.prerelease.length = 0;
      this.inc('patch', identifier);
      this.inc('pre', identifier);
      break;
    // If the input is a non-prerelease version, this acts the same as
    // prepatch.
    case 'prerelease':
      if (this.prerelease.length === 0)
        this.inc('patch', identifier);
      this.inc('pre', identifier);
      break;

    case 'major':
      // If this is a pre-major version, bump up to the same major version.
      // Otherwise increment major.
      // 1.0.0-5 bumps to 1.0.0
      // 1.1.0 bumps to 2.0.0
      if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0)
        this.major++;
      this.minor = 0;
      this.patch = 0;
      this.prerelease = [];
      break;
    case 'minor':
      // If this is a pre-minor version, bump up to the same minor version.
      // Otherwise increment minor.
      // 1.2.0-5 bumps to 1.2.0
      // 1.2.1 bumps to 1.3.0
      if (this.patch !== 0 || this.prerelease.length === 0)
        this.minor++;
      this.patch = 0;
      this.prerelease = [];
      break;
    case 'patch':
      // If this is not a pre-release version, it will increment the patch.
      // If it is a pre-release it will bump up to the same patch version.
      // 1.2.0-5 patches to 1.2.0
      // 1.2.0 patches to 1.2.1
      if (this.prerelease.length === 0)
        this.patch++;
      this.prerelease = [];
      break;
    // This probably shouldn't be used publicly.
    // 1.0.0 "pre" would become 1.0.0-0 which is the wrong direction.
    case 'pre':
      if (this.prerelease.length === 0)
        this.prerelease = [0];
      else {
        var i = this.prerelease.length;
        while (--i >= 0) {
          if (typeof this.prerelease[i] === 'number') {
            this.prerelease[i]++;
            i = -2;
          }
        }
        if (i === -1) // didn't increment anything
          this.prerelease.push(0);
      }
      if (identifier) {
        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
        if (this.prerelease[0] === identifier) {
          if (isNaN(this.prerelease[1]))
            this.prerelease = [identifier, 0];
        } else
          this.prerelease = [identifier, 0];
      }
      break;

    default:
      throw new Error('invalid increment argument: ' + release);
  }
  this.format();
  this.raw = this.version;
  return this;
};

exports.inc = inc;
function inc(version, release, loose, identifier) {
  if (typeof(loose) === 'string') {
    identifier = loose;
    loose = undefined;
  }

  try {
    return new SemVer(version, loose).inc(release, identifier).version;
  } catch (er) {
    return null;
  }
}

exports.diff = diff;
function diff(version1, version2) {
  if (eq(version1, version2)) {
    return null;
  } else {
    var v1 = parse(version1);
    var v2 = parse(version2);
    if (v1.prerelease.length || v2.prerelease.length) {
      for (var key in v1) {
        if (key === 'major' || key === 'minor' || key === 'patch') {
          if (v1[key] !== v2[key]) {
            return 'pre'+key;
          }
        }
      }
      return 'prerelease';
    }
    for (var key in v1) {
      if (key === 'major' || key === 'minor' || key === 'patch') {
        if (v1[key] !== v2[key]) {
          return key;
        }
      }
    }
  }
}

exports.compareIdentifiers = compareIdentifiers;

var numeric = /^[0-9]+$/;
function compareIdentifiers(a, b) {
  var anum = numeric.test(a);
  var bnum = numeric.test(b);

  if (anum && bnum) {
    a = +a;
    b = +b;
  }

  return (anum && !bnum) ? -1 :
         (bnum && !anum) ? 1 :
         a < b ? -1 :
         a > b ? 1 :
         0;
}

exports.rcompareIdentifiers = rcompareIdentifiers;
function rcompareIdentifiers(a, b) {
  return compareIdentifiers(b, a);
}

exports.major = major;
function major(a, loose) {
  return new SemVer(a, loose).major;
}

exports.minor = minor;
function minor(a, loose) {
  return new SemVer(a, loose).minor;
}

exports.patch = patch;
function patch(a, loose) {
  return new SemVer(a, loose).patch;
}

exports.compare = compare;
function compare(a, b, loose) {
  return new SemVer(a, loose).compare(new SemVer(b, loose));
}

exports.compareLoose = compareLoose;
function compareLoose(a, b) {
  return compare(a, b, true);
}

exports.rcompare = rcompare;
function rcompare(a, b, loose) {
  return compare(b, a, loose);
}

exports.sort = sort;
function sort(list, loose) {
  return list.sort(function(a, b) {
    return exports.compare(a, b, loose);
  });
}

exports.rsort = rsort;
function rsort(list, loose) {
  return list.sort(function(a, b) {
    return exports.rcompare(a, b, loose);
  });
}

exports.gt = gt;
function gt(a, b, loose) {
  return compare(a, b, loose) > 0;
}

exports.lt = lt;
function lt(a, b, loose) {
  return compare(a, b, loose) < 0;
}

exports.eq = eq;
function eq(a, b, loose) {
  return compare(a, b, loose) === 0;
}

exports.neq = neq;
function neq(a, b, loose) {
  return compare(a, b, loose) !== 0;
}

exports.gte = gte;
function gte(a, b, loose) {
  return compare(a, b, loose) >= 0;
}

exports.lte = lte;
function lte(a, b, loose) {
  return compare(a, b, loose) <= 0;
}

exports.cmp = cmp;
function cmp(a, op, b, loose) {
  var ret;
  switch (op) {
    case '===':
      if (typeof a === 'object') a = a.version;
      if (typeof b === 'object') b = b.version;
      ret = a === b;
      break;
    case '!==':
      if (typeof a === 'object') a = a.version;
      if (typeof b === 'object') b = b.version;
      ret = a !== b;
      break;
    case '': case '=': case '==': ret = eq(a, b, loose); break;
    case '!=': ret = neq(a, b, loose); break;
    case '>': ret = gt(a, b, loose); break;
    case '>=': ret = gte(a, b, loose); break;
    case '<': ret = lt(a, b, loose); break;
    case '<=': ret = lte(a, b, loose); break;
    default: throw new TypeError('Invalid operator: ' + op);
  }
  return ret;
}

exports.Comparator = Comparator;
function Comparator(comp, options) {
  if (!options || typeof options !== 'object')
    options = { loose: !!options, includePrerelease: false }

  if (comp instanceof Comparator) {
    if (comp.loose === !!options.loose)
      return comp;
    else
      comp = comp.value;
  }

  if (!(this instanceof Comparator))
    return new Comparator(comp, options);

  debug('comparator', comp, options);
  this.options = options;
  this.loose = !!options.loose;
  this.parse(comp);

  if (this.semver === ANY)
    this.value = '';
  else
    this.value = this.operator + this.semver.version;

  debug('comp', this);
}

var ANY = {};
Comparator.prototype.parse = function(comp) {
  var r = this.options.loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
  var m = comp.match(r);

  if (!m)
    throw new TypeError('Invalid comparator: ' + comp);

  this.operator = m[1];
  if (this.operator === '=')
    this.operator = '';

  // if it literally is just '>' or '' then allow anything.
  if (!m[2])
    this.semver = ANY;
  else
    this.semver = new SemVer(m[2], this.options.loose);
};

Comparator.prototype.toString = function() {
  return this.value;
};

Comparator.prototype.test = function(version) {
  debug('Comparator.test', version, this.options.loose);

  if (this.semver === ANY)
    return true;

  if (typeof version === 'string')
    version = new SemVer(version, this.options);

  return cmp(version, this.operator, this.semver, this.options);
};

Comparator.prototype.intersects = function(comp, options) {
  if (!(comp instanceof Comparator)) {
    throw new TypeError('a Comparator is required');
  }

  if (!options || typeof options !== 'object')
    options = { loose: !!options, includePrerelease: false }

  var rangeTmp;

  if (this.operator === '') {
    rangeTmp = new Range(comp.value, options);
    return satisfies(this.value, rangeTmp, options);
  } else if (comp.operator === '') {
    rangeTmp = new Range(this.value, options);
    return satisfies(comp.semver, rangeTmp, options);
  }

  var sameDirectionIncreasing =
    (this.operator === '>=' || this.operator === '>') &&
    (comp.operator === '>=' || comp.operator === '>');
  var sameDirectionDecreasing =
    (this.operator === '<=' || this.operator === '<') &&
    (comp.operator === '<=' || comp.operator === '<');
  var sameSemVer = this.semver.version === comp.semver.version;
  var differentDirectionsInclusive =
    (this.operator === '>=' || this.operator === '<=') &&
    (comp.operator === '>=' || comp.operator === '<=');
  var oppositeDirectionsLessThan =
    cmp(this.semver, '<', comp.semver, options) &&
    ((this.operator === '>=' || this.operator === '>') &&
    (comp.operator === '<=' || comp.operator === '<'));
  var oppositeDirectionsGreaterThan =
    cmp(this.semver, '>', comp.semver, options) &&
    ((this.operator === '<=' || this.operator === '<') &&
    (comp.operator === '>=' || comp.operator === '>'));

  return sameDirectionIncreasing || sameDirectionDecreasing ||
    (sameSemVer && differentDirectionsInclusive) ||
    oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
};


exports.Range = Range;
function Range(range, options) {
  if (!options || typeof options !== 'object')
    options = { loose: !!options, includePrerelease: false }

  if (range instanceof Range) {
    if (range.loose === !!options.loose &&
        range.includePrerelease === !!options.includePrerelease) {
      return range;
    } else {
      return new Range(range.raw, options);
    }
  }

  if (range instanceof Comparator) {
    return new Range(range.value, options);
  }

  if (!(this instanceof Range))
    return new Range(range, options);

  this.options = options;
  this.loose = !!options.loose;
  this.includePrerelease = !!options.includePrerelease

  // First, split based on boolean or ||
  this.raw = range;
  this.set = range.split(/\s*\|\|\s*/).map(function(range) {
    return this.parseRange(range.trim());
  }, this).filter(function(c) {
    // throw out any that are not relevant for whatever reason
    return c.length;
  });

  if (!this.set.length) {
    throw new TypeError('Invalid SemVer Range: ' + range);
  }

  this.format();
}

Range.prototype.format = function() {
  this.range = this.set.map(function(comps) {
    return comps.join(' ').trim();
  }).join('||').trim();
  return this.range;
};

Range.prototype.toString = function() {
  return this.range;
};

Range.prototype.parseRange = function(range) {
  var loose = this.options.loose;
  range = range.trim();
  // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
  var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE];
  range = range.replace(hr, hyphenReplace);
  debug('hyphen replace', range);
  // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
  range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace);
  debug('comparator trim', range, re[COMPARATORTRIM]);

  // `~ 1.2.3` => `~1.2.3`
  range = range.replace(re[TILDETRIM], tildeTrimReplace);

  // `^ 1.2.3` => `^1.2.3`
  range = range.replace(re[CARETTRIM], caretTrimReplace);

  // normalize spaces
  range = range.split(/\s+/).join(' ');

  // At this point, the range is completely trimmed and
  // ready to be split into comparators.

  var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
  var set = range.split(' ').map(function(comp) {
    return parseComparator(comp, this.options);
  }, this).join(' ').split(/\s+/);
  if (this.options.loose) {
    // in loose mode, throw out any that are not valid comparators
    set = set.filter(function(comp) {
      return !!comp.match(compRe);
    });
  }
  set = set.map(function(comp) {
    return new Comparator(comp, this.options);
  }, this);

  return set;
};

Range.prototype.intersects = function(range, options) {
  if (!(range instanceof Range)) {
    throw new TypeError('a Range is required');
  }

  return this.set.some(function(thisComparators) {
    return thisComparators.every(function(thisComparator) {
      return range.set.some(function(rangeComparators) {
        return rangeComparators.every(function(rangeComparator) {
          return thisComparator.intersects(rangeComparator, options);
        });
      });
    });
  });
};

// Mostly just for testing and legacy API reasons
exports.toComparators = toComparators;
function toComparators(range, options) {
  return new Range(range, options).set.map(function(comp) {
    return comp.map(function(c) {
      return c.value;
    }).join(' ').trim().split(' ');
  });
}

// comprised of xranges, tildes, stars, and gtlt's at this point.
// already replaced the hyphen ranges
// turn into a set of JUST comparators.
function parseComparator(comp, options) {
  debug('comp', comp, options);
  comp = replaceCarets(comp, options);
  debug('caret', comp);
  comp = replaceTildes(comp, options);
  debug('tildes', comp);
  comp = replaceXRanges(comp, options);
  debug('xrange', comp);
  comp = replaceStars(comp, options);
  debug('stars', comp);
  return comp;
}

function isX(id) {
  return !id || id.toLowerCase() === 'x' || id === '*';
}

// ~, ~> --> * (any, kinda silly)
// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0
// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0
// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0
// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0
// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0
function replaceTildes(comp, options) {
  return comp.trim().split(/\s+/).map(function(comp) {
    return replaceTilde(comp, options);
  }).join(' ');
}

function replaceTilde(comp, options) {
  if (!options || typeof options !== 'object')
    options = { loose: !!options, includePrerelease: false }
  var r = options.loose ? re[TILDELOOSE] : re[TILDE];
  return comp.replace(r, function(_, M, m, p, pr) {
    debug('tilde', comp, _, M, m, p, pr);
    var ret;

    if (isX(M))
      ret = '';
    else if (isX(m))
      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
    else if (isX(p))
      // ~1.2 == >=1.2.0 <1.3.0
      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
    else if (pr) {
      debug('replaceTilde pr', pr);
      if (pr.charAt(0) !== '-')
        pr = '-' + pr;
      ret = '>=' + M + '.' + m + '.' + p + pr +
            ' <' + M + '.' + (+m + 1) + '.0';
    } else
      // ~1.2.3 == >=1.2.3 <1.3.0
      ret = '>=' + M + '.' + m + '.' + p +
            ' <' + M + '.' + (+m + 1) + '.0';

    debug('tilde return', ret);
    return ret;
  });
}

// ^ --> * (any, kinda silly)
// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0
// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0
// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0
// ^1.2.3 --> >=1.2.3 <2.0.0
// ^1.2.0 --> >=1.2.0 <2.0.0
function replaceCarets(comp, options) {
  return comp.trim().split(/\s+/).map(function(comp) {
    return replaceCaret(comp, options);
  }).join(' ');
}

function replaceCaret(comp, options) {
  debug('caret', comp, options);
  if (!options || typeof options !== 'object')
    options = { loose: !!options, includePrerelease: false }
  var r = options.loose ? re[CARETLOOSE] : re[CARET];
  return comp.replace(r, function(_, M, m, p, pr) {
    debug('caret', comp, _, M, m, p, pr);
    var ret;

    if (isX(M))
      ret = '';
    else if (isX(m))
      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
    else if (isX(p)) {
      if (M === '0')
        ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
      else
        ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0';
    } else if (pr) {
      debug('replaceCaret pr', pr);
      if (pr.charAt(0) !== '-')
        pr = '-' + pr;
      if (M === '0') {
        if (m === '0')
          ret = '>=' + M + '.' + m + '.' + p + pr +
                ' <' + M + '.' + m + '.' + (+p + 1);
        else
          ret = '>=' + M + '.' + m + '.' + p + pr +
                ' <' + M + '.' + (+m + 1) + '.0';
      } else
        ret = '>=' + M + '.' + m + '.' + p + pr +
              ' <' + (+M + 1) + '.0.0';
    } else {
      debug('no pr');
      if (M === '0') {
        if (m === '0')
          ret = '>=' + M + '.' + m + '.' + p +
                ' <' + M + '.' + m + '.' + (+p + 1);
        else
          ret = '>=' + M + '.' + m + '.' + p +
                ' <' + M + '.' + (+m + 1) + '.0';
      } else
        ret = '>=' + M + '.' + m + '.' + p +
              ' <' + (+M + 1) + '.0.0';
    }

    debug('caret return', ret);
    return ret;
  });
}

function replaceXRanges(comp, options) {
  debug('replaceXRanges', comp, options);
  return comp.split(/\s+/).map(function(comp) {
    return replaceXRange(comp, options);
  }).join(' ');
}

function replaceXRange(comp, options) {
  comp = comp.trim();
  if (!options || typeof options !== 'object')
    options = { loose: !!options, includePrerelease: false }
  var r = options.loose ? re[XRANGELOOSE] : re[XRANGE];
  return comp.replace(r, function(ret, gtlt, M, m, p, pr) {
    debug('xRange', comp, ret, gtlt, M, m, p, pr);
    var xM = isX(M);
    var xm = xM || isX(m);
    var xp = xm || isX(p);
    var anyX = xp;

    if (gtlt === '=' && anyX)
      gtlt = '';

    if (xM) {
      if (gtlt === '>' || gtlt === '<') {
        // nothing is allowed
        ret = '<0.0.0';
      } else {
        // nothing is forbidden
        ret = '*';
      }
    } else if (gtlt && anyX) {
      // replace X with 0
      if (xm)
        m = 0;
      if (xp)
        p = 0;

      if (gtlt === '>') {
        // >1 => >=2.0.0
        // >1.2 => >=1.3.0
        // >1.2.3 => >= 1.2.4
        gtlt = '>=';
        if (xm) {
          M = +M + 1;
          m = 0;
          p = 0;
        } else if (xp) {
          m = +m + 1;
          p = 0;
        }
      } else if (gtlt === '<=') {
        // <=0.7.x is actually <0.8.0, since any 0.7.x should
        // pass.  Similarly, <=7.x is actually <8.0.0, etc.
        gtlt = '<';
        if (xm)
          M = +M + 1;
        else
          m = +m + 1;
      }

      ret = gtlt + M + '.' + m + '.' + p;
    } else if (xm) {
      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
    } else if (xp) {
      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
    }

    debug('xRange return', ret);

    return ret;
  });
}

// Because * is AND-ed with everything else in the comparator,
// and '' means "any version", just remove the *s entirely.
function replaceStars(comp, options) {
  debug('replaceStars', comp, options);
  // Looseness is ignored here.  star is always as loose as it gets!
  return comp.trim().replace(re[STAR], '');
}

// This function is passed to string.replace(re[HYPHENRANGE])
// M, m, patch, prerelease, build
// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
// 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do
// 1.2 - 3.4 => >=1.2.0 <3.5.0
function hyphenReplace($0,
                       from, fM, fm, fp, fpr, fb,
                       to, tM, tm, tp, tpr, tb) {

  if (isX(fM))
    from = '';
  else if (isX(fm))
    from = '>=' + fM + '.0.0';
  else if (isX(fp))
    from = '>=' + fM + '.' + fm + '.0';
  else
    from = '>=' + from;

  if (isX(tM))
    to = '';
  else if (isX(tm))
    to = '<' + (+tM + 1) + '.0.0';
  else if (isX(tp))
    to = '<' + tM + '.' + (+tm + 1) + '.0';
  else if (tpr)
    to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr;
  else
    to = '<=' + to;

  return (from + ' ' + to).trim();
}


// if ANY of the sets match ALL of its comparators, then pass
Range.prototype.test = function(version) {
  if (!version)
    return false;

  if (typeof version === 'string')
    version = new SemVer(version, this.options);

  for (var i = 0; i < this.set.length; i++) {
    if (testSet(this.set[i], version, this.options))
      return true;
  }
  return false;
};

function testSet(set, version, options) {
  for (var i = 0; i < set.length; i++) {
    if (!set[i].test(version))
      return false;
  }

  if (!options)
    options = {}

  if (version.prerelease.length && !options.includePrerelease) {
    // Find the set of versions that are allowed to have prereleases
    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
    // That should allow `1.2.3-pr.2` to pass.
    // However, `1.2.4-alpha.notready` should NOT be allowed,
    // even though it's within the range set by the comparators.
    for (var i = 0; i < set.length; i++) {
      debug(set[i].semver);
      if (set[i].semver === ANY)
        continue;

      if (set[i].semver.prerelease.length > 0) {
        var allowed = set[i].semver;
        if (allowed.major === version.major &&
            allowed.minor === version.minor &&
            allowed.patch === version.patch)
          return true;
      }
    }

    // Version has a -pre, but it's not one of the ones we like.
    return false;
  }

  return true;
}

exports.satisfies = satisfies;
function satisfies(version, range, options) {
  try {
    range = new Range(range, options);
  } catch (er) {
    return false;
  }
  return range.test(version);
}

exports.maxSatisfying = maxSatisfying;
function maxSatisfying(versions, range, options) {
  var max = null;
  var maxSV = null;
  try {
    var rangeObj = new Range(range, options);
  } catch (er) {
    return null;
  }
  versions.forEach(function (v) {
    if (rangeObj.test(v)) { // satisfies(v, range, options)
      if (!max || maxSV.compare(v) === -1) { // compare(max, v, true)
        max = v;
        maxSV = new SemVer(max, options);
      }
    }
  })
  return max;
}

exports.minSatisfying = minSatisfying;
function minSatisfying(versions, range, options) {
  var min = null;
  var minSV = null;
  try {
    var rangeObj = new Range(range, options);
  } catch (er) {
    return null;
  }
  versions.forEach(function (v) {
    if (rangeObj.test(v)) { // satisfies(v, range, options)
      if (!min || minSV.compare(v) === 1) { // compare(min, v, true)
        min = v;
        minSV = new SemVer(min, options);
      }
    }
  })
  return min;
}

exports.validRange = validRange;
function validRange(range, options) {
  try {
    // Return '*' instead of '' so that truthiness works.
    // This will throw if it's invalid anyway
    return new Range(range, options).range || '*';
  } catch (er) {
    return null;
  }
}

// Determine if version is less than all the versions possible in the range
exports.ltr = ltr;
function ltr(version, range, options) {
  return outside(version, range, '<', options);
}

// Determine if version is greater than all the versions possible in the range.
exports.gtr = gtr;
function gtr(version, range, options) {
  return outside(version, range, '>', options);
}

exports.outside = outside;
function outside(version, range, hilo, options) {
  version = new SemVer(version, options);
  range = new Range(range, options);

  var gtfn, ltefn, ltfn, comp, ecomp;
  switch (hilo) {
    case '>':
      gtfn = gt;
      ltefn = lte;
      ltfn = lt;
      comp = '>';
      ecomp = '>=';
      break;
    case '<':
      gtfn = lt;
      ltefn = gte;
      ltfn = gt;
      comp = '<';
      ecomp = '<=';
      break;
    default:
      throw new TypeError('Must provide a hilo val of "<" or ">"');
  }

  // If it satisifes the range it is not outside
  if (satisfies(version, range, options)) {
    return false;
  }

  // From now on, variable terms are as if we're in "gtr" mode.
  // but note that everything is flipped for the "ltr" function.

  for (var i = 0; i < range.set.length; ++i) {
    var comparators = range.set[i];

    var high = null;
    var low = null;

    comparators.forEach(function(comparator) {
      if (comparator.semver === ANY) {
        comparator = new Comparator('>=0.0.0')
      }
      high = high || comparator;
      low = low || comparator;
      if (gtfn(comparator.semver, high.semver, options)) {
        high = comparator;
      } else if (ltfn(comparator.semver, low.semver, options)) {
        low = comparator;
      }
    });

    // If the edge version comparator has a operator then our version
    // isn't outside it
    if (high.operator === comp || high.operator === ecomp) {
      return false;
    }

    // If the lowest version comparator has an operator and our version
    // is less than it then it isn't higher than the range
    if ((!low.operator || low.operator === comp) &&
        ltefn(version, low.semver)) {
      return false;
    } else if (low.operator === ecomp && ltfn(version, low.semver)) {
      return false;
    }
  }
  return true;
}

exports.prerelease = prerelease;
function prerelease(version, options) {
  var parsed = parse(version, options);
  return (parsed && parsed.prerelease.length) ? parsed.prerelease : null;
}

exports.intersects = intersects;
function intersects(r1, r2, options) {
  r1 = new Range(r1, options)
  r2 = new Range(r2, options)
  return r1.intersects(r2)
}

exports.coerce = coerce;
function coerce(version) {
  if (version instanceof SemVer)
    return version;

  if (typeof version !== 'string')
    return null;

  var match = version.match(re[COERCE]);

  if (match == null)
    return null;

  return parse((match[1] || '0') + '.' + (match[2] || '0') + '.' + (match[3] || '0')); 
}


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_44rcvmqtl = function () {
  var path = "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/session/sagas/index.js",
      hash = "79c6a35691e8398f42babfb927a1f9c72703a0fe",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/session/sagas/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 6, column: 0 }, end: { line: 6, column: 20 } }, "2": { start: { line: 8, column: 13 }, end: { line: 8, column: 29 } }, "3": { start: { line: 10, column: 14 }, end: { line: 10, column: 44 } }, "4": { start: { line: 12, column: 15 }, end: { line: 12, column: 44 } }, "5": { start: { line: 14, column: 15 }, end: { line: 14, column: 37 } }, "6": { start: { line: 16, column: 13 }, end: { line: 16, column: 37 } }, "7": { start: { line: 18, column: 10 }, end: { line: 18, column: 41 } }, "8": { start: { line: 20, column: 14 }, end: { line: 20, column: 45 } }, "9": { start: { line: 22, column: 17 }, end: { line: 22, column: 49 } }, "10": { start: { line: 24, column: 14 }, end: { line: 24, column: 43 } }, "11": { start: { line: 26, column: 15 }, end: { line: 26, column: 47 } }, "12": { start: { line: 28, column: 14 }, end: { line: 28, column: 38 } }, "13": { start: { line: 30, column: 10 }, end: { line: 30, column: 42 } }, "14": { start: { line: 32, column: 14 }, end: { line: 32, column: 40 } }, "15": { start: { line: 34, column: 12 }, end: { line: 34, column: 44 } }, "16": { start: { line: 36, column: 14 }, end: { line: 36, column: 39 } }, "17": { start: { line: 38, column: 11 }, end: { line: 38, column: 43 } }, "18": { start: { line: 40, column: 14 }, end: { line: 40, column: 39 } }, "19": { start: { line: 42, column: 11 }, end: { line: 42, column: 43 } }, "20": { start: { line: 44, column: 15 }, end: { line: 44, column: 36 } }, "21": { start: { line: 46, column: 14 }, end: { line: 46, column: 47 } }, "22": { start: { line: 48, column: 40 }, end: { line: 48, column: 267 } }, "23": { start: { line: 48, column: 69 }, end: { line: 48, column: 80 } }, "24": { start: { line: 48, column: 103 }, end: { line: 48, column: 105 } }, "25": { start: { line: 48, column: 107 }, end: { line: 48, column: 228 } }, "26": { start: { line: 48, column: 126 }, end: { line: 48, column: 226 } }, "27": { start: { line: 48, column: 149 }, end: { line: 48, column: 224 } }, "28": { start: { line: 48, column: 201 }, end: { line: 48, column: 224 } }, "29": { start: { line: 48, column: 229 }, end: { line: 48, column: 250 } }, "30": { start: { line: 48, column: 251 }, end: { line: 48, column: 265 } }, "31": { start: { line: 50, column: 39 }, end: { line: 50, column: 93 } }, "32": { start: { line: 52, column: 14 }, end: { line: 52, column: 60 } }, "33": { start: { line: 55, column: 2 }, end: { line: 55, column: 30 } }, "34": { start: { line: 56, column: 2 }, end: { line: 56, column: 25 } }, "35": { start: { line: 59, column: 2 }, end: { line: 59, column: 44 } }, "36": { start: { line: 60, column: 30 }, end: { line: 60, column: 80 } }, "37": { start: { line: 62, column: 2 }, end: { line: 62, column: 39 } }, "38": { start: { line: 63, column: 2 }, end: { line: 63, column: 37 } }, "39": { start: { line: 65, column: 2 }, end: { line: 65, column: 38 } }, "40": { start: { line: 66, column: 2 }, end: { line: 66, column: 35 } }, "41": { start: { line: 68, column: 2 }, end: { line: 68, column: 29 } }, "42": { start: { line: 70, column: 29 }, end: { line: 70, column: 68 } }, "43": { start: { line: 71, column: 2 }, end: { line: 71, column: 20 } }, "44": { start: { line: 74, column: 2 }, end: { line: 74, column: 37 } }, "45": { start: { line: 75, column: 12 }, end: { line: 75, column: 44 } }, "46": { start: { line: 76, column: 2 }, end: { line: 91, column: 3 } }, "47": { start: { line: 77, column: 4 }, end: { line: 77, column: 27 } }, "48": { start: { line: 78, column: 4 }, end: { line: 78, column: 22 } }, "49": { start: { line: 80, column: 4 }, end: { line: 80, column: 27 } }, "50": { start: { line: 82, column: 4 }, end: { line: 82, column: 26 } }, "51": { start: { line: 85, column: 4 }, end: { line: 85, column: 37 } }, "52": { start: { line: 86, column: 4 }, end: { line: 86, column: 36 } }, "53": { start: { line: 88, column: 4 }, end: { line: 88, column: 22 } }, "54": { start: { line: 90, column: 4 }, end: { line: 90, column: 19 } }, "55": { start: { line: 94, column: 0 }, end: { line: 94, column: 60 } }, "56": { start: { line: 98, column: 2 }, end: { line: 100, column: 5 } }, "57": { start: { line: 98, column: 91 }, end: { line: 98, column: 119 } }, "58": { start: { line: 104, column: 15 }, end: { line: 104, column: 63 } }, "59": { start: { line: 106, column: 2 }, end: { line: 108, column: 3 } }, "60": { start: { line: 107, column: 4 }, end: { line: 107, column: 24 } }, "61": { start: { line: 110, column: 2 }, end: { line: 110, column: 27 } }, "62": { start: { line: 112, column: 18 }, end: { line: 112, column: 57 } }, "63": { start: { line: 113, column: 2 }, end: { line: 115, column: 3 } }, "64": { start: { line: 114, column: 4 }, end: { line: 114, column: 35 } }, "65": { start: { line: 117, column: 17 }, end: { line: 117, column: 54 } }, "66": { start: { line: 119, column: 2 }, end: { line: 119, column: 115 } }, "67": { start: { line: 119, column: 56 }, end: { line: 119, column: 112 } }, "68": { start: { line: 123, column: 2 }, end: { line: 131, column: 3 } }, "69": { start: { line: 124, column: 56 }, end: { line: 124, column: 60 } }, "70": { start: { line: 126, column: 4 }, end: { line: 126, column: 62 } }, "71": { start: { line: 128, column: 4 }, end: { line: 130, column: 5 } }, "72": { start: { line: 129, column: 6 }, end: { line: 129, column: 54 } }, "73": { start: { line: 135, column: 2 }, end: { line: 140, column: 3 } }, "74": { start: { line: 136, column: 23 }, end: { line: 136, column: 33 } }, "75": { start: { line: 137, column: 4 }, end: { line: 139, column: 5 } }, "76": { start: { line: 138, column: 6 }, end: { line: 138, column: 90 } }, "77": { start: { line: 144, column: 2 }, end: { line: 144, column: 42 } }, "78": { start: { line: 148, column: 2 }, end: { line: 148, column: 43 } }, "79": { start: { line: 152, column: 2 }, end: { line: 152, column: 46 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 48, column: 9 }, end: { line: 48, column: 32 } }, loc: { start: { line: 48, column: 38 }, end: { line: 48, column: 269 } }, line: 48 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 50, column: 9 }, end: { line: 50, column: 31 } }, loc: { start: { line: 50, column: 37 }, end: { line: 50, column: 95 } }, line: 50 }, "2": { name: "saga", decl: { start: { line: 54, column: 10 }, end: { line: 54, column: 14 } }, loc: { start: { line: 54, column: 17 }, end: { line: 92, column: 1 } }, line: 54 }, "3": { name: "forkListeners", decl: { start: { line: 97, column: 10 }, end: { line: 97, column: 23 } }, loc: { start: { line: 97, column: 26 }, end: { line: 101, column: 1 } }, line: 97 }, "4": { name: "(anonymous_4)", decl: { start: { line: 98, column: 84 }, end: { line: 98, column: 85 } }, loc: { start: { line: 98, column: 91 }, end: { line: 98, column: 119 } }, line: 98 }, "5": { name: "fetchTx", decl: { start: { line: 103, column: 10 }, end: { line: 103, column: 17 } }, loc: { start: { line: 103, column: 36 }, end: { line: 120, column: 1 } }, line: 103 }, "6": { name: "(anonymous_6)", decl: { start: { line: 119, column: 40 }, end: { line: 119, column: 41 } }, loc: { start: { line: 119, column: 56 }, end: { line: 119, column: 112 } }, line: 119 }, "7": { name: "recordContexts", decl: { start: { line: 122, column: 10 }, end: { line: 122, column: 24 } }, loc: { start: { line: 122, column: 38 }, end: { line: 132, column: 1 } }, line: 122 }, "8": { name: "recordSources", decl: { start: { line: 134, column: 10 }, end: { line: 134, column: 23 } }, loc: { start: { line: 134, column: 36 }, end: { line: 141, column: 1 } }, line: 134 }, "9": { name: "recordInstance", decl: { start: { line: 143, column: 10 }, end: { line: 143, column: 24 } }, loc: { start: { line: 143, column: 42 }, end: { line: 145, column: 1 } }, line: 143 }, "10": { name: "ready", decl: { start: { line: 147, column: 10 }, end: { line: 147, column: 15 } }, loc: { start: { line: 147, column: 18 }, end: { line: 149, column: 1 } }, line: 147 }, "11": { name: "error", decl: { start: { line: 151, column: 10 }, end: { line: 151, column: 15 } }, loc: { start: { line: 151, column: 21 }, end: { line: 153, column: 1 } }, line: 151 } }, branchMap: { "0": { loc: { start: { line: 48, column: 40 }, end: { line: 48, column: 267 } }, type: "if", locations: [{ start: { line: 48, column: 40 }, end: { line: 48, column: 267 } }, { start: { line: 48, column: 40 }, end: { line: 48, column: 267 } }], line: 48 }, "1": { loc: { start: { line: 48, column: 44 }, end: { line: 48, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 48, column: 44 }, end: { line: 48, column: 47 } }, { start: { line: 48, column: 51 }, end: { line: 48, column: 65 } }], line: 48 }, "2": { loc: { start: { line: 48, column: 107 }, end: { line: 48, column: 228 } }, type: "if", locations: [{ start: { line: 48, column: 107 }, end: { line: 48, column: 228 } }, { start: { line: 48, column: 107 }, end: { line: 48, column: 228 } }], line: 48 }, "3": { loc: { start: { line: 48, column: 149 }, end: { line: 48, column: 224 } }, type: "if", locations: [{ start: { line: 48, column: 149 }, end: { line: 48, column: 224 } }, { start: { line: 48, column: 149 }, end: { line: 48, column: 224 } }], line: 48 }, "4": { loc: { start: { line: 50, column: 46 }, end: { line: 50, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 50, column: 70 }, end: { line: 50, column: 73 } }, { start: { line: 50, column: 76 }, end: { line: 50, column: 92 } }], line: 50 }, "5": { loc: { start: { line: 50, column: 46 }, end: { line: 50, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 50, column: 46 }, end: { line: 50, column: 49 } }, { start: { line: 50, column: 53 }, end: { line: 50, column: 67 } }], line: 50 }, "6": { loc: { start: { line: 76, column: 2 }, end: { line: 91, column: 3 } }, type: "if", locations: [{ start: { line: 76, column: 2 }, end: { line: 91, column: 3 } }, { start: { line: 76, column: 2 }, end: { line: 91, column: 3 } }], line: 76 }, "7": { loc: { start: { line: 106, column: 2 }, end: { line: 108, column: 3 } }, type: "if", locations: [{ start: { line: 106, column: 2 }, end: { line: 108, column: 3 } }, { start: { line: 106, column: 2 }, end: { line: 108, column: 3 } }], line: 106 }, "8": { loc: { start: { line: 113, column: 2 }, end: { line: 115, column: 3 } }, type: "if", locations: [{ start: { line: 113, column: 2 }, end: { line: 115, column: 3 } }, { start: { line: 113, column: 2 }, end: { line: 115, column: 3 } }], line: 113 }, "9": { loc: { start: { line: 113, column: 6 }, end: { line: 113, column: 63 } }, type: "binary-expr", locations: [{ start: { line: 113, column: 6 }, end: { line: 113, column: 20 } }, { start: { line: 113, column: 24 }, end: { line: 113, column: 63 } }], line: 113 }, "10": { loc: { start: { line: 128, column: 4 }, end: { line: 130, column: 5 } }, type: "if", locations: [{ start: { line: 128, column: 4 }, end: { line: 130, column: 5 } }, { start: { line: 128, column: 4 }, end: { line: 130, column: 5 } }], line: 128 }, "11": { loc: { start: { line: 137, column: 4 }, end: { line: 139, column: 5 } }, type: "if", locations: [{ start: { line: 137, column: 4 }, end: { line: 139, column: 5 } }, { start: { line: 137, column: 4 }, end: { line: 139, column: 5 } }], line: 137 }, "12": { loc: { start: { line: 137, column: 8 }, end: { line: 137, column: 55 } }, type: "binary-expr", locations: [{ start: { line: 137, column: 8 }, end: { line: 137, column: 32 } }, { start: { line: 137, column: 36 }, end: { line: 137, column: 55 } }], line: 137 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0, "57": 0, "58": 0, "59": 0, "60": 0, "61": 0, "62": 0, "63": 0, "64": 0, "65": 0, "66": 0, "67": 0, "68": 0, "69": 0, "70": 0, "71": 0, "72": 0, "73": 0, "74": 0, "75": 0, "76": 0, "77": 0, "78": 0, "79": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0, 0], "7": [0, 0], "8": [0, 0], "9": [0, 0], "10": [0, 0], "11": [0, 0], "12": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/session/sagas/index.js"], names: ["saga", "ast", "controller", "solidity", "evm", "trace", "data", "web3", "actions", "debug", "forkListeners", "contexts", "sources", "RECORD_CONTRACTS", "recordContexts", "recordSources", "txHash", "provider", "START", "err", "fetchTx", "error", "visitAll", "recordAllocations", "ready", "map", "app", "result", "inspectTransaction", "begin", "addresses", "processTrace", "address", "indexOf", "push", "binaries", "obtainBinaries", "i", "recordInstance", "contractName", "binary", "sourceMap", "compiler", "addContext", "addSourceMap", "length", "sourceData", "undefined", "addSource", "source", "sourcePath", "addInstance"], mappings: ";;;;;QAiBiBA,I,GAAAA,I;;AAjBjB;;;;AAGA;;AAEA;;AAEA;;IAAYC,G;;AACZ;;IAAYC,U;;AACZ;;IAAYC,Q;;AACZ;;IAAYC,G;;AACZ;;IAAYC,K;;AACZ;;IAAYC,I;;AACZ;;IAAYC,I;;AAEZ;;IAAYC,O;;;;;;AAdZ,MAAMC,QAAQ,qBAAY,wBAAZ,CAAd;;AAgBO,UAAUT,IAAV,GAAiB;AACtBS,QAAM,oBAAN;AACA,SAAOC,eAAP;;AAEA;AACAD,QAAM,kCAAN;AACA,MAAI,EAAEE,QAAF,EAAYC,OAAZ,KAAwB,MAAM,mBAAKJ,QAAQK,gBAAb,CAAlC;;AAEAJ,QAAM,6BAAN;AACA,SAAOK,eAAe,GAAGH,QAAlB,CAAP;;AAEAF,QAAM,4BAAN;AACA,SAAOM,cAAc,GAAGH,OAAjB,CAAP;;AAEAH,QAAM,mBAAN;AACA;AACA,MAAI,EAAEO,MAAF,EAAUC,QAAV,KAAuB,MAAM,mBAAKT,QAAQU,KAAb,CAAjC;AACAT,QAAM,UAAN;;AAEA;AACAA,QAAM,2BAAN;AACA,MAAIU,MAAM,OAAOC,QAAQJ,MAAR,EAAgBC,QAAhB,CAAjB;AACA,MAAIE,GAAJ,EAAS;AACPV,UAAM,UAAN,EAAkBU,GAAlB;AACA,WAAOE,MAAMF,GAAN,CAAP;AACD,GAHD,MAGO;AACLV,UAAM,eAAN;AACA;AACA,WAAOR,IAAIqB,QAAJ,EAAP;;AAEA;AACAb,UAAM,yBAAN;AACA,WAAOH,KAAKiB,iBAAL,EAAP;;AAEAd,UAAM,UAAN;AACA;AACA,WAAOe,OAAP;AACD;AACF;;kBAEc,yBAAW,SAAX,EAAsBxB,IAAtB,C;;;AAEf,UAAUU,aAAV,GAA0B;AACxB,SAAO,MAAM,kBACX,CAACR,UAAD,EAAaI,IAAb,EAAmBF,GAAnB,EAAwBD,QAAxB,EAAkCE,KAAlC,EAAyCE,IAAzC,EAA+CkB,GAA/C,CACEC,OAAO,mBAAKA,IAAI1B,IAAT;AACP;AAFF,GADW,CAAb;AAMD;;AAED,UAAUoB,OAAV,CAAkBJ,MAAlB,EAA0BC,QAA1B,EAAoC;AAClC,MAAIU,SAAS,OAAOpB,KAAKqB,kBAAL,CAAwBZ,MAAxB,EAAgCC,QAAhC,CAApB;;AAEA,MAAIU,OAAON,KAAX,EAAkB;AAChB,WAAOM,OAAON,KAAd;AACD;;AAED,SAAOjB,IAAIyB,KAAJ,CAAUF,MAAV,CAAP;;AAEA,MAAIG,YAAY,OAAOzB,MAAM0B,YAAN,CAAmBJ,OAAOtB,KAA1B,CAAvB;AACA,MAAIsB,OAAOK,OAAP,IAAkBF,UAAUG,OAAV,CAAkBN,OAAOK,OAAzB,KAAqC,CAAC,CAA5D,EAA+D;AAC7DF,cAAUI,IAAV,CAAeP,OAAOK,OAAtB;AACD;;AAED,MAAIG,WAAW,OAAO5B,KAAK6B,cAAL,CAAoBN,SAApB,CAAtB;;AAEA,QAAM,kBACJA,UAAUL,GAAV,CAAc,CAACO,OAAD,EAAUK,CAAV,KAAgB,mBAAKC,cAAL,EAAqBN,OAArB,EAA8BG,SAASE,CAAT,CAA9B,CAA9B,CADI,CAAN;AAGD;;AAED,UAAUvB,cAAV,CAAyB,GAAGH,QAA5B,EAAsC;AACpC,mBAA0DA,QAA1D,EAAoE;AAAA,QAA3D,EAAE4B,YAAF,EAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,EAA2D;;AAClE,WAAOtC,IAAIuC,UAAJ,CAAeJ,YAAf,EAA6B,EAAEC,MAAF,EAA7B,EAAyCE,QAAzC,CAAP;;AAEA,QAAID,SAAJ,EAAe;AACb,aAAOtC,SAASyC,YAAT,CAAsBJ,MAAtB,EAA8BC,SAA9B,CAAP;AACD;AACF;AACF;;AAED,UAAU1B,aAAV,CAAwB,GAAGH,OAA3B,EAAoC;AAClC,OAAK,IAAIyB,IAAI,CAAb,EAAgBA,IAAIzB,QAAQiC,MAA5B,EAAoCR,GAApC,EAAyC;AACvC,UAAMS,aAAalC,QAAQyB,CAAR,CAAnB;AACA,QAAIS,eAAeC,SAAf,IAA4BD,eAAe,IAA/C,EAAqD;AACnD,aAAO3C,SAAS6C,SAAT,CACLF,WAAWG,MADN,EAELH,WAAWI,UAFN,EAGLJ,WAAW7C,GAHN,CAAP;AAKD;AACF;AACF;;AAED,UAAUqC,cAAV,CAAyBN,OAAzB,EAAkCQ,MAAlC,EAA0C;AACxC,SAAOpC,IAAI+C,WAAJ,CAAgBnB,OAAhB,EAAyBQ,MAAzB,CAAP;AACD;;AAED,UAAUhB,KAAV,GAAkB;AAChB,QAAM,kBAAIhB,QAAQgB,KAAR,EAAJ,CAAN;AACD;;AAED,UAAUH,KAAV,CAAgBF,GAAhB,EAAqB;AACnB,QAAM,kBAAIX,QAAQa,KAAR,CAAcF,GAAd,CAAJ,CAAN;AACD", file: "index.js", sourceRoot: "/Users/tyler/projects/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:session:sagas\");\n\nimport { call, all, fork, take, put } from \"redux-saga/effects\";\n\nimport { prefixName } from \"lib/helpers\";\n\nimport * as ast from \"lib/ast/sagas\";\nimport * as controller from \"lib/controller/sagas\";\nimport * as solidity from \"lib/solidity/sagas\";\nimport * as evm from \"lib/evm/sagas\";\nimport * as trace from \"lib/trace/sagas\";\nimport * as data from \"lib/data/sagas\";\nimport * as web3 from \"lib/web3/sagas\";\n\nimport * as actions from \"../actions\";\n\nexport function* saga() {\n  debug(\"starting listeners\");\n  yield* forkListeners();\n\n  // receiving & saving contracts into state\n  debug(\"waiting for contract information\");\n  let { contexts, sources } = yield take(actions.RECORD_CONTRACTS);\n\n  debug(\"recording contract binaries\");\n  yield* recordContexts(...contexts);\n\n  debug(\"recording contract sources\");\n  yield* recordSources(...sources);\n\n  debug(\"waiting for start\");\n  // wait for start signal\n  let { txHash, provider } = yield take(actions.START);\n  debug(\"starting\");\n\n  // process transaction\n  debug(\"fetching transaction info\");\n  let err = yield* fetchTx(txHash, provider);\n  if (err) {\n    debug(\"error %o\", err);\n    yield* error(err);\n  } else {\n    debug(\"visiting ASTs\");\n    // visit asts\n    yield* ast.visitAll();\n\n    //save allocation table\n    debug(\"saving allocation table\");\n    yield* data.recordAllocations();\n\n    debug(\"readying\");\n    // signal that stepping can begin\n    yield* ready();\n  }\n}\n\nexport default prefixName(\"session\", saga);\n\nfunction* forkListeners() {\n  return yield all(\n    [controller, data, evm, solidity, trace, web3].map(\n      app => fork(app.saga)\n      //ast no longer has a listener\n    )\n  );\n}\n\nfunction* fetchTx(txHash, provider) {\n  let result = yield* web3.inspectTransaction(txHash, provider);\n\n  if (result.error) {\n    return result.error;\n  }\n\n  yield* evm.begin(result);\n\n  let addresses = yield* trace.processTrace(result.trace);\n  if (result.address && addresses.indexOf(result.address) == -1) {\n    addresses.push(result.address);\n  }\n\n  let binaries = yield* web3.obtainBinaries(addresses);\n\n  yield all(\n    addresses.map((address, i) => call(recordInstance, address, binaries[i]))\n  );\n}\n\nfunction* recordContexts(...contexts) {\n  for (let { contractName, binary, sourceMap, compiler } of contexts) {\n    yield* evm.addContext(contractName, { binary }, compiler);\n\n    if (sourceMap) {\n      yield* solidity.addSourceMap(binary, sourceMap);\n    }\n  }\n}\n\nfunction* recordSources(...sources) {\n  for (let i = 0; i < sources.length; i++) {\n    const sourceData = sources[i];\n    if (sourceData !== undefined && sourceData !== null) {\n      yield* solidity.addSource(\n        sourceData.source,\n        sourceData.sourcePath,\n        sourceData.ast\n      );\n    }\n  }\n}\n\nfunction* recordInstance(address, binary) {\n  yield* evm.addInstance(address, binary);\n}\n\nfunction* ready() {\n  yield put(actions.ready());\n}\n\nfunction* error(err) {\n  yield put(actions.error(err));\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_44rcvmqtl.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });cov_44rcvmqtl.s[1]++;exports.saga = saga;var _debug = (cov_44rcvmqtl.s[2]++, __webpack_require__(0));var _debug2 = (cov_44rcvmqtl.s[3]++, _interopRequireDefault(_debug));var _effects = (cov_44rcvmqtl.s[4]++, __webpack_require__(15));var _helpers = (cov_44rcvmqtl.s[5]++, __webpack_require__(2));var _sagas = (cov_44rcvmqtl.s[6]++, __webpack_require__(69));var ast = (cov_44rcvmqtl.s[7]++, _interopRequireWildcard(_sagas));var _sagas2 = (cov_44rcvmqtl.s[8]++, __webpack_require__(70));var controller = (cov_44rcvmqtl.s[9]++, _interopRequireWildcard(_sagas2));var _sagas3 = (cov_44rcvmqtl.s[10]++, __webpack_require__(36));var solidity = (cov_44rcvmqtl.s[11]++, _interopRequireWildcard(_sagas3));var _sagas4 = (cov_44rcvmqtl.s[12]++, __webpack_require__(34));var evm = (cov_44rcvmqtl.s[13]++, _interopRequireWildcard(_sagas4));var _sagas5 = (cov_44rcvmqtl.s[14]++, __webpack_require__(33));var trace = (cov_44rcvmqtl.s[15]++, _interopRequireWildcard(_sagas5));var _sagas6 = (cov_44rcvmqtl.s[16]++, __webpack_require__(24));var data = (cov_44rcvmqtl.s[17]++, _interopRequireWildcard(_sagas6));var _sagas7 = (cov_44rcvmqtl.s[18]++, __webpack_require__(71));var web3 = (cov_44rcvmqtl.s[19]++, _interopRequireWildcard(_sagas7));var _actions = (cov_44rcvmqtl.s[20]++, __webpack_require__(21));var actions = (cov_44rcvmqtl.s[21]++, _interopRequireWildcard(_actions));function _interopRequireWildcard(obj) {
  cov_44rcvmqtl.f[0]++;cov_44rcvmqtl.s[22]++;if ((cov_44rcvmqtl.b[1][0]++, obj) && (cov_44rcvmqtl.b[1][1]++, obj.__esModule)) {
    cov_44rcvmqtl.b[0][0]++;cov_44rcvmqtl.s[23]++;return obj;
  } else {
    cov_44rcvmqtl.b[0][1]++;var newObj = (cov_44rcvmqtl.s[24]++, {});cov_44rcvmqtl.s[25]++;if (obj != null) {
      cov_44rcvmqtl.b[2][0]++;cov_44rcvmqtl.s[26]++;for (var key in obj) {
        cov_44rcvmqtl.s[27]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_44rcvmqtl.b[3][0]++;cov_44rcvmqtl.s[28]++;newObj[key] = obj[key];
        } else {
          cov_44rcvmqtl.b[3][1]++;
        }
      }
    } else {
      cov_44rcvmqtl.b[2][1]++;
    }cov_44rcvmqtl.s[29]++;newObj.default = obj;cov_44rcvmqtl.s[30]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_44rcvmqtl.f[1]++;cov_44rcvmqtl.s[31]++;return (cov_44rcvmqtl.b[5][0]++, obj) && (cov_44rcvmqtl.b[5][1]++, obj.__esModule) ? (cov_44rcvmqtl.b[4][0]++, obj) : (cov_44rcvmqtl.b[4][1]++, { default: obj });
}const debug = (cov_44rcvmqtl.s[32]++, (0, _debug2.default)("debugger:session:sagas"));function* saga() {
  cov_44rcvmqtl.f[2]++;cov_44rcvmqtl.s[33]++;debug("starting listeners");cov_44rcvmqtl.s[34]++;yield* forkListeners();cov_44rcvmqtl.s[35]++;debug("waiting for contract information");let { contexts, sources } = (cov_44rcvmqtl.s[36]++, yield (0, _effects.take)(actions.RECORD_CONTRACTS));cov_44rcvmqtl.s[37]++;debug("recording contract binaries");cov_44rcvmqtl.s[38]++;yield* recordContexts(...contexts);cov_44rcvmqtl.s[39]++;debug("recording contract sources");cov_44rcvmqtl.s[40]++;yield* recordSources(...sources);cov_44rcvmqtl.s[41]++;debug("waiting for start");let { txHash, provider } = (cov_44rcvmqtl.s[42]++, yield (0, _effects.take)(actions.START));cov_44rcvmqtl.s[43]++;debug("starting");cov_44rcvmqtl.s[44]++;debug("fetching transaction info");let err = (cov_44rcvmqtl.s[45]++, yield* fetchTx(txHash, provider));cov_44rcvmqtl.s[46]++;if (err) {
    cov_44rcvmqtl.b[6][0]++;cov_44rcvmqtl.s[47]++;debug("error %o", err);cov_44rcvmqtl.s[48]++;yield* error(err);
  } else {
    cov_44rcvmqtl.b[6][1]++;cov_44rcvmqtl.s[49]++;debug("visiting ASTs");cov_44rcvmqtl.s[50]++;yield* ast.visitAll();cov_44rcvmqtl.s[51]++;debug("saving allocation table");cov_44rcvmqtl.s[52]++;yield* data.recordAllocations();cov_44rcvmqtl.s[53]++;debug("readying");cov_44rcvmqtl.s[54]++;yield* ready();
  }
}cov_44rcvmqtl.s[55]++;exports.default = (0, _helpers.prefixName)("session", saga);function* forkListeners() {
  cov_44rcvmqtl.f[3]++;cov_44rcvmqtl.s[56]++;return yield (0, _effects.all)([controller, data, evm, solidity, trace, web3].map(app => {
    cov_44rcvmqtl.f[4]++;cov_44rcvmqtl.s[57]++;return (0, _effects.fork)(app.saga);
  }));
}function* fetchTx(txHash, provider) {
  cov_44rcvmqtl.f[5]++;let result = (cov_44rcvmqtl.s[58]++, yield* web3.inspectTransaction(txHash, provider));cov_44rcvmqtl.s[59]++;if (result.error) {
    cov_44rcvmqtl.b[7][0]++;cov_44rcvmqtl.s[60]++;return result.error;
  } else {
    cov_44rcvmqtl.b[7][1]++;
  }cov_44rcvmqtl.s[61]++;yield* evm.begin(result);let addresses = (cov_44rcvmqtl.s[62]++, yield* trace.processTrace(result.trace));cov_44rcvmqtl.s[63]++;if ((cov_44rcvmqtl.b[9][0]++, result.address) && (cov_44rcvmqtl.b[9][1]++, addresses.indexOf(result.address) == -1)) {
    cov_44rcvmqtl.b[8][0]++;cov_44rcvmqtl.s[64]++;addresses.push(result.address);
  } else {
    cov_44rcvmqtl.b[8][1]++;
  }let binaries = (cov_44rcvmqtl.s[65]++, yield* web3.obtainBinaries(addresses));cov_44rcvmqtl.s[66]++;yield (0, _effects.all)(addresses.map((address, i) => {
    cov_44rcvmqtl.f[6]++;cov_44rcvmqtl.s[67]++;return (0, _effects.call)(recordInstance, address, binaries[i]);
  }));
}function* recordContexts(...contexts) {
  cov_44rcvmqtl.f[7]++;cov_44rcvmqtl.s[68]++;for (let _ref of contexts) {
    let { contractName, binary, sourceMap, compiler } = (cov_44rcvmqtl.s[69]++, _ref);cov_44rcvmqtl.s[70]++;yield* evm.addContext(contractName, { binary }, compiler);cov_44rcvmqtl.s[71]++;if (sourceMap) {
      cov_44rcvmqtl.b[10][0]++;cov_44rcvmqtl.s[72]++;yield* solidity.addSourceMap(binary, sourceMap);
    } else {
      cov_44rcvmqtl.b[10][1]++;
    }
  }
}function* recordSources(...sources) {
  cov_44rcvmqtl.f[8]++;cov_44rcvmqtl.s[73]++;for (let i = 0; i < sources.length; i++) {
    const sourceData = (cov_44rcvmqtl.s[74]++, sources[i]);cov_44rcvmqtl.s[75]++;if ((cov_44rcvmqtl.b[12][0]++, sourceData !== undefined) && (cov_44rcvmqtl.b[12][1]++, sourceData !== null)) {
      cov_44rcvmqtl.b[11][0]++;cov_44rcvmqtl.s[76]++;yield* solidity.addSource(sourceData.source, sourceData.sourcePath, sourceData.ast);
    } else {
      cov_44rcvmqtl.b[11][1]++;
    }
  }
}function* recordInstance(address, binary) {
  cov_44rcvmqtl.f[9]++;cov_44rcvmqtl.s[77]++;yield* evm.addInstance(address, binary);
}function* ready() {
  cov_44rcvmqtl.f[10]++;cov_44rcvmqtl.s[78]++;yield (0, _effects.put)(actions.ready());
}function* error(err) {
  cov_44rcvmqtl.f[11]++;cov_44rcvmqtl.s[79]++;yield (0, _effects.put)(actions.error(err));
}

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_1xusa3rkyc = function () {
  var path = "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/ast/sagas/index.js",
      hash = "8d54cdfecc8400fd9a5f052bdef5358e620566c6",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/ast/sagas/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 15 }, end: { line: 7, column: 62 } }, "2": { start: { line: 9, column: 16 }, end: { line: 9, column: 48 } }, "3": { start: { line: 11, column: 0 }, end: { line: 11, column: 28 } }, "4": { start: { line: 13, column: 13 }, end: { line: 13, column: 29 } }, "5": { start: { line: 15, column: 14 }, end: { line: 15, column: 44 } }, "6": { start: { line: 17, column: 15 }, end: { line: 17, column: 44 } }, "7": { start: { line: 19, column: 13 }, end: { line: 19, column: 38 } }, "8": { start: { line: 21, column: 11 }, end: { line: 21, column: 42 } }, "9": { start: { line: 23, column: 17 }, end: { line: 23, column: 40 } }, "10": { start: { line: 25, column: 18 }, end: { line: 25, column: 52 } }, "11": { start: { line: 27, column: 40 }, end: { line: 27, column: 267 } }, "12": { start: { line: 27, column: 69 }, end: { line: 27, column: 80 } }, "13": { start: { line: 27, column: 103 }, end: { line: 27, column: 105 } }, "14": { start: { line: 27, column: 107 }, end: { line: 27, column: 228 } }, "15": { start: { line: 27, column: 126 }, end: { line: 27, column: 226 } }, "16": { start: { line: 27, column: 149 }, end: { line: 27, column: 224 } }, "17": { start: { line: 27, column: 201 }, end: { line: 27, column: 224 } }, "18": { start: { line: 27, column: 229 }, end: { line: 27, column: 250 } }, "19": { start: { line: 27, column: 251 }, end: { line: 27, column: 265 } }, "20": { start: { line: 29, column: 39 }, end: { line: 29, column: 93 } }, "21": { start: { line: 31, column: 14 }, end: { line: 31, column: 56 } }, "22": { start: { line: 34, column: 2 }, end: { line: 34, column: 40 } }, "23": { start: { line: 36, column: 2 }, end: { line: 36, column: 56 } }, "24": { start: { line: 38, column: 2 }, end: { line: 46, column: 3 } }, "25": { start: { line: 39, column: 4 }, end: { line: 41, column: 5 } }, "26": { start: { line: 40, column: 6 }, end: { line: 40, column: 83 } }, "27": { start: { line: 42, column: 9 }, end: { line: 46, column: 3 } }, "28": { start: { line: 43, column: 4 }, end: { line: 45, column: 5 } }, "29": { start: { line: 44, column: 6 }, end: { line: 44, column: 84 } }, "30": { start: { line: 48, column: 2 }, end: { line: 48, column: 45 } }, "31": { start: { line: 52, column: 2 }, end: { line: 54, column: 3 } }, "32": { start: { line: 53, column: 4 }, end: { line: 53, column: 11 } }, "33": { start: { line: 56, column: 2 }, end: { line: 56, column: 32 } }, "34": { start: { line: 58, column: 2 }, end: { line: 61, column: 3 } }, "35": { start: { line: 59, column: 4 }, end: { line: 59, column: 53 } }, "36": { start: { line: 60, column: 4 }, end: { line: 60, column: 60 } }, "37": { start: { line: 63, column: 2 }, end: { line: 73, column: 3 } }, "38": { start: { line: 65, column: 6 }, end: { line: 65, column: 55 } }, "39": { start: { line: 66, column: 6 }, end: { line: 66, column: 32 } }, "40": { start: { line: 67, column: 6 }, end: { line: 67, column: 12 } }, "41": { start: { line: 71, column: 6 }, end: { line: 71, column: 35 } }, "42": { start: { line: 72, column: 6 }, end: { line: 72, column: 12 } }, "43": { start: { line: 77, column: 2 }, end: { line: 77, column: 31 } }, "44": { start: { line: 83, column: 16 }, end: { line: 83, column: 77 } }, "45": { start: { line: 85, column: 2 }, end: { line: 85, column: 153 } }, "46": { start: { line: 85, column: 82 }, end: { line: 85, column: 92 } }, "47": { start: { line: 85, column: 117 }, end: { line: 85, column: 150 } }, "48": { start: { line: 87, column: 2 }, end: { line: 87, column: 25 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 27, column: 9 }, end: { line: 27, column: 32 } }, loc: { start: { line: 27, column: 38 }, end: { line: 27, column: 269 } }, line: 27 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 29, column: 9 }, end: { line: 29, column: 31 } }, loc: { start: { line: 29, column: 37 }, end: { line: 29, column: 95 } }, line: 29 }, "2": { name: "walk", decl: { start: { line: 33, column: 10 }, end: { line: 33, column: 14 } }, loc: { start: { line: 33, column: 62 }, end: { line: 49, column: 1 } }, line: 33 }, "3": { name: "handleEnter", decl: { start: { line: 51, column: 10 }, end: { line: 51, column: 21 } }, loc: { start: { line: 51, column: 57 }, end: { line: 74, column: 1 } }, line: 51 }, "4": { name: "handleExit", decl: { start: { line: 76, column: 10 }, end: { line: 76, column: 20 } }, loc: { start: { line: 76, column: 46 }, end: { line: 80, column: 1 } }, line: 76 }, "5": { name: "visitAll", decl: { start: { line: 82, column: 10 }, end: { line: 82, column: 18 } }, loc: { start: { line: 82, column: 21 }, end: { line: 88, column: 1 } }, line: 82 }, "6": { name: "(anonymous_6)", decl: { start: { line: 85, column: 65 }, end: { line: 85, column: 66 } }, loc: { start: { line: 85, column: 82 }, end: { line: 85, column: 92 } }, line: 85 }, "7": { name: "(anonymous_7)", decl: { start: { line: 85, column: 98 }, end: { line: 85, column: 99 } }, loc: { start: { line: 85, column: 117 }, end: { line: 85, column: 150 } }, line: 85 } }, branchMap: { "0": { loc: { start: { line: 27, column: 40 }, end: { line: 27, column: 267 } }, type: "if", locations: [{ start: { line: 27, column: 40 }, end: { line: 27, column: 267 } }, { start: { line: 27, column: 40 }, end: { line: 27, column: 267 } }], line: 27 }, "1": { loc: { start: { line: 27, column: 44 }, end: { line: 27, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 27, column: 44 }, end: { line: 27, column: 47 } }, { start: { line: 27, column: 51 }, end: { line: 27, column: 65 } }], line: 27 }, "2": { loc: { start: { line: 27, column: 107 }, end: { line: 27, column: 228 } }, type: "if", locations: [{ start: { line: 27, column: 107 }, end: { line: 27, column: 228 } }, { start: { line: 27, column: 107 }, end: { line: 27, column: 228 } }], line: 27 }, "3": { loc: { start: { line: 27, column: 149 }, end: { line: 27, column: 224 } }, type: "if", locations: [{ start: { line: 27, column: 149 }, end: { line: 27, column: 224 } }, { start: { line: 27, column: 149 }, end: { line: 27, column: 224 } }], line: 27 }, "4": { loc: { start: { line: 29, column: 46 }, end: { line: 29, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 29, column: 70 }, end: { line: 29, column: 73 } }, { start: { line: 29, column: 76 }, end: { line: 29, column: 92 } }], line: 29 }, "5": { loc: { start: { line: 29, column: 46 }, end: { line: 29, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 29, column: 46 }, end: { line: 29, column: 49 } }, { start: { line: 29, column: 53 }, end: { line: 29, column: 67 } }], line: 29 }, "6": { loc: { start: { line: 33, column: 31 }, end: { line: 33, column: 43 } }, type: "default-arg", locations: [{ start: { line: 33, column: 41 }, end: { line: 33, column: 43 } }], line: 33 }, "7": { loc: { start: { line: 33, column: 45 }, end: { line: 33, column: 60 } }, type: "default-arg", locations: [{ start: { line: 33, column: 56 }, end: { line: 33, column: 60 } }], line: 33 }, "8": { loc: { start: { line: 38, column: 2 }, end: { line: 46, column: 3 } }, type: "if", locations: [{ start: { line: 38, column: 2 }, end: { line: 46, column: 3 } }, { start: { line: 38, column: 2 }, end: { line: 46, column: 3 } }], line: 38 }, "9": { loc: { start: { line: 42, column: 9 }, end: { line: 46, column: 3 } }, type: "if", locations: [{ start: { line: 42, column: 9 }, end: { line: 46, column: 3 } }, { start: { line: 42, column: 9 }, end: { line: 46, column: 3 } }], line: 42 }, "10": { loc: { start: { line: 52, column: 2 }, end: { line: 54, column: 3 } }, type: "if", locations: [{ start: { line: 52, column: 2 }, end: { line: 54, column: 3 } }, { start: { line: 52, column: 2 }, end: { line: 54, column: 3 } }], line: 52 }, "11": { loc: { start: { line: 58, column: 2 }, end: { line: 61, column: 3 } }, type: "if", locations: [{ start: { line: 58, column: 2 }, end: { line: 61, column: 3 } }, { start: { line: 58, column: 2 }, end: { line: 61, column: 3 } }], line: 58 }, "12": { loc: { start: { line: 63, column: 2 }, end: { line: 73, column: 3 } }, type: "switch", locations: [{ start: { line: 64, column: 4 }, end: { line: 67, column: 12 } }, { start: { line: 68, column: 4 }, end: { line: 68, column: 30 } }, { start: { line: 69, column: 4 }, end: { line: 69, column: 28 } }, { start: { line: 70, column: 4 }, end: { line: 72, column: 12 } }], line: 63 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0], "7": [0], "8": [0, 0], "9": [0, 0], "10": [0, 0], "11": [0, 0], "12": [0, 0, 0, 0] }, inputSourceMap: { version: 3, sources: ["lib/ast/sagas/index.js"], names: ["visitAll", "data", "debug", "walk", "sourceId", "node", "pointer", "parentId", "handleEnter", "Array", "i", "child", "entries", "Object", "key", "id", "handleExit", "undefined", "scope", "nodeType", "declare", "defineType", "sources", "ast", "views", "filter", "_", "source", "map"], mappings: ";;;;;;;;;;QA0DiBA,Q,GAAAA,Q;;AA1DjB;;;;AAGA;;AAEA;;IAAYC,I;;AAEZ;;;;;;;;AANA,MAAMC,QAAQ,qBAAY,oBAAZ,CAAd;;AAQA,UAAUC,IAAV,CAAeC,QAAf,EAAyBC,IAAzB,EAA+BC,UAAU,EAAzC,EAA6CC,WAAW,IAAxD,EAA8D;AAC5DL,QAAM,eAAN,EAAuBI,OAAvB,EAAgCD,IAAhC;;AAEA,SAAOG,YAAYJ,QAAZ,EAAsBC,IAAtB,EAA4BC,OAA5B,EAAqCC,QAArC,CAAP;;AAEA,MAAIF,gBAAgBI,KAApB,EAA2B;AACzB,SAAK,IAAI,CAACC,CAAD,EAAIC,KAAJ,CAAT,IAAuBN,KAAKO,OAAL,EAAvB,EAAuC;AACrC,YAAM,mBAAKT,IAAL,EAAWC,QAAX,EAAqBO,KAArB,EAA6B,GAAEL,OAAQ,IAAGI,CAAE,EAA5C,EAA+CH,QAA/C,CAAN;AACD;AACF,GAJD,MAIO,IAAIF,gBAAgBQ,MAApB,EAA4B;AACjC,SAAK,IAAI,CAACC,GAAD,EAAMH,KAAN,CAAT,IAAyB,uBAAeN,IAAf,CAAzB,EAA+C;AAC7C,YAAM,mBAAKF,IAAL,EAAWC,QAAX,EAAqBO,KAArB,EAA6B,GAAEL,OAAQ,IAAGQ,GAAI,EAA9C,EAAiDT,KAAKU,EAAtD,CAAN;AACD;AACF;;AAED,SAAOC,WAAWZ,QAAX,EAAqBC,IAArB,EAA2BC,OAA3B,CAAP;AACD;;AAED,UAAUE,WAAV,CAAsBJ,QAAtB,EAAgCC,IAAhC,EAAsCC,OAAtC,EAA+CC,QAA/C,EAAyD;AACvD,MAAI,EAAEF,gBAAgBQ,MAAlB,CAAJ,EAA+B;AAC7B;AACD;;AAEDX,QAAM,aAAN,EAAqBI,OAArB;;AAEA,MAAID,KAAKU,EAAL,KAAYE,SAAhB,EAA2B;AACzBf,UAAM,uBAAN,EAA+BI,OAA/B,EAAwCD,KAAKU,EAA7C;AACA,WAAOd,KAAKiB,KAAL,CAAWb,KAAKU,EAAhB,EAAoBT,OAApB,EAA6BC,QAA7B,EAAuCH,QAAvC,CAAP;AACD;;AAED,UAAQC,KAAKc,QAAb;AACE,SAAK,qBAAL;AACEjB,YAAM,0BAAN,EAAkCI,OAAlC,EAA2CD,IAA3C;AACA,aAAOJ,KAAKmB,OAAL,CAAaf,IAAb,CAAP;AACA;AACF,SAAK,oBAAL;AACA,SAAK,kBAAL;AACA,SAAK,gBAAL;AACE,aAAOJ,KAAKoB,UAAL,CAAgBhB,IAAhB,CAAP;AACA;AATJ;AAWD;;AAED,UAAUW,UAAV,CAAqBZ,QAArB,EAA+BC,IAA/B,EAAqCC,OAArC,EAA8C;AAC5CJ,QAAM,YAAN,EAAoBI,OAApB;;AAEA;AACD;;AAEM,UAAUN,QAAV,GAAqB;AAC1B,MAAIsB,UAAU,MAAM,qBAAOC,oBAAIC,KAAJ,CAAUF,OAAjB,CAApB;;AAEA,QAAM,kBACJ,uBAAeA,OAAf,EACGG,MADH,CACU,CAAC,CAACC,CAAD,EAAIC,MAAJ,CAAD,KAAiBA,OAAOJ,GADlC,EAEGK,GAFH,CAEO,CAAC,CAACb,EAAD,EAAK,EAAEQ,GAAF,EAAL,CAAD,KAAmB,mBAAKpB,IAAL,EAAWY,EAAX,EAAeQ,GAAf,CAF1B,CADI,CAAN;;AAMArB,QAAM,eAAN;AACD", file: "index.js", sourceRoot: "/Users/tyler/projects/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:ast:sagas\");\n\nimport { all, call, select } from \"redux-saga/effects\";\n\nimport * as data from \"lib/data/sagas\";\n\nimport ast from \"../selectors\";\n\nfunction* walk(sourceId, node, pointer = \"\", parentId = null) {\n  debug(\"walking %o %o\", pointer, node);\n\n  yield* handleEnter(sourceId, node, pointer, parentId);\n\n  if (node instanceof Array) {\n    for (let [i, child] of node.entries()) {\n      yield call(walk, sourceId, child, `${pointer}/${i}`, parentId);\n    }\n  } else if (node instanceof Object) {\n    for (let [key, child] of Object.entries(node)) {\n      yield call(walk, sourceId, child, `${pointer}/${key}`, node.id);\n    }\n  }\n\n  yield* handleExit(sourceId, node, pointer);\n}\n\nfunction* handleEnter(sourceId, node, pointer, parentId) {\n  if (!(node instanceof Object)) {\n    return;\n  }\n\n  debug(\"entering %s\", pointer);\n\n  if (node.id !== undefined) {\n    debug(\"%s recording scope %s\", pointer, node.id);\n    yield* data.scope(node.id, pointer, parentId, sourceId);\n  }\n\n  switch (node.nodeType) {\n    case \"VariableDeclaration\":\n      debug(\"%s recording variable %o\", pointer, node);\n      yield* data.declare(node);\n      break;\n    case \"ContractDefinition\":\n    case \"StructDefinition\":\n    case \"EnumDefinition\":\n      yield* data.defineType(node);\n      break;\n  }\n}\n\nfunction* handleExit(sourceId, node, pointer) {\n  debug(\"exiting %s\", pointer);\n\n  // no-op right now\n}\n\nexport function* visitAll() {\n  let sources = yield select(ast.views.sources);\n\n  yield all(\n    Object.entries(sources)\n      .filter(([_, source]) => source.ast)\n      .map(([id, { ast }]) => call(walk, id, ast))\n  );\n\n  debug(\"done visiting\");\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_1xusa3rkyc.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _entries = (cov_1xusa3rkyc.s[1]++, __webpack_require__(8));var _entries2 = (cov_1xusa3rkyc.s[2]++, _interopRequireDefault(_entries));cov_1xusa3rkyc.s[3]++;exports.visitAll = visitAll;var _debug = (cov_1xusa3rkyc.s[4]++, __webpack_require__(0));var _debug2 = (cov_1xusa3rkyc.s[5]++, _interopRequireDefault(_debug));var _effects = (cov_1xusa3rkyc.s[6]++, __webpack_require__(15));var _sagas = (cov_1xusa3rkyc.s[7]++, __webpack_require__(24));var data = (cov_1xusa3rkyc.s[8]++, _interopRequireWildcard(_sagas));var _selectors = (cov_1xusa3rkyc.s[9]++, __webpack_require__(18));var _selectors2 = (cov_1xusa3rkyc.s[10]++, _interopRequireDefault(_selectors));function _interopRequireWildcard(obj) {
  cov_1xusa3rkyc.f[0]++;cov_1xusa3rkyc.s[11]++;if ((cov_1xusa3rkyc.b[1][0]++, obj) && (cov_1xusa3rkyc.b[1][1]++, obj.__esModule)) {
    cov_1xusa3rkyc.b[0][0]++;cov_1xusa3rkyc.s[12]++;return obj;
  } else {
    cov_1xusa3rkyc.b[0][1]++;var newObj = (cov_1xusa3rkyc.s[13]++, {});cov_1xusa3rkyc.s[14]++;if (obj != null) {
      cov_1xusa3rkyc.b[2][0]++;cov_1xusa3rkyc.s[15]++;for (var key in obj) {
        cov_1xusa3rkyc.s[16]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_1xusa3rkyc.b[3][0]++;cov_1xusa3rkyc.s[17]++;newObj[key] = obj[key];
        } else {
          cov_1xusa3rkyc.b[3][1]++;
        }
      }
    } else {
      cov_1xusa3rkyc.b[2][1]++;
    }cov_1xusa3rkyc.s[18]++;newObj.default = obj;cov_1xusa3rkyc.s[19]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_1xusa3rkyc.f[1]++;cov_1xusa3rkyc.s[20]++;return (cov_1xusa3rkyc.b[5][0]++, obj) && (cov_1xusa3rkyc.b[5][1]++, obj.__esModule) ? (cov_1xusa3rkyc.b[4][0]++, obj) : (cov_1xusa3rkyc.b[4][1]++, { default: obj });
}const debug = (cov_1xusa3rkyc.s[21]++, (0, _debug2.default)("debugger:ast:sagas"));function* walk(sourceId, node, pointer = (cov_1xusa3rkyc.b[6][0]++, ""), parentId = (cov_1xusa3rkyc.b[7][0]++, null)) {
  cov_1xusa3rkyc.f[2]++;cov_1xusa3rkyc.s[22]++;debug("walking %o %o", pointer, node);cov_1xusa3rkyc.s[23]++;yield* handleEnter(sourceId, node, pointer, parentId);cov_1xusa3rkyc.s[24]++;if (node instanceof Array) {
    cov_1xusa3rkyc.b[8][0]++;cov_1xusa3rkyc.s[25]++;for (let [i, child] of node.entries()) {
      cov_1xusa3rkyc.s[26]++;yield (0, _effects.call)(walk, sourceId, child, `${pointer}/${i}`, parentId);
    }
  } else {
    cov_1xusa3rkyc.b[8][1]++;cov_1xusa3rkyc.s[27]++;if (node instanceof Object) {
      cov_1xusa3rkyc.b[9][0]++;cov_1xusa3rkyc.s[28]++;for (let [key, child] of (0, _entries2.default)(node)) {
        cov_1xusa3rkyc.s[29]++;yield (0, _effects.call)(walk, sourceId, child, `${pointer}/${key}`, node.id);
      }
    } else {
      cov_1xusa3rkyc.b[9][1]++;
    }
  }cov_1xusa3rkyc.s[30]++;yield* handleExit(sourceId, node, pointer);
}function* handleEnter(sourceId, node, pointer, parentId) {
  cov_1xusa3rkyc.f[3]++;cov_1xusa3rkyc.s[31]++;if (!(node instanceof Object)) {
    cov_1xusa3rkyc.b[10][0]++;cov_1xusa3rkyc.s[32]++;return;
  } else {
    cov_1xusa3rkyc.b[10][1]++;
  }cov_1xusa3rkyc.s[33]++;debug("entering %s", pointer);cov_1xusa3rkyc.s[34]++;if (node.id !== undefined) {
    cov_1xusa3rkyc.b[11][0]++;cov_1xusa3rkyc.s[35]++;debug("%s recording scope %s", pointer, node.id);cov_1xusa3rkyc.s[36]++;yield* data.scope(node.id, pointer, parentId, sourceId);
  } else {
    cov_1xusa3rkyc.b[11][1]++;
  }cov_1xusa3rkyc.s[37]++;switch (node.nodeType) {case "VariableDeclaration":
      cov_1xusa3rkyc.b[12][0]++;cov_1xusa3rkyc.s[38]++;debug("%s recording variable %o", pointer, node);cov_1xusa3rkyc.s[39]++;yield* data.declare(node);cov_1xusa3rkyc.s[40]++;break;case "ContractDefinition":
      cov_1xusa3rkyc.b[12][1]++;case "StructDefinition":
      cov_1xusa3rkyc.b[12][2]++;case "EnumDefinition":
      cov_1xusa3rkyc.b[12][3]++;cov_1xusa3rkyc.s[41]++;yield* data.defineType(node);cov_1xusa3rkyc.s[42]++;break;}
}function* handleExit(sourceId, node, pointer) {
  cov_1xusa3rkyc.f[4]++;cov_1xusa3rkyc.s[43]++;debug("exiting %s", pointer);
}function* visitAll() {
  cov_1xusa3rkyc.f[5]++;let sources = (cov_1xusa3rkyc.s[44]++, yield (0, _effects.select)(_selectors2.default.views.sources));cov_1xusa3rkyc.s[45]++;yield (0, _effects.all)((0, _entries2.default)(sources).filter(([_, source]) => {
    cov_1xusa3rkyc.f[6]++;cov_1xusa3rkyc.s[46]++;return source.ast;
  }).map(([id, { ast }]) => {
    cov_1xusa3rkyc.f[7]++;cov_1xusa3rkyc.s[47]++;return (0, _effects.call)(walk, id, ast);
  }));cov_1xusa3rkyc.s[48]++;debug("done visiting");
}

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_518iucvyr = function () {
  var path = "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/controller/sagas/index.js",
      hash = "ccce95c9cd6883eb3fb5c5835cf90df73a7c0310",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/controller/sagas/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 12 }, end: { line: 7, column: 56 } }, "2": { start: { line: 9, column: 13 }, end: { line: 9, column: 42 } }, "3": { start: { line: 11, column: 11 }, end: { line: 11, column: 47 } }, "4": { start: { line: 13, column: 12 }, end: { line: 13, column: 40 } }, "5": { start: { line: 15, column: 0 }, end: { line: 15, column: 20 } }, "6": { start: { line: 17, column: 13 }, end: { line: 17, column: 29 } }, "7": { start: { line: 19, column: 14 }, end: { line: 19, column: 44 } }, "8": { start: { line: 21, column: 15 }, end: { line: 21, column: 44 } }, "9": { start: { line: 23, column: 15 }, end: { line: 23, column: 37 } }, "10": { start: { line: 25, column: 13 }, end: { line: 25, column: 39 } }, "11": { start: { line: 27, column: 12 }, end: { line: 27, column: 43 } }, "12": { start: { line: 29, column: 14 }, end: { line: 29, column: 39 } }, "13": { start: { line: 31, column: 11 }, end: { line: 31, column: 43 } }, "14": { start: { line: 33, column: 14 }, end: { line: 33, column: 38 } }, "15": { start: { line: 35, column: 10 }, end: { line: 35, column: 42 } }, "16": { start: { line: 37, column: 14 }, end: { line: 37, column: 43 } }, "17": { start: { line: 39, column: 15 }, end: { line: 39, column: 47 } }, "18": { start: { line: 41, column: 15 }, end: { line: 41, column: 36 } }, "19": { start: { line: 43, column: 14 }, end: { line: 43, column: 47 } }, "20": { start: { line: 45, column: 17 }, end: { line: 45, column: 40 } }, "21": { start: { line: 47, column: 18 }, end: { line: 47, column: 52 } }, "22": { start: { line: 49, column: 40 }, end: { line: 49, column: 267 } }, "23": { start: { line: 49, column: 69 }, end: { line: 49, column: 80 } }, "24": { start: { line: 49, column: 103 }, end: { line: 49, column: 105 } }, "25": { start: { line: 49, column: 107 }, end: { line: 49, column: 228 } }, "26": { start: { line: 49, column: 126 }, end: { line: 49, column: 226 } }, "27": { start: { line: 49, column: 149 }, end: { line: 49, column: 224 } }, "28": { start: { line: 49, column: 201 }, end: { line: 49, column: 224 } }, "29": { start: { line: 49, column: 229 }, end: { line: 49, column: 250 } }, "30": { start: { line: 49, column: 251 }, end: { line: 49, column: 265 } }, "31": { start: { line: 51, column: 39 }, end: { line: 51, column: 93 } }, "32": { start: { line: 53, column: 14 }, end: { line: 53, column: 63 } }, "33": { start: { line: 55, column: 22 }, end: { line: 63, column: 1 } }, "34": { start: { line: 66, column: 22 }, end: { line: 66, column: 86 } }, "35": { start: { line: 69, column: 2 }, end: { line: 81, column: 3 } }, "36": { start: { line: 70, column: 4 }, end: { line: 70, column: 40 } }, "37": { start: { line: 71, column: 17 }, end: { line: 71, column: 77 } }, "38": { start: { line: 72, column: 4 }, end: { line: 72, column: 32 } }, "39": { start: { line: 73, column: 15 }, end: { line: 73, column: 41 } }, "40": { start: { line: 75, column: 4 }, end: { line: 75, column: 60 } }, "41": { start: { line: 77, column: 4 }, end: { line: 80, column: 7 } }, "42": { start: { line: 84, column: 0 }, end: { line: 84, column: 63 } }, "43": { start: { line: 92, column: 2 }, end: { line: 92, column: 25 } }, "44": { start: { line: 103, column: 24 }, end: { line: 103, column: 100 } }, "45": { start: { line: 107, column: 2 }, end: { line: 121, column: 208 } }, "46": { start: { line: 109, column: 4 }, end: { line: 109, column: 21 } }, "47": { start: { line: 112, column: 4 }, end: { line: 116, column: 5 } }, "48": { start: { line: 113, column: 6 }, end: { line: 113, column: 82 } }, "49": { start: { line: 115, column: 6 }, end: { line: 115, column: 22 } }, "50": { start: { line: 118, column: 4 }, end: { line: 118, column: 72 } }, "51": { start: { line: 137, column: 2 }, end: { line: 141, column: 3 } }, "52": { start: { line: 138, column: 4 }, end: { line: 138, column: 22 } }, "53": { start: { line: 140, column: 4 }, end: { line: 140, column: 11 } }, "54": { start: { line: 143, column: 2 }, end: { line: 147, column: 3 } }, "55": { start: { line: 144, column: 4 }, end: { line: 144, column: 22 } }, "56": { start: { line: 146, column: 4 }, end: { line: 146, column: 11 } }, "57": { start: { line: 149, column: 24 }, end: { line: 149, column: 93 } }, "58": { start: { line: 150, column: 24 }, end: { line: 150, column: 100 } }, "59": { start: { line: 154, column: 2 }, end: { line: 165, column: 90 } }, "60": { start: { line: 155, column: 4 }, end: { line: 155, column: 22 } }, "61": { start: { line: 157, column: 4 }, end: { line: 157, column: 89 } }, "62": { start: { line: 158, column: 4 }, end: { line: 158, column: 96 } }, "63": { start: { line: 174, column: 2 }, end: { line: 178, column: 3 } }, "64": { start: { line: 175, column: 4 }, end: { line: 175, column: 22 } }, "65": { start: { line: 177, column: 4 }, end: { line: 177, column: 11 } }, "66": { start: { line: 180, column: 24 }, end: { line: 180, column: 93 } }, "67": { start: { line: 183, column: 2 }, end: { line: 187, column: 42 } }, "68": { start: { line: 184, column: 4 }, end: { line: 184, column: 22 } }, "69": { start: { line: 186, column: 4 }, end: { line: 186, column: 89 } }, "70": { start: { line: 197, column: 24 }, end: { line: 197, column: 93 } }, "71": { start: { line: 198, column: 24 }, end: { line: 198, column: 100 } }, "72": { start: { line: 202, column: 2 }, end: { line: 215, column: 100 } }, "73": { start: { line: 203, column: 4 }, end: { line: 203, column: 22 } }, "74": { start: { line: 205, column: 4 }, end: { line: 205, column: 89 } }, "75": { start: { line: 206, column: 4 }, end: { line: 206, column: 96 } }, "76": { start: { line: 226, column: 20 }, end: { line: 226, column: 79 } }, "77": { start: { line: 228, column: 22 }, end: { line: 228, column: 27 } }, "78": { start: { line: 230, column: 2 }, end: { line: 230, column: 85 } }, "79": { start: { line: 231, column: 2 }, end: { line: 231, column: 40 } }, "80": { start: { line: 232, column: 2 }, end: { line: 232, column: 61 } }, "81": { start: { line: 233, column: 2 }, end: { line: 233, column: 46 } }, "82": { start: { line: 235, column: 2 }, end: { line: 258, column: 40 } }, "83": { start: { line: 236, column: 4 }, end: { line: 236, column: 22 } }, "84": { start: { line: 238, column: 4 }, end: { line: 238, column: 31 } }, "85": { start: { line: 239, column: 4 }, end: { line: 239, column: 39 } }, "86": { start: { line: 241, column: 4 }, end: { line: 241, column: 87 } }, "87": { start: { line: 242, column: 4 }, end: { line: 242, column: 72 } }, "88": { start: { line: 243, column: 4 }, end: { line: 243, column: 35 } }, "89": { start: { line: 245, column: 4 }, end: { line: 245, column: 42 } }, "90": { start: { line: 246, column: 4 }, end: { line: 246, column: 63 } }, "91": { start: { line: 247, column: 4 }, end: { line: 247, column: 48 } }, "92": { start: { line: 249, column: 4 }, end: { line: 257, column: 18 } }, "93": { start: { line: 250, column: 6 }, end: { line: 253, column: 7 } }, "94": { start: { line: 251, column: 8 }, end: { line: 251, column: 59 } }, "95": { start: { line: 252, column: 8 }, end: { line: 252, column: 68 } }, "96": { start: { line: 256, column: 6 }, end: { line: 256, column: 140 } }, "97": { start: { line: 265, column: 2 }, end: { line: 265, column: 22 } }, "98": { start: { line: 266, column: 2 }, end: { line: 266, column: 21 } }, "99": { start: { line: 267, column: 2 }, end: { line: 267, column: 26 } }, "100": { start: { line: 268, column: 2 }, end: { line: 268, column: 23 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 49, column: 9 }, end: { line: 49, column: 32 } }, loc: { start: { line: 49, column: 38 }, end: { line: 49, column: 269 } }, line: 49 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 51, column: 9 }, end: { line: 51, column: 31 } }, loc: { start: { line: 51, column: 37 }, end: { line: 51, column: 95 } }, line: 51 }, "2": { name: "saga", decl: { start: { line: 68, column: 10 }, end: { line: 68, column: 14 } }, loc: { start: { line: 68, column: 17 }, end: { line: 82, column: 1 } }, line: 68 }, "3": { name: "advance", decl: { start: { line: 90, column: 10 }, end: { line: 90, column: 17 } }, loc: { start: { line: 90, column: 20 }, end: { line: 93, column: 1 } }, line: 90 }, "4": { name: "stepNext", decl: { start: { line: 102, column: 10 }, end: { line: 102, column: 18 } }, loc: { start: { line: 102, column: 21 }, end: { line: 122, column: 1 } }, line: 102 }, "5": { name: "stepInto", decl: { start: { line: 136, column: 10 }, end: { line: 136, column: 18 } }, loc: { start: { line: 136, column: 21 }, end: { line: 166, column: 1 } }, line: 136 }, "6": { name: "stepOut", decl: { start: { line: 173, column: 10 }, end: { line: 173, column: 17 } }, loc: { start: { line: 173, column: 20 }, end: { line: 188, column: 1 } }, line: 173 }, "7": { name: "stepOver", decl: { start: { line: 196, column: 10 }, end: { line: 196, column: 18 } }, loc: { start: { line: 196, column: 21 }, end: { line: 216, column: 1 } }, line: 196 }, "8": { name: "continueUntilBreakpoint", decl: { start: { line: 221, column: 10 }, end: { line: 221, column: 33 } }, loc: { start: { line: 221, column: 36 }, end: { line: 259, column: 1 } }, line: 221 }, "9": { name: "(anonymous_9)", decl: { start: { line: 249, column: 39 }, end: { line: 249, column: 40 } }, loc: { start: { line: 249, column: 69 }, end: { line: 257, column: 5 } }, line: 249 }, "10": { name: "reset", decl: { start: { line: 264, column: 10 }, end: { line: 264, column: 15 } }, loc: { start: { line: 264, column: 18 }, end: { line: 269, column: 1 } }, line: 264 } }, branchMap: { "0": { loc: { start: { line: 49, column: 40 }, end: { line: 49, column: 267 } }, type: "if", locations: [{ start: { line: 49, column: 40 }, end: { line: 49, column: 267 } }, { start: { line: 49, column: 40 }, end: { line: 49, column: 267 } }], line: 49 }, "1": { loc: { start: { line: 49, column: 44 }, end: { line: 49, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 49, column: 44 }, end: { line: 49, column: 47 } }, { start: { line: 49, column: 51 }, end: { line: 49, column: 65 } }], line: 49 }, "2": { loc: { start: { line: 49, column: 107 }, end: { line: 49, column: 228 } }, type: "if", locations: [{ start: { line: 49, column: 107 }, end: { line: 49, column: 228 } }, { start: { line: 49, column: 107 }, end: { line: 49, column: 228 } }], line: 49 }, "3": { loc: { start: { line: 49, column: 149 }, end: { line: 49, column: 224 } }, type: "if", locations: [{ start: { line: 49, column: 149 }, end: { line: 49, column: 224 } }, { start: { line: 49, column: 149 }, end: { line: 49, column: 224 } }], line: 49 }, "4": { loc: { start: { line: 51, column: 46 }, end: { line: 51, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 51, column: 70 }, end: { line: 51, column: 73 } }, { start: { line: 51, column: 76 }, end: { line: 51, column: 92 } }], line: 51 }, "5": { loc: { start: { line: 51, column: 46 }, end: { line: 51, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 51, column: 46 }, end: { line: 51, column: 49 } }, { start: { line: 51, column: 53 }, end: { line: 51, column: 67 } }], line: 51 }, "6": { loc: { start: { line: 121, column: 11 }, end: { line: 121, column: 206 } }, type: "binary-expr", locations: [{ start: { line: 121, column: 11 }, end: { line: 121, column: 20 } }, { start: { line: 121, column: 25 }, end: { line: 121, column: 34 } }, { start: { line: 121, column: 38 }, end: { line: 121, column: 52 } }, { start: { line: 121, column: 56 }, end: { line: 121, column: 97 } }, { start: { line: 121, column: 101 }, end: { line: 121, column: 150 } }, { start: { line: 121, column: 154 }, end: { line: 121, column: 205 } }], line: 121 }, "7": { loc: { start: { line: 137, column: 2 }, end: { line: 141, column: 3 } }, type: "if", locations: [{ start: { line: 137, column: 2 }, end: { line: 141, column: 3 } }, { start: { line: 137, column: 2 }, end: { line: 141, column: 3 } }], line: 137 }, "8": { loc: { start: { line: 143, column: 2 }, end: { line: 147, column: 3 } }, type: "if", locations: [{ start: { line: 143, column: 2 }, end: { line: 147, column: 3 } }, { start: { line: 143, column: 2 }, end: { line: 147, column: 3 } }], line: 143 }, "9": { loc: { start: { line: 161, column: 2 }, end: { line: 165, column: 88 } }, type: "binary-expr", locations: [{ start: { line: 161, column: 2 }, end: { line: 161, column: 31 } }, { start: { line: 163, column: 2 }, end: { line: 163, column: 43 } }, { start: { line: 165, column: 2 }, end: { line: 165, column: 88 } }], line: 161 }, "10": { loc: { start: { line: 174, column: 2 }, end: { line: 178, column: 3 } }, type: "if", locations: [{ start: { line: 174, column: 2 }, end: { line: 178, column: 3 } }, { start: { line: 174, column: 2 }, end: { line: 178, column: 3 } }], line: 174 }, "11": { loc: { start: { line: 211, column: 2 }, end: { line: 215, column: 98 } }, type: "binary-expr", locations: [{ start: { line: 211, column: 2 }, end: { line: 211, column: 33 } }, { start: { line: 215, column: 2 }, end: { line: 215, column: 30 } }, { start: { line: 215, column: 34 }, end: { line: 215, column: 97 } }], line: 211 }, "12": { loc: { start: { line: 258, column: 11 }, end: { line: 258, column: 38 } }, type: "binary-expr", locations: [{ start: { line: 258, column: 11 }, end: { line: 258, column: 25 } }, { start: { line: 258, column: 29 }, end: { line: 258, column: 38 } }], line: 258 }, "13": { loc: { start: { line: 250, column: 6 }, end: { line: 253, column: 7 } }, type: "if", locations: [{ start: { line: 250, column: 6 }, end: { line: 253, column: 7 } }, { start: { line: 250, column: 6 }, end: { line: 253, column: 7 } }], line: 250 }, "14": { loc: { start: { line: 252, column: 15 }, end: { line: 252, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 252, column: 15 }, end: { line: 252, column: 43 } }, { start: { line: 252, column: 47 }, end: { line: 252, column: 67 } }], line: 252 }, "15": { loc: { start: { line: 256, column: 13 }, end: { line: 256, column: 139 } }, type: "binary-expr", locations: [{ start: { line: 256, column: 13 }, end: { line: 256, column: 41 } }, { start: { line: 256, column: 45 }, end: { line: 256, column: 65 } }, { start: { line: 256, column: 70 }, end: { line: 256, column: 106 } }, { start: { line: 256, column: 110 }, end: { line: 256, column: 138 } }], line: 256 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0, "57": 0, "58": 0, "59": 0, "60": 0, "61": 0, "62": 0, "63": 0, "64": 0, "65": 0, "66": 0, "67": 0, "68": 0, "69": 0, "70": 0, "71": 0, "72": 0, "73": 0, "74": 0, "75": 0, "76": 0, "77": 0, "78": 0, "79": 0, "80": 0, "81": 0, "82": 0, "83": 0, "84": 0, "85": 0, "86": 0, "87": 0, "88": 0, "89": 0, "90": 0, "91": 0, "92": 0, "93": 0, "94": 0, "95": 0, "96": 0, "97": 0, "98": 0, "99": 0, "100": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0, 0, 0, 0, 0, 0], "7": [0, 0], "8": [0, 0], "9": [0, 0, 0], "10": [0, 0], "11": [0, 0, 0], "12": [0, 0], "13": [0, 0], "14": [0, 0], "15": [0, 0, 0, 0] }, inputSourceMap: { version: 3, sources: ["lib/controller/sagas/index.js"], names: ["saga", "trace", "data", "evm", "solidity", "actions", "debug", "CONTROL_SAGAS", "ADVANCE", "advance", "STEP_NEXT", "stepNext", "STEP_OVER", "stepOver", "STEP_INTO", "stepInto", "STEP_OUT", "stepOut", "CONTINUE", "continueUntilBreakpoint", "RESET", "reset", "SKIPPED_TYPES", "action", "type", "beginStep", "exec", "interrupt", "INTERRUPT", "startingRange", "controller", "current", "location", "sourceRange", "upcoming", "finished", "e", "node", "has", "nodeType", "start", "length", "willJump", "isMultiline", "startingDepth", "functionDepth", "currentDepth", "currentRange", "lines", "line", "currentLocation", "currentNode", "currentLine", "currentSourceId", "previousLine", "previousSourceId", "breakpoints", "breakpointHit", "id", "source", "filter", "sourceId", "undefined"], mappings: "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", file: "index.js", sourceRoot: "/Users/tyler/projects/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:controller:sagas\");\n\nimport { put, call, race, take, select } from \"redux-saga/effects\";\n\nimport { prefixName } from \"lib/helpers\";\n\nimport * as trace from \"lib/trace/sagas\";\nimport * as data from \"lib/data/sagas\";\nimport * as evm from \"lib/evm/sagas\";\nimport * as solidity from \"lib/solidity/sagas\";\n\nimport * as actions from \"../actions\";\n\nimport controller from \"../selectors\";\n\nconst CONTROL_SAGAS = {\n  [actions.ADVANCE]: advance,\n  [actions.STEP_NEXT]: stepNext,\n  [actions.STEP_OVER]: stepOver,\n  [actions.STEP_INTO]: stepInto,\n  [actions.STEP_OUT]: stepOut,\n  [actions.CONTINUE]: continueUntilBreakpoint,\n  [actions.RESET]: reset\n};\n\n/** AST node types that are skipped to filter out some noise */\nconst SKIPPED_TYPES = new Set([\"ContractDefinition\", \"VariableDeclaration\"]);\n\nexport function* saga() {\n  while (true) {\n    debug(\"waiting for control action\");\n    let action = yield take(Object.keys(CONTROL_SAGAS));\n    debug(\"got control action\");\n    let saga = CONTROL_SAGAS[action.type];\n\n    yield put(actions.beginStep(action.type));\n\n    yield race({\n      exec: call(saga, action),\n      interrupt: take(actions.INTERRUPT)\n    });\n  }\n}\n\nexport default prefixName(\"controller\", saga);\n\n/**\n * Advance the state by one instruction\n */\nfunction* advance() {\n  // send action to advance trace\n  yield* trace.advance();\n}\n\n/**\n * stepNext - step to the next logical code segment\n *\n * Note: It might take multiple instructions to express the same section of code.\n * \"Stepping\", then, is stepping to the next logical item, not stepping to the next\n * instruction. See advance() if you'd like to advance by one instruction.\n */\nfunction* stepNext() {\n  const startingRange = yield select(controller.current.location.sourceRange);\n\n  var upcoming, finished;\n\n  do {\n    // advance at least once step\n    yield* advance();\n\n    // and check the next source range\n    try {\n      upcoming = yield select(controller.current.location);\n    } catch (e) {\n      upcoming = null;\n    }\n\n    finished = yield select(controller.finished);\n\n    // if the next step's source range is still the same, keep going\n  } while (\n    !finished &&\n    (!upcoming ||\n      !upcoming.node ||\n      SKIPPED_TYPES.has(upcoming.node.nodeType) ||\n      (upcoming.sourceRange.start == startingRange.start &&\n        upcoming.sourceRange.length == startingRange.length))\n  );\n}\n\n/**\n * stepInto - step into the current function\n *\n * Conceptually this is easy, but from a programming standpoint it's hard.\n * Code like `getBalance(msg.sender)` might be highlighted, but there could\n * be a number of different intermediate steps (like evaluating `msg.sender`)\n * before `getBalance` is stepped into. This function will step into the first\n * function available (where instruction.jump == \"i\"), ignoring any intermediate\n * steps that fall within the same code range. If there's a step encountered\n * that exists outside of the range, then stepInto will only execute until that\n * step.\n */\nfunction* stepInto() {\n  if (yield select(controller.current.willJump)) {\n    yield* stepNext();\n\n    return;\n  }\n\n  if (yield select(controller.current.location.isMultiline)) {\n    yield* stepOver();\n\n    return;\n  }\n\n  const startingDepth = yield select(controller.current.functionDepth);\n  const startingRange = yield select(controller.current.location.sourceRange);\n  var currentDepth;\n  var currentRange;\n\n  do {\n    yield* stepNext();\n\n    currentDepth = yield select(controller.current.functionDepth);\n    currentRange = yield select(controller.current.location.sourceRange);\n  } while (\n    // the function stack has not increased,\n    currentDepth <= startingDepth &&\n    // the current source range begins on or after the starting range\n    currentRange.start >= startingRange.start &&\n    // and the current range ends on or before the starting range ends\n    currentRange.start + currentRange.length <=\n      startingRange.start + startingRange.length\n  );\n}\n\n/**\n * Step out of the current function\n *\n * This will run until the debugger encounters a decrease in function depth.\n */\nfunction* stepOut() {\n  if (yield select(controller.current.location.isMultiline)) {\n    yield* stepOver();\n\n    return;\n  }\n\n  const startingDepth = yield select(controller.current.functionDepth);\n  var currentDepth;\n\n  do {\n    yield* stepNext();\n\n    currentDepth = yield select(controller.current.functionDepth);\n  } while (currentDepth >= startingDepth);\n}\n\n/**\n * stepOver - step over the current line\n *\n * Step over the current line. This will step to the next instruction that\n * exists on a different line of code within the same function depth.\n */\nfunction* stepOver() {\n  const startingDepth = yield select(controller.current.functionDepth);\n  const startingRange = yield select(controller.current.location.sourceRange);\n  var currentDepth;\n  var currentRange;\n\n  do {\n    yield* stepNext();\n\n    currentDepth = yield select(controller.current.functionDepth);\n    currentRange = yield select(controller.current.location.sourceRange);\n  } while (\n    // keep stepping provided:\n    //\n    // we haven't jumped out\n    !(currentDepth < startingDepth) &&\n    // either: function depth is greater than starting (ignore function calls)\n    // or, if we're at the same depth, keep stepping until we're on a new\n    // line.\n    (currentDepth > startingDepth ||\n      currentRange.lines.start.line == startingRange.lines.start.line)\n  );\n}\n\n/**\n * continueUntilBreakpoint - step through execution until a breakpoint\n */\nfunction* continueUntilBreakpoint() {\n  var currentLocation, currentNode, currentLine, currentSourceId;\n  var finished;\n  var previousLine, previousSourceId;\n\n  let breakpoints = yield select(controller.breakpoints);\n\n  let breakpointHit = false;\n\n  currentLocation = yield select(controller.current.location);\n  currentNode = currentLocation.node.id;\n  currentLine = currentLocation.sourceRange.lines.start.line;\n  currentSourceId = currentLocation.source.id;\n\n  do {\n    yield* stepNext();\n\n    previousLine = currentLine;\n    previousSourceId = currentSourceId;\n\n    currentLocation = yield select(controller.current.location);\n    finished = yield select(controller.finished);\n    debug(\"finished %o\", finished);\n\n    currentNode = currentLocation.node.id;\n    currentLine = currentLocation.sourceRange.lines.start.line;\n    currentSourceId = currentLocation.source.id;\n\n    breakpointHit =\n      breakpoints.filter(({ sourceId, line, node }) => {\n        if (node !== undefined) {\n          debug(\"node %d currentNode %d\", node, currentNode);\n          return sourceId === currentSourceId && node === currentNode;\n        }\n        //otherwise, we have a line-style breakpoint; we want to stop at the\n        //*first* point on the line\n        return (\n          sourceId === currentSourceId &&\n          line === currentLine &&\n          (currentSourceId !== previousSourceId || currentLine !== previousLine)\n        );\n      }).length > 0;\n  } while (!breakpointHit && !finished);\n}\n\n/**\n * reset -- reset the state of the debugger\n */\nfunction* reset() {\n  yield* data.reset();\n  yield* evm.reset();\n  yield* solidity.reset();\n  yield* trace.reset();\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_518iucvyr.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _keys = (cov_518iucvyr.s[1]++, __webpack_require__(17));var _keys2 = (cov_518iucvyr.s[2]++, _interopRequireDefault(_keys));var _set = (cov_518iucvyr.s[3]++, __webpack_require__(25));var _set2 = (cov_518iucvyr.s[4]++, _interopRequireDefault(_set));cov_518iucvyr.s[5]++;exports.saga = saga;var _debug = (cov_518iucvyr.s[6]++, __webpack_require__(0));var _debug2 = (cov_518iucvyr.s[7]++, _interopRequireDefault(_debug));var _effects = (cov_518iucvyr.s[8]++, __webpack_require__(15));var _helpers = (cov_518iucvyr.s[9]++, __webpack_require__(2));var _sagas = (cov_518iucvyr.s[10]++, __webpack_require__(33));var trace = (cov_518iucvyr.s[11]++, _interopRequireWildcard(_sagas));var _sagas2 = (cov_518iucvyr.s[12]++, __webpack_require__(24));var data = (cov_518iucvyr.s[13]++, _interopRequireWildcard(_sagas2));var _sagas3 = (cov_518iucvyr.s[14]++, __webpack_require__(34));var evm = (cov_518iucvyr.s[15]++, _interopRequireWildcard(_sagas3));var _sagas4 = (cov_518iucvyr.s[16]++, __webpack_require__(36));var solidity = (cov_518iucvyr.s[17]++, _interopRequireWildcard(_sagas4));var _actions = (cov_518iucvyr.s[18]++, __webpack_require__(27));var actions = (cov_518iucvyr.s[19]++, _interopRequireWildcard(_actions));var _selectors = (cov_518iucvyr.s[20]++, __webpack_require__(38));var _selectors2 = (cov_518iucvyr.s[21]++, _interopRequireDefault(_selectors));function _interopRequireWildcard(obj) {
  cov_518iucvyr.f[0]++;cov_518iucvyr.s[22]++;if ((cov_518iucvyr.b[1][0]++, obj) && (cov_518iucvyr.b[1][1]++, obj.__esModule)) {
    cov_518iucvyr.b[0][0]++;cov_518iucvyr.s[23]++;return obj;
  } else {
    cov_518iucvyr.b[0][1]++;var newObj = (cov_518iucvyr.s[24]++, {});cov_518iucvyr.s[25]++;if (obj != null) {
      cov_518iucvyr.b[2][0]++;cov_518iucvyr.s[26]++;for (var key in obj) {
        cov_518iucvyr.s[27]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_518iucvyr.b[3][0]++;cov_518iucvyr.s[28]++;newObj[key] = obj[key];
        } else {
          cov_518iucvyr.b[3][1]++;
        }
      }
    } else {
      cov_518iucvyr.b[2][1]++;
    }cov_518iucvyr.s[29]++;newObj.default = obj;cov_518iucvyr.s[30]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_518iucvyr.f[1]++;cov_518iucvyr.s[31]++;return (cov_518iucvyr.b[5][0]++, obj) && (cov_518iucvyr.b[5][1]++, obj.__esModule) ? (cov_518iucvyr.b[4][0]++, obj) : (cov_518iucvyr.b[4][1]++, { default: obj });
}const debug = (cov_518iucvyr.s[32]++, (0, _debug2.default)("debugger:controller:sagas"));const CONTROL_SAGAS = (cov_518iucvyr.s[33]++, { [actions.ADVANCE]: advance, [actions.STEP_NEXT]: stepNext, [actions.STEP_OVER]: stepOver, [actions.STEP_INTO]: stepInto, [actions.STEP_OUT]: stepOut, [actions.CONTINUE]: continueUntilBreakpoint, [actions.RESET]: reset });const SKIPPED_TYPES = (cov_518iucvyr.s[34]++, new _set2.default(["ContractDefinition", "VariableDeclaration"]));function* saga() {
  cov_518iucvyr.f[2]++;cov_518iucvyr.s[35]++;while (true) {
    cov_518iucvyr.s[36]++;debug("waiting for control action");let action = (cov_518iucvyr.s[37]++, yield (0, _effects.take)((0, _keys2.default)(CONTROL_SAGAS)));cov_518iucvyr.s[38]++;debug("got control action");let saga = (cov_518iucvyr.s[39]++, CONTROL_SAGAS[action.type]);cov_518iucvyr.s[40]++;yield (0, _effects.put)(actions.beginStep(action.type));cov_518iucvyr.s[41]++;yield (0, _effects.race)({ exec: (0, _effects.call)(saga, action), interrupt: (0, _effects.take)(actions.INTERRUPT) });
  }
}cov_518iucvyr.s[42]++;exports.default = (0, _helpers.prefixName)("controller", saga);function* advance() {
  cov_518iucvyr.f[3]++;cov_518iucvyr.s[43]++;yield* trace.advance();
}function* stepNext() {
  cov_518iucvyr.f[4]++;const startingRange = (cov_518iucvyr.s[44]++, yield (0, _effects.select)(_selectors2.default.current.location.sourceRange));var upcoming, finished;cov_518iucvyr.s[45]++;do {
    cov_518iucvyr.s[46]++;yield* advance();cov_518iucvyr.s[47]++;try {
      cov_518iucvyr.s[48]++;upcoming = yield (0, _effects.select)(_selectors2.default.current.location);
    } catch (e) {
      cov_518iucvyr.s[49]++;upcoming = null;
    }cov_518iucvyr.s[50]++;finished = yield (0, _effects.select)(_selectors2.default.finished);
  } while ((cov_518iucvyr.b[6][0]++, !finished) && ((cov_518iucvyr.b[6][1]++, !upcoming) || (cov_518iucvyr.b[6][2]++, !upcoming.node) || (cov_518iucvyr.b[6][3]++, SKIPPED_TYPES.has(upcoming.node.nodeType)) || (cov_518iucvyr.b[6][4]++, upcoming.sourceRange.start == startingRange.start) && (cov_518iucvyr.b[6][5]++, upcoming.sourceRange.length == startingRange.length)));
}function* stepInto() {
  cov_518iucvyr.f[5]++;cov_518iucvyr.s[51]++;if (yield (0, _effects.select)(_selectors2.default.current.willJump)) {
    cov_518iucvyr.b[7][0]++;cov_518iucvyr.s[52]++;yield* stepNext();cov_518iucvyr.s[53]++;return;
  } else {
    cov_518iucvyr.b[7][1]++;
  }cov_518iucvyr.s[54]++;if (yield (0, _effects.select)(_selectors2.default.current.location.isMultiline)) {
    cov_518iucvyr.b[8][0]++;cov_518iucvyr.s[55]++;yield* stepOver();cov_518iucvyr.s[56]++;return;
  } else {
    cov_518iucvyr.b[8][1]++;
  }const startingDepth = (cov_518iucvyr.s[57]++, yield (0, _effects.select)(_selectors2.default.current.functionDepth));const startingRange = (cov_518iucvyr.s[58]++, yield (0, _effects.select)(_selectors2.default.current.location.sourceRange));var currentDepth;var currentRange;cov_518iucvyr.s[59]++;do {
    cov_518iucvyr.s[60]++;yield* stepNext();cov_518iucvyr.s[61]++;currentDepth = yield (0, _effects.select)(_selectors2.default.current.functionDepth);cov_518iucvyr.s[62]++;currentRange = yield (0, _effects.select)(_selectors2.default.current.location.sourceRange);
  } while ((cov_518iucvyr.b[9][0]++, currentDepth <= startingDepth) && (cov_518iucvyr.b[9][1]++, currentRange.start >= startingRange.start) && (cov_518iucvyr.b[9][2]++, currentRange.start + currentRange.length <= startingRange.start + startingRange.length));
}function* stepOut() {
  cov_518iucvyr.f[6]++;cov_518iucvyr.s[63]++;if (yield (0, _effects.select)(_selectors2.default.current.location.isMultiline)) {
    cov_518iucvyr.b[10][0]++;cov_518iucvyr.s[64]++;yield* stepOver();cov_518iucvyr.s[65]++;return;
  } else {
    cov_518iucvyr.b[10][1]++;
  }const startingDepth = (cov_518iucvyr.s[66]++, yield (0, _effects.select)(_selectors2.default.current.functionDepth));var currentDepth;cov_518iucvyr.s[67]++;do {
    cov_518iucvyr.s[68]++;yield* stepNext();cov_518iucvyr.s[69]++;currentDepth = yield (0, _effects.select)(_selectors2.default.current.functionDepth);
  } while (currentDepth >= startingDepth);
}function* stepOver() {
  cov_518iucvyr.f[7]++;const startingDepth = (cov_518iucvyr.s[70]++, yield (0, _effects.select)(_selectors2.default.current.functionDepth));const startingRange = (cov_518iucvyr.s[71]++, yield (0, _effects.select)(_selectors2.default.current.location.sourceRange));var currentDepth;var currentRange;cov_518iucvyr.s[72]++;do {
    cov_518iucvyr.s[73]++;yield* stepNext();cov_518iucvyr.s[74]++;currentDepth = yield (0, _effects.select)(_selectors2.default.current.functionDepth);cov_518iucvyr.s[75]++;currentRange = yield (0, _effects.select)(_selectors2.default.current.location.sourceRange);
  } while ((cov_518iucvyr.b[11][0]++, !(currentDepth < startingDepth)) && ((cov_518iucvyr.b[11][1]++, currentDepth > startingDepth) || (cov_518iucvyr.b[11][2]++, currentRange.lines.start.line == startingRange.lines.start.line)));
}function* continueUntilBreakpoint() {
  cov_518iucvyr.f[8]++;var currentLocation, currentNode, currentLine, currentSourceId;var finished;var previousLine, previousSourceId;let breakpoints = (cov_518iucvyr.s[76]++, yield (0, _effects.select)(_selectors2.default.breakpoints));let breakpointHit = (cov_518iucvyr.s[77]++, false);cov_518iucvyr.s[78]++;currentLocation = yield (0, _effects.select)(_selectors2.default.current.location);cov_518iucvyr.s[79]++;currentNode = currentLocation.node.id;cov_518iucvyr.s[80]++;currentLine = currentLocation.sourceRange.lines.start.line;cov_518iucvyr.s[81]++;currentSourceId = currentLocation.source.id;cov_518iucvyr.s[82]++;do {
    cov_518iucvyr.s[83]++;yield* stepNext();cov_518iucvyr.s[84]++;previousLine = currentLine;cov_518iucvyr.s[85]++;previousSourceId = currentSourceId;cov_518iucvyr.s[86]++;currentLocation = yield (0, _effects.select)(_selectors2.default.current.location);cov_518iucvyr.s[87]++;finished = yield (0, _effects.select)(_selectors2.default.finished);cov_518iucvyr.s[88]++;debug("finished %o", finished);cov_518iucvyr.s[89]++;currentNode = currentLocation.node.id;cov_518iucvyr.s[90]++;currentLine = currentLocation.sourceRange.lines.start.line;cov_518iucvyr.s[91]++;currentSourceId = currentLocation.source.id;cov_518iucvyr.s[92]++;breakpointHit = breakpoints.filter(({ sourceId, line, node }) => {
      cov_518iucvyr.f[9]++;cov_518iucvyr.s[93]++;if (node !== undefined) {
        cov_518iucvyr.b[13][0]++;cov_518iucvyr.s[94]++;debug("node %d currentNode %d", node, currentNode);cov_518iucvyr.s[95]++;return (cov_518iucvyr.b[14][0]++, sourceId === currentSourceId) && (cov_518iucvyr.b[14][1]++, node === currentNode);
      } else {
        cov_518iucvyr.b[13][1]++;
      }cov_518iucvyr.s[96]++;return (cov_518iucvyr.b[15][0]++, sourceId === currentSourceId) && (cov_518iucvyr.b[15][1]++, line === currentLine) && ((cov_518iucvyr.b[15][2]++, currentSourceId !== previousSourceId) || (cov_518iucvyr.b[15][3]++, currentLine !== previousLine));
    }).length > 0;
  } while ((cov_518iucvyr.b[12][0]++, !breakpointHit) && (cov_518iucvyr.b[12][1]++, !finished));
}function* reset() {
  cov_518iucvyr.f[10]++;cov_518iucvyr.s[97]++;yield* data.reset();cov_518iucvyr.s[98]++;yield* evm.reset();cov_518iucvyr.s[99]++;yield* solidity.reset();cov_518iucvyr.s[100]++;yield* trace.reset();
}

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_gsac0ldus = function () {
  var path = "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/web3/sagas/index.js",
      hash = "2e79c8ddf0d32f430ce98945df1577b7291ec805",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/web3/sagas/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 6, column: 0 }, end: { line: 6, column: 48 } }, "2": { start: { line: 7, column: 0 }, end: { line: 7, column: 40 } }, "3": { start: { line: 8, column: 0 }, end: { line: 8, column: 20 } }, "4": { start: { line: 10, column: 13 }, end: { line: 10, column: 29 } }, "5": { start: { line: 12, column: 14 }, end: { line: 12, column: 44 } }, "6": { start: { line: 14, column: 15 }, end: { line: 14, column: 44 } }, "7": { start: { line: 16, column: 15 }, end: { line: 16, column: 37 } }, "8": { start: { line: 18, column: 15 }, end: { line: 18, column: 36 } }, "9": { start: { line: 20, column: 14 }, end: { line: 20, column: 47 } }, "10": { start: { line: 22, column: 16 }, end: { line: 22, column: 46 } }, "11": { start: { line: 24, column: 14 }, end: { line: 24, column: 48 } }, "12": { start: { line: 26, column: 15 }, end: { line: 26, column: 36 } }, "13": { start: { line: 28, column: 16 }, end: { line: 28, column: 48 } }, "14": { start: { line: 30, column: 40 }, end: { line: 30, column: 267 } }, "15": { start: { line: 30, column: 69 }, end: { line: 30, column: 80 } }, "16": { start: { line: 30, column: 103 }, end: { line: 30, column: 105 } }, "17": { start: { line: 30, column: 107 }, end: { line: 30, column: 228 } }, "18": { start: { line: 30, column: 126 }, end: { line: 30, column: 226 } }, "19": { start: { line: 30, column: 149 }, end: { line: 30, column: 224 } }, "20": { start: { line: 30, column: 201 }, end: { line: 30, column: 224 } }, "21": { start: { line: 30, column: 229 }, end: { line: 30, column: 250 } }, "22": { start: { line: 30, column: 251 }, end: { line: 30, column: 265 } }, "23": { start: { line: 32, column: 39 }, end: { line: 32, column: 93 } }, "24": { start: { line: 34, column: 14 }, end: { line: 34, column: 57 } }, "25": { start: { line: 37, column: 2 }, end: { line: 37, column: 34 } }, "26": { start: { line: 39, column: 2 }, end: { line: 45, column: 3 } }, "27": { start: { line: 40, column: 4 }, end: { line: 40, column: 75 } }, "28": { start: { line: 42, column: 4 }, end: { line: 42, column: 27 } }, "29": { start: { line: 43, column: 4 }, end: { line: 43, column: 46 } }, "30": { start: { line: 44, column: 4 }, end: { line: 44, column: 11 } }, "31": { start: { line: 47, column: 2 }, end: { line: 47, column: 21 } }, "32": { start: { line: 48, column: 2 }, end: { line: 48, column: 55 } }, "33": { start: { line: 50, column: 11 }, end: { line: 50, column: 79 } }, "34": { start: { line: 51, column: 16 }, end: { line: 51, column: 80 } }, "35": { start: { line: 53, column: 2 }, end: { line: 53, column: 55 } }, "36": { start: { line: 54, column: 2 }, end: { line: 54, column: 56 } }, "37": { start: { line: 56, column: 2 }, end: { line: 59, column: 3 } }, "38": { start: { line: 57, column: 4 }, end: { line: 57, column: 69 } }, "39": { start: { line: 58, column: 4 }, end: { line: 58, column: 11 } }, "40": { start: { line: 61, column: 2 }, end: { line: 64, column: 3 } }, "41": { start: { line: 62, column: 4 }, end: { line: 62, column: 71 } }, "42": { start: { line: 63, column: 4 }, end: { line: 63, column: 11 } }, "43": { start: { line: 66, column: 2 }, end: { line: 66, column: 193 } }, "44": { start: { line: 70, column: 2 }, end: { line: 70, column: 43 } }, "45": { start: { line: 71, column: 15 }, end: { line: 71, column: 85 } }, "46": { start: { line: 73, column: 2 }, end: { line: 73, column: 43 } }, "47": { start: { line: 74, column: 2 }, end: { line: 74, column: 66 } }, "48": { start: { line: 78, column: 2 }, end: { line: 78, column: 50 } }, "49": { start: { line: 79, column: 2 }, end: { line: 79, column: 51 } }, "50": { start: { line: 81, column: 15 }, end: { line: 81, column: 114 } }, "51": { start: { line: 81, column: 54 }, end: { line: 81, column: 113 } }, "52": { start: { line: 82, column: 2 }, end: { line: 82, column: 29 } }, "53": { start: { line: 85, column: 2 }, end: { line: 90, column: 3 } }, "54": { start: { line: 86, column: 4 }, end: { line: 86, column: 25 } }, "55": { start: { line: 87, column: 4 }, end: { line: 87, column: 28 } }, "56": { start: { line: 89, column: 4 }, end: { line: 89, column: 35 } }, "57": { start: { line: 92, column: 28 }, end: { line: 92, column: 74 } }, "58": { start: { line: 93, column: 2 }, end: { line: 93, column: 25 } }, "59": { start: { line: 95, column: 2 }, end: { line: 95, column: 36 } }, "60": { start: { line: 99, column: 14 }, end: { line: 99, column: 107 } }, "61": { start: { line: 99, column: 63 }, end: { line: 99, column: 105 } }, "62": { start: { line: 101, column: 2 }, end: { line: 101, column: 31 } }, "63": { start: { line: 102, column: 2 }, end: { line: 102, column: 101 } }, "64": { start: { line: 102, column: 51 }, end: { line: 102, column: 98 } }, "65": { start: { line: 104, column: 17 }, end: { line: 104, column: 19 } }, "66": { start: { line: 105, column: 2 }, end: { line: 105, column: 82 } }, "67": { start: { line: 105, column: 55 }, end: { line: 105, column: 79 } }, "68": { start: { line: 107, column: 2 }, end: { line: 107, column: 33 } }, "69": { start: { line: 109, column: 2 }, end: { line: 109, column: 18 } }, "70": { start: { line: 113, column: 19 }, end: { line: 113, column: 121 } }, "71": { start: { line: 113, column: 54 }, end: { line: 113, column: 120 } }, "72": { start: { line: 114, column: 2 }, end: { line: 114, column: 38 } }, "73": { start: { line: 116, column: 2 }, end: { line: 116, column: 16 } }, "74": { start: { line: 121, column: 21 }, end: { line: 121, column: 64 } }, "75": { start: { line: 122, column: 16 }, end: { line: 122, column: 47 } }, "76": { start: { line: 124, column: 2 }, end: { line: 124, column: 80 } }, "77": { start: { line: 125, column: 2 }, end: { line: 125, column: 76 } }, "78": { start: { line: 128, column: 0 }, end: { line: 128, column: 57 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 30, column: 9 }, end: { line: 30, column: 32 } }, loc: { start: { line: 30, column: 38 }, end: { line: 30, column: 269 } }, line: 30 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 32, column: 9 }, end: { line: 32, column: 31 } }, loc: { start: { line: 32, column: 37 }, end: { line: 32, column: 95 } }, line: 32 }, "2": { name: "fetchTransactionInfo", decl: { start: { line: 36, column: 10 }, end: { line: 36, column: 30 } }, loc: { start: { line: 36, column: 52 }, end: { line: 67, column: 1 } }, line: 36 }, "3": { name: "fetchBinary", decl: { start: { line: 69, column: 10 }, end: { line: 69, column: 21 } }, loc: { start: { line: 69, column: 44 }, end: { line: 75, column: 1 } }, line: 69 }, "4": { name: "inspectTransaction", decl: { start: { line: 77, column: 10 }, end: { line: 77, column: 28 } }, loc: { start: { line: 77, column: 47 }, end: { line: 96, column: 1 } }, line: 77 }, "5": { name: "(anonymous_5)", decl: { start: { line: 81, column: 40 }, end: { line: 81, column: 41 } }, loc: { start: { line: 81, column: 54 }, end: { line: 81, column: 113 } }, line: 81 }, "6": { name: "obtainBinaries", decl: { start: { line: 98, column: 10 }, end: { line: 98, column: 24 } }, loc: { start: { line: 98, column: 36 }, end: { line: 110, column: 1 } }, line: 98 }, "7": { name: "(anonymous_7)", decl: { start: { line: 99, column: 52 }, end: { line: 99, column: 53 } }, loc: { start: { line: 99, column: 63 }, end: { line: 99, column: 105 } }, line: 99 }, "8": { name: "(anonymous_8)", decl: { start: { line: 102, column: 40 }, end: { line: 102, column: 41 } }, loc: { start: { line: 102, column: 51 }, end: { line: 102, column: 98 } }, line: 102 }, "9": { name: "(anonymous_9)", decl: { start: { line: 105, column: 47 }, end: { line: 105, column: 48 } }, loc: { start: { line: 105, column: 55 }, end: { line: 105, column: 79 } }, line: 105 }, "10": { name: "receiveBinary", decl: { start: { line: 112, column: 10 }, end: { line: 112, column: 23 } }, loc: { start: { line: 112, column: 33 }, end: { line: 117, column: 1 } }, line: 112 }, "11": { name: "(anonymous_11)", decl: { start: { line: 113, column: 44 }, end: { line: 113, column: 45 } }, loc: { start: { line: 113, column: 54 }, end: { line: 113, column: 120 } }, line: 113 }, "12": { name: "saga", decl: { start: { line: 119, column: 10 }, end: { line: 119, column: 14 } }, loc: { start: { line: 119, column: 17 }, end: { line: 126, column: 1 } }, line: 119 } }, branchMap: { "0": { loc: { start: { line: 30, column: 40 }, end: { line: 30, column: 267 } }, type: "if", locations: [{ start: { line: 30, column: 40 }, end: { line: 30, column: 267 } }, { start: { line: 30, column: 40 }, end: { line: 30, column: 267 } }], line: 30 }, "1": { loc: { start: { line: 30, column: 44 }, end: { line: 30, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 30, column: 44 }, end: { line: 30, column: 47 } }, { start: { line: 30, column: 51 }, end: { line: 30, column: 65 } }], line: 30 }, "2": { loc: { start: { line: 30, column: 107 }, end: { line: 30, column: 228 } }, type: "if", locations: [{ start: { line: 30, column: 107 }, end: { line: 30, column: 228 } }, { start: { line: 30, column: 107 }, end: { line: 30, column: 228 } }], line: 30 }, "3": { loc: { start: { line: 30, column: 149 }, end: { line: 30, column: 224 } }, type: "if", locations: [{ start: { line: 30, column: 149 }, end: { line: 30, column: 224 } }, { start: { line: 30, column: 149 }, end: { line: 30, column: 224 } }], line: 30 }, "4": { loc: { start: { line: 32, column: 46 }, end: { line: 32, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 32, column: 70 }, end: { line: 32, column: 73 } }, { start: { line: 32, column: 76 }, end: { line: 32, column: 92 } }], line: 32 }, "5": { loc: { start: { line: 32, column: 46 }, end: { line: 32, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 32, column: 46 }, end: { line: 32, column: 49 } }, { start: { line: 32, column: 53 }, end: { line: 32, column: 67 } }], line: 32 }, "6": { loc: { start: { line: 56, column: 2 }, end: { line: 59, column: 3 } }, type: "if", locations: [{ start: { line: 56, column: 2 }, end: { line: 59, column: 3 } }, { start: { line: 56, column: 2 }, end: { line: 59, column: 3 } }], line: 56 }, "7": { loc: { start: { line: 56, column: 6 }, end: { line: 56, column: 29 } }, type: "binary-expr", locations: [{ start: { line: 56, column: 6 }, end: { line: 56, column: 11 } }, { start: { line: 56, column: 15 }, end: { line: 56, column: 29 } }], line: 56 }, "8": { loc: { start: { line: 61, column: 2 }, end: { line: 64, column: 3 } }, type: "if", locations: [{ start: { line: 61, column: 2 }, end: { line: 64, column: 3 } }, { start: { line: 61, column: 2 }, end: { line: 64, column: 3 } }], line: 61 }, "9": { loc: { start: { line: 81, column: 54 }, end: { line: 81, column: 113 } }, type: "binary-expr", locations: [{ start: { line: 81, column: 54 }, end: { line: 81, column: 83 } }, { start: { line: 81, column: 87 }, end: { line: 81, column: 113 } }], line: 81 }, "10": { loc: { start: { line: 85, column: 2 }, end: { line: 90, column: 3 } }, type: "if", locations: [{ start: { line: 85, column: 2 }, end: { line: 90, column: 3 } }, { start: { line: 85, column: 2 }, end: { line: 90, column: 3 } }], line: 85 }, "11": { loc: { start: { line: 113, column: 54 }, end: { line: 113, column: 120 } }, type: "binary-expr", locations: [{ start: { line: 113, column: 54 }, end: { line: 113, column: 91 } }, { start: { line: 113, column: 95 }, end: { line: 113, column: 120 } }], line: 113 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0, "57": 0, "58": 0, "59": 0, "60": 0, "61": 0, "62": 0, "63": 0, "64": 0, "65": 0, "66": 0, "67": 0, "68": 0, "69": 0, "70": 0, "71": 0, "72": 0, "73": 0, "74": 0, "75": 0, "76": 0, "77": 0, "78": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0, 0], "7": [0, 0], "8": [0, 0], "9": [0, 0], "10": [0, 0], "11": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/web3/sagas/index.js"], names: ["inspectTransaction", "obtainBinaries", "saga", "actions", "session", "debug", "fetchTransactionInfo", "adapter", "txHash", "trace", "getTrace", "e", "error", "receiveTrace", "tx", "getTransaction", "receipt", "getReceipt", "saveTransaction", "saveReceipt", "to", "receiveCall", "address", "contractAddress", "binary", "input", "Error", "fetchBinary", "getDeployedCode", "receiveBinary", "provider", "init", "inspect", "action", "type", "RECEIVE_TRACE", "ERROR_WEB3", "RECEIVE_CALL", "addresses", "tasks", "map", "binaries", "task", "RECEIVE_BINARY", "INIT_WEB3", "Web3Adapter", "INSPECT", "FETCH_BINARY"], mappings: ";;;;;QAwDiBA,kB,GAAAA,kB;QAuBAC,c,GAAAA,c;QA8BAC,I,GAAAA,I;;AA7GjB;;;;AAGA;;AACA;;AAEA;;IAAYC,O;;AACZ;;IAAYC,O;;AAEZ;;;;;;;;AARA,MAAMC,QAAQ,qBAAY,qBAAZ,CAAd;;AAUA,UAAUC,oBAAV,CAA+BC,OAA/B,EAAwC,EAACC,MAAD,EAAxC,EAAkD;AAChDH,QAAM,wBAAN;AACA,MAAII,KAAJ;AACA,MAAI;AACFA,YAAQ,MAAM,oBAAMF,OAAN,EAAeA,QAAQG,QAAvB,EAAiC,CAACF,MAAD,CAAjC,CAAd;AACD,GAFD,CAEE,OAAMG,CAAN,EAAS;AACTN,UAAM,eAAN;AACA,UAAM,kBAAIF,QAAQS,KAAR,CAAcD,CAAd,CAAJ,CAAN;AACA;AACD;;AAEDN,QAAM,WAAN;AACA,QAAM,kBAAIF,QAAQU,YAAR,CAAqBJ,KAArB,CAAJ,CAAN;;AAEA,MAAIK,KAAK,MAAM,oBAAMP,OAAN,EAAeA,QAAQQ,cAAvB,EAAuC,CAACP,MAAD,CAAvC,CAAf;AACA,MAAIQ,UAAU,MAAM,oBAAMT,OAAN,EAAeA,QAAQU,UAAvB,EAAmC,CAACT,MAAD,CAAnC,CAApB;;AAEA,QAAM,kBAAIJ,QAAQc,eAAR,CAAwBJ,EAAxB,CAAJ,CAAN;AACA,QAAM,kBAAIV,QAAQe,WAAR,CAAoBH,OAApB,CAAJ,CAAN;;AAEA,MAAIF,GAAGM,EAAH,IAASN,GAAGM,EAAH,IAAS,KAAtB,EAA6B;AAC3B,UAAM,kBAAIjB,QAAQkB,WAAR,CAAoB,EAACC,SAASR,GAAGM,EAAb,EAApB,CAAJ,CAAN;AACA;AACD;;AAED,MAAIJ,QAAQO,eAAZ,EAA6B;AAC3B,UAAM,kBAAIpB,QAAQkB,WAAR,CAAoB,EAACG,QAAQV,GAAGW,KAAZ,EAApB,CAAJ,CAAN;AACA;AACD;;AAED,QAAM,IAAIC,KAAJ,CACJ,0DACA,kEADA,GAEA,8CAHI,CAAN;AAKD;;AAED,UAAUC,WAAV,CAAsBpB,OAAtB,EAA+B,EAACe,OAAD,EAA/B,EAA0C;AACxCjB,QAAM,wBAAN,EAAgCiB,OAAhC;AACA,MAAIE,SAAS,MAAM,oBAAMjB,OAAN,EAAeA,QAAQqB,eAAvB,EAAwC,CAACN,OAAD,CAAxC,CAAnB;;AAEAjB,QAAM,wBAAN,EAAgCiB,OAAhC;AACA,QAAM,kBAAInB,QAAQ0B,aAAR,CAAsBP,OAAtB,EAA+BE,MAA/B,CAAJ,CAAN;AACD;;AAEM,UAAUxB,kBAAV,CAA6BQ,MAA7B,EAAqCsB,QAArC,EAA+C;AACpD,QAAM,kBAAI3B,QAAQ4B,IAAR,CAAaD,QAAb,CAAJ,CAAN;AACA,QAAM,kBAAI3B,QAAQ6B,OAAR,CAAgBxB,MAAhB,CAAJ,CAAN;;AAEA,MAAIyB,SAAS,MAAM,mBAAM,CAAC,EAACC,IAAD,EAAD,KACvBA,QAAQ/B,QAAQgC,aAAhB,IAAiCD,QAAQ/B,QAAQiC,UADhC,CAAnB;AAGA/B,QAAM,WAAN,EAAmB4B,MAAnB;;AAEA,MAAIxB,KAAJ;AACA,MAAIwB,OAAOC,IAAP,IAAe/B,QAAQgC,aAA3B,EAA0C;AACxC1B,YAAQwB,OAAOxB,KAAf;AACAJ,UAAM,gBAAN;AACD,GAHD,MAGO;AACL,WAAO,EAAEO,OAAOqB,OAAOrB,KAAhB,EAAP;AACD;;AAED,MAAI,EAACU,OAAD,EAAUE,MAAV,KAAoB,MAAM,mBAAKrB,QAAQkC,YAAb,CAA9B;AACAhC,QAAM,eAAN;;AAEA,SAAO,EAAEI,KAAF,EAASa,OAAT,EAAkBE,MAAlB,EAAP;AACD;;AAEM,UAAUvB,cAAV,CAAyBqC,SAAzB,EAAoC;AACzC,MAAIC,QAAQ,MAAM,kBAChBD,UAAUE,GAAV,CAAgBlB,OAAD,IAAa,mBAAKO,aAAL,EAAoBP,OAApB,CAA5B,CADgB,CAAlB;;AAIAjB,QAAM,qBAAN;AACA,QAAM,kBACJiC,UAAUE,GAAV,CAAgBlB,OAAD,IAAa,kBAAInB,QAAQwB,WAAR,CAAoBL,OAApB,CAAJ,CAA5B,CADI,CAAN;;AAIA,MAAImB,WAAW,EAAf;AACAA,aAAW,MAAM,kBACfF,MAAMC,GAAN,CAAUE,QAAQ,mBAAKA,IAAL,CAAlB,CADe,CAAjB;;AAIArC,QAAM,aAAN,EAAqBoC,QAArB;;AAEA,SAAOA,QAAP;AACD;;AAED,UAAUZ,aAAV,CAAwBP,OAAxB,EAAiC;AAC/B,MAAI,EAACE,MAAD,KAAW,MAAM,mBAAMS,MAAD,IACxBA,OAAOC,IAAP,IAAe/B,QAAQwC,cAAvB,IACAV,OAAOX,OAAP,IAAkBA,OAFC,CAArB;AAIAjB,QAAM,mBAAN,EAA2BiB,OAA3B;;AAEA,SAAOE,MAAP;AACD;;AAEM,UAAUtB,IAAV,GAAiB;AACtB;AACA,MAAI,EAAC4B,QAAD,KAAa,MAAM,mBAAK3B,QAAQyC,SAAb,CAAvB;AACA,MAAIrC,UAAU,IAAIsC,iBAAJ,CAAgBf,QAAhB,CAAd;;AAEA,QAAM,wBAAU3B,QAAQ2C,OAAlB,EAA2BxC,oBAA3B,EAAiDC,OAAjD,CAAN;AACA,QAAM,wBAAUJ,QAAQ4C,YAAlB,EAAgCpB,WAAhC,EAA6CpB,OAA7C,CAAN;AACD;;kBAEc,yBAAW,MAAX,EAAmBL,IAAnB,C", file: "index.js", sourceRoot: "/Users/tyler/projects/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:web3:sagas\");\n\nimport { all, takeEvery, apply, fork, join, take, put, select } from 'redux-saga/effects';\nimport { prefixName } from \"lib/helpers\";\n\nimport * as actions from \"../actions\";\nimport * as session from \"lib/session/actions\";\n\nimport Web3Adapter from \"../adapter\";\n\nfunction* fetchTransactionInfo(adapter, {txHash}) {\n  debug(\"inspecting transaction\");\n  var trace;\n  try {\n    trace = yield apply(adapter, adapter.getTrace, [txHash]);\n  } catch(e) {\n    debug(\"putting error\");\n    yield put(actions.error(e));\n    return;\n  }\n\n  debug(\"got trace\");\n  yield put(actions.receiveTrace(trace));\n\n  let tx = yield apply(adapter, adapter.getTransaction, [txHash]);\n  let receipt = yield apply(adapter, adapter.getReceipt, [txHash]);\n\n  yield put(session.saveTransaction(tx));\n  yield put(session.saveReceipt(receipt));\n\n  if (tx.to && tx.to != \"0x0\") {\n    yield put(actions.receiveCall({address: tx.to}));\n    return;\n  }\n\n  if (receipt.contractAddress) {\n    yield put(actions.receiveCall({binary: tx.input}));\n    return;\n  }\n\n  throw new Error(\n    \"Could not find contract associated with transaction. \" +\n    \"Please make sure you're debugging a transaction that executes a \" +\n    \"contract function or creates a new contract.\"\n  );\n}\n\nfunction* fetchBinary(adapter, {address}) {\n  debug(\"fetching binary for %s\", address);\n  let binary = yield apply(adapter, adapter.getDeployedCode, [address]);\n\n  debug(\"received binary for %s\", address);\n  yield put(actions.receiveBinary(address, binary));\n}\n\nexport function *inspectTransaction(txHash, provider) {\n  yield put(actions.init(provider));\n  yield put(actions.inspect(txHash));\n\n  let action = yield take( ({type}) =>\n    type == actions.RECEIVE_TRACE || type == actions.ERROR_WEB3\n  );\n  debug(\"action %o\", action);\n\n  var trace;\n  if (action.type == actions.RECEIVE_TRACE) {\n    trace = action.trace;\n    debug(\"received trace\");\n  } else {\n    return { error: action.error };\n  }\n\n  let {address, binary} = yield take(actions.RECEIVE_CALL);\n  debug(\"received call\");\n\n  return { trace, address, binary };\n}\n\nexport function *obtainBinaries(addresses) {\n  let tasks = yield all(\n    addresses.map( (address) => fork(receiveBinary, address) )\n  );\n\n  debug(\"requesting binaries\");\n  yield all(\n    addresses.map( (address) => put(actions.fetchBinary(address)) )\n  );\n\n  let binaries = [];\n  binaries = yield all(\n    tasks.map(task => join(task))\n  );\n\n  debug(\"binaries %o\", binaries);\n\n  return binaries;\n}\n\nfunction *receiveBinary(address) {\n  let {binary} = yield take((action) => (\n    action.type == actions.RECEIVE_BINARY &&\n    action.address == address\n  ));\n  debug(\"got binary for %s\", address);\n\n  return binary;\n}\n\nexport function* saga() {\n  // wait for web3 init signal\n  let {provider} = yield take(actions.INIT_WEB3);\n  let adapter = new Web3Adapter(provider);\n\n  yield takeEvery(actions.INSPECT, fetchTransactionInfo, adapter);\n  yield takeEvery(actions.FETCH_BINARY, fetchBinary, adapter);\n}\n\nexport default prefixName(\"web3\", saga);\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_gsac0ldus.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });cov_gsac0ldus.s[1]++;exports.inspectTransaction = inspectTransaction;cov_gsac0ldus.s[2]++;exports.obtainBinaries = obtainBinaries;cov_gsac0ldus.s[3]++;exports.saga = saga;var _debug = (cov_gsac0ldus.s[4]++, __webpack_require__(0));var _debug2 = (cov_gsac0ldus.s[5]++, _interopRequireDefault(_debug));var _effects = (cov_gsac0ldus.s[6]++, __webpack_require__(15));var _helpers = (cov_gsac0ldus.s[7]++, __webpack_require__(2));var _actions = (cov_gsac0ldus.s[8]++, __webpack_require__(72));var actions = (cov_gsac0ldus.s[9]++, _interopRequireWildcard(_actions));var _actions2 = (cov_gsac0ldus.s[10]++, __webpack_require__(21));var session = (cov_gsac0ldus.s[11]++, _interopRequireWildcard(_actions2));var _adapter = (cov_gsac0ldus.s[12]++, __webpack_require__(73));var _adapter2 = (cov_gsac0ldus.s[13]++, _interopRequireDefault(_adapter));function _interopRequireWildcard(obj) {
  cov_gsac0ldus.f[0]++;cov_gsac0ldus.s[14]++;if ((cov_gsac0ldus.b[1][0]++, obj) && (cov_gsac0ldus.b[1][1]++, obj.__esModule)) {
    cov_gsac0ldus.b[0][0]++;cov_gsac0ldus.s[15]++;return obj;
  } else {
    cov_gsac0ldus.b[0][1]++;var newObj = (cov_gsac0ldus.s[16]++, {});cov_gsac0ldus.s[17]++;if (obj != null) {
      cov_gsac0ldus.b[2][0]++;cov_gsac0ldus.s[18]++;for (var key in obj) {
        cov_gsac0ldus.s[19]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_gsac0ldus.b[3][0]++;cov_gsac0ldus.s[20]++;newObj[key] = obj[key];
        } else {
          cov_gsac0ldus.b[3][1]++;
        }
      }
    } else {
      cov_gsac0ldus.b[2][1]++;
    }cov_gsac0ldus.s[21]++;newObj.default = obj;cov_gsac0ldus.s[22]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_gsac0ldus.f[1]++;cov_gsac0ldus.s[23]++;return (cov_gsac0ldus.b[5][0]++, obj) && (cov_gsac0ldus.b[5][1]++, obj.__esModule) ? (cov_gsac0ldus.b[4][0]++, obj) : (cov_gsac0ldus.b[4][1]++, { default: obj });
}const debug = (cov_gsac0ldus.s[24]++, (0, _debug2.default)("debugger:web3:sagas"));function* fetchTransactionInfo(adapter, { txHash }) {
  cov_gsac0ldus.f[2]++;cov_gsac0ldus.s[25]++;debug("inspecting transaction");var trace;cov_gsac0ldus.s[26]++;try {
    cov_gsac0ldus.s[27]++;trace = yield (0, _effects.apply)(adapter, adapter.getTrace, [txHash]);
  } catch (e) {
    cov_gsac0ldus.s[28]++;debug("putting error");cov_gsac0ldus.s[29]++;yield (0, _effects.put)(actions.error(e));cov_gsac0ldus.s[30]++;return;
  }cov_gsac0ldus.s[31]++;debug("got trace");cov_gsac0ldus.s[32]++;yield (0, _effects.put)(actions.receiveTrace(trace));let tx = (cov_gsac0ldus.s[33]++, yield (0, _effects.apply)(adapter, adapter.getTransaction, [txHash]));let receipt = (cov_gsac0ldus.s[34]++, yield (0, _effects.apply)(adapter, adapter.getReceipt, [txHash]));cov_gsac0ldus.s[35]++;yield (0, _effects.put)(session.saveTransaction(tx));cov_gsac0ldus.s[36]++;yield (0, _effects.put)(session.saveReceipt(receipt));cov_gsac0ldus.s[37]++;if ((cov_gsac0ldus.b[7][0]++, tx.to) && (cov_gsac0ldus.b[7][1]++, tx.to != "0x0")) {
    cov_gsac0ldus.b[6][0]++;cov_gsac0ldus.s[38]++;yield (0, _effects.put)(actions.receiveCall({ address: tx.to }));cov_gsac0ldus.s[39]++;return;
  } else {
    cov_gsac0ldus.b[6][1]++;
  }cov_gsac0ldus.s[40]++;if (receipt.contractAddress) {
    cov_gsac0ldus.b[8][0]++;cov_gsac0ldus.s[41]++;yield (0, _effects.put)(actions.receiveCall({ binary: tx.input }));cov_gsac0ldus.s[42]++;return;
  } else {
    cov_gsac0ldus.b[8][1]++;
  }cov_gsac0ldus.s[43]++;throw new Error("Could not find contract associated with transaction. " + "Please make sure you're debugging a transaction that executes a " + "contract function or creates a new contract.");
}function* fetchBinary(adapter, { address }) {
  cov_gsac0ldus.f[3]++;cov_gsac0ldus.s[44]++;debug("fetching binary for %s", address);let binary = (cov_gsac0ldus.s[45]++, yield (0, _effects.apply)(adapter, adapter.getDeployedCode, [address]));cov_gsac0ldus.s[46]++;debug("received binary for %s", address);cov_gsac0ldus.s[47]++;yield (0, _effects.put)(actions.receiveBinary(address, binary));
}function* inspectTransaction(txHash, provider) {
  cov_gsac0ldus.f[4]++;cov_gsac0ldus.s[48]++;yield (0, _effects.put)(actions.init(provider));cov_gsac0ldus.s[49]++;yield (0, _effects.put)(actions.inspect(txHash));let action = (cov_gsac0ldus.s[50]++, yield (0, _effects.take)(({ type }) => {
    cov_gsac0ldus.f[5]++;cov_gsac0ldus.s[51]++;return (cov_gsac0ldus.b[9][0]++, type == actions.RECEIVE_TRACE) || (cov_gsac0ldus.b[9][1]++, type == actions.ERROR_WEB3);
  }));cov_gsac0ldus.s[52]++;debug("action %o", action);var trace;cov_gsac0ldus.s[53]++;if (action.type == actions.RECEIVE_TRACE) {
    cov_gsac0ldus.b[10][0]++;cov_gsac0ldus.s[54]++;trace = action.trace;cov_gsac0ldus.s[55]++;debug("received trace");
  } else {
    cov_gsac0ldus.b[10][1]++;cov_gsac0ldus.s[56]++;return { error: action.error };
  }let { address, binary } = (cov_gsac0ldus.s[57]++, yield (0, _effects.take)(actions.RECEIVE_CALL));cov_gsac0ldus.s[58]++;debug("received call");cov_gsac0ldus.s[59]++;return { trace, address, binary };
}function* obtainBinaries(addresses) {
  cov_gsac0ldus.f[6]++;let tasks = (cov_gsac0ldus.s[60]++, yield (0, _effects.all)(addresses.map(address => {
    cov_gsac0ldus.f[7]++;cov_gsac0ldus.s[61]++;return (0, _effects.fork)(receiveBinary, address);
  })));cov_gsac0ldus.s[62]++;debug("requesting binaries");cov_gsac0ldus.s[63]++;yield (0, _effects.all)(addresses.map(address => {
    cov_gsac0ldus.f[8]++;cov_gsac0ldus.s[64]++;return (0, _effects.put)(actions.fetchBinary(address));
  }));let binaries = (cov_gsac0ldus.s[65]++, []);cov_gsac0ldus.s[66]++;binaries = yield (0, _effects.all)(tasks.map(task => {
    cov_gsac0ldus.f[9]++;cov_gsac0ldus.s[67]++;return (0, _effects.join)(task);
  }));cov_gsac0ldus.s[68]++;debug("binaries %o", binaries);cov_gsac0ldus.s[69]++;return binaries;
}function* receiveBinary(address) {
  cov_gsac0ldus.f[10]++;let { binary } = (cov_gsac0ldus.s[70]++, yield (0, _effects.take)(action => {
    cov_gsac0ldus.f[11]++;cov_gsac0ldus.s[71]++;return (cov_gsac0ldus.b[11][0]++, action.type == actions.RECEIVE_BINARY) && (cov_gsac0ldus.b[11][1]++, action.address == address);
  }));cov_gsac0ldus.s[72]++;debug("got binary for %s", address);cov_gsac0ldus.s[73]++;return binary;
}function* saga() {
  cov_gsac0ldus.f[12]++;let { provider } = (cov_gsac0ldus.s[74]++, yield (0, _effects.take)(actions.INIT_WEB3));let adapter = (cov_gsac0ldus.s[75]++, new _adapter2.default(provider));cov_gsac0ldus.s[76]++;yield (0, _effects.takeEvery)(actions.INSPECT, fetchTransactionInfo, adapter);cov_gsac0ldus.s[77]++;yield (0, _effects.takeEvery)(actions.FETCH_BINARY, fetchBinary, adapter);
}cov_gsac0ldus.s[78]++;exports.default = (0, _helpers.prefixName)("web3", saga);

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_s08euth54 = function () {
  var path = "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/web3/actions/index.js",
      hash = "acad192edb3a179948f7618b27532f368e72a525",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/web3/actions/index.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 6, column: 0 }, end: { line: 6, column: 20 } }, "2": { start: { line: 7, column: 0 }, end: { line: 7, column: 26 } }, "3": { start: { line: 8, column: 0 }, end: { line: 8, column: 34 } }, "4": { start: { line: 9, column: 0 }, end: { line: 9, column: 38 } }, "5": { start: { line: 10, column: 0 }, end: { line: 10, column: 36 } }, "6": { start: { line: 11, column: 0 }, end: { line: 11, column: 34 } }, "7": { start: { line: 12, column: 0 }, end: { line: 12, column: 22 } }, "8": { start: { line: 13, column: 18 }, end: { line: 13, column: 49 } }, "9": { start: { line: 15, column: 2 }, end: { line: 18, column: 4 } }, "10": { start: { line: 21, column: 16 }, end: { line: 21, column: 55 } }, "11": { start: { line: 23, column: 2 }, end: { line: 26, column: 4 } }, "12": { start: { line: 29, column: 21 }, end: { line: 29, column: 58 } }, "13": { start: { line: 31, column: 2 }, end: { line: 34, column: 4 } }, "14": { start: { line: 37, column: 23 }, end: { line: 37, column: 64 } }, "15": { start: { line: 39, column: 2 }, end: { line: 43, column: 4 } }, "16": { start: { line: 46, column: 22 }, end: { line: 46, column: 61 } }, "17": { start: { line: 48, column: 2 }, end: { line: 51, column: 4 } }, "18": { start: { line: 54, column: 21 }, end: { line: 54, column: 58 } }, "19": { start: { line: 56, column: 2 }, end: { line: 60, column: 4 } }, "20": { start: { line: 63, column: 19 }, end: { line: 63, column: 52 } }, "21": { start: { line: 65, column: 2 }, end: { line: 68, column: 4 } } }, fnMap: { "0": { name: "init", decl: { start: { line: 14, column: 9 }, end: { line: 14, column: 13 } }, loc: { start: { line: 14, column: 24 }, end: { line: 19, column: 1 } }, line: 14 }, "1": { name: "inspect", decl: { start: { line: 22, column: 9 }, end: { line: 22, column: 16 } }, loc: { start: { line: 22, column: 25 }, end: { line: 27, column: 1 } }, line: 22 }, "2": { name: "fetchBinary", decl: { start: { line: 30, column: 9 }, end: { line: 30, column: 20 } }, loc: { start: { line: 30, column: 30 }, end: { line: 35, column: 1 } }, line: 30 }, "3": { name: "receiveBinary", decl: { start: { line: 38, column: 9 }, end: { line: 38, column: 22 } }, loc: { start: { line: 38, column: 40 }, end: { line: 44, column: 1 } }, line: 38 }, "4": { name: "receiveTrace", decl: { start: { line: 47, column: 9 }, end: { line: 47, column: 21 } }, loc: { start: { line: 47, column: 29 }, end: { line: 52, column: 1 } }, line: 47 }, "5": { name: "receiveCall", decl: { start: { line: 55, column: 9 }, end: { line: 55, column: 20 } }, loc: { start: { line: 55, column: 42 }, end: { line: 61, column: 1 } }, line: 55 }, "6": { name: "error", decl: { start: { line: 64, column: 9 }, end: { line: 64, column: 14 } }, loc: { start: { line: 64, column: 22 }, end: { line: 69, column: 1 } }, line: 64 } }, branchMap: {}, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0 }, b: {}, inputSourceMap: { version: 3, sources: ["lib/web3/actions/index.js"], names: ["init", "inspect", "fetchBinary", "receiveBinary", "receiveTrace", "receiveCall", "error", "INIT_WEB3", "provider", "type", "INSPECT", "txHash", "FETCH_BINARY", "address", "RECEIVE_BINARY", "binary", "RECEIVE_TRACE", "trace", "RECEIVE_CALL", "ERROR_WEB3"], mappings: ";;;;;QACgBA,I,GAAAA,I;QAQAC,O,GAAAA,O;QAQAC,W,GAAAA,W;QAQAC,a,GAAAA,a;QASAC,Y,GAAAA,Y;QAQAC,W,GAAAA,W;QASAC,K,GAAAA,K;AAnDT,MAAMC,gCAAY,WAAlB;AACA,SAASP,IAAT,CAAcQ,QAAd,EAAwB;AAC7B,SAAO;AACLC,UAAMF,SADD;AAELC;AAFK,GAAP;AAID;;AAEM,MAAME,4BAAU,qBAAhB;AACA,SAAST,OAAT,CAAiBU,MAAjB,EAAyB;AAC9B,SAAO;AACLF,UAAMC,OADD;AAELC;AAFK,GAAP;AAID;;AAEM,MAAMC,sCAAe,cAArB;AACA,SAASV,WAAT,CAAqBW,OAArB,EAA8B;AACnC,SAAO;AACLJ,UAAMG,YADD;AAELC;AAFK,GAAP;AAID;;AAEM,MAAMC,0CAAiB,gBAAvB;AACA,SAASX,aAAT,CAAuBU,OAAvB,EAAgCE,MAAhC,EAAwC;AAC7C,SAAO;AACLN,UAAMK,cADD;AAELD,WAFK;AAGTE;AAHS,GAAP;AAKD;;AAEM,MAAMC,wCAAgB,eAAtB;AACA,SAASZ,YAAT,CAAsBa,KAAtB,EAA6B;AAClC,SAAO;AACLR,UAAMO,aADD;AAELC;AAFK,GAAP;AAID;;AAEM,MAAMC,sCAAe,cAArB;AACA,SAASb,WAAT,CAAqB,EAACQ,OAAD,EAAUE,MAAV,EAArB,EAAwC;AAC7C,SAAO;AACLN,UAAMS,YADD;AAELL,WAFK;AAGTE;AAHS,GAAP;AAKD;;AAEM,MAAMI,kCAAa,YAAnB;AACA,SAASb,KAAT,CAAeA,KAAf,EAAsB;AAC3B,SAAO;AACLG,UAAMU,UADD;AAELb;AAFK,GAAP;AAID", file: "index.js", sourceRoot: "/Users/tyler/projects/truffle/packages/truffle-debugger", sourcesContent: ["export const INIT_WEB3 = \"INIT_WEB3\";\nexport function init(provider) {\n  return {\n    type: INIT_WEB3,\n    provider\n  };\n}\n\nexport const INSPECT = \"INSPECT_TRANSACTION\";\nexport function inspect(txHash) {\n  return {\n    type: INSPECT,\n    txHash\n  };\n}\n\nexport const FETCH_BINARY = \"FETCH_BINARY\";\nexport function fetchBinary(address) {\n  return {\n    type: FETCH_BINARY,\n    address\n  };\n}\n\nexport const RECEIVE_BINARY = \"RECEIVE_BINARY\";\nexport function receiveBinary(address, binary) {\n  return {\n    type: RECEIVE_BINARY,\n    address,\nbinary\n  };\n}\n\nexport const RECEIVE_TRACE = \"RECEIVE_TRACE\";\nexport function receiveTrace(trace) {\n  return {\n    type: RECEIVE_TRACE,\n    trace\n  };\n}\n\nexport const RECEIVE_CALL = \"RECEIVE_CALL\";\nexport function receiveCall({address, binary}) {\n  return {\n    type: RECEIVE_CALL,\n    address,\nbinary\n  };\n}\n\nexport const ERROR_WEB3 = \"ERROR_WEB3\";\nexport function error(error) {\n  return {\n    type: ERROR_WEB3,\n    error\n  };\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_s08euth54.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });cov_s08euth54.s[1]++;exports.init = init;cov_s08euth54.s[2]++;exports.inspect = inspect;cov_s08euth54.s[3]++;exports.fetchBinary = fetchBinary;cov_s08euth54.s[4]++;exports.receiveBinary = receiveBinary;cov_s08euth54.s[5]++;exports.receiveTrace = receiveTrace;cov_s08euth54.s[6]++;exports.receiveCall = receiveCall;cov_s08euth54.s[7]++;exports.error = error;const INIT_WEB3 = (cov_s08euth54.s[8]++, exports.INIT_WEB3 = "INIT_WEB3");function init(provider) {
  cov_s08euth54.f[0]++;cov_s08euth54.s[9]++;return { type: INIT_WEB3, provider };
}const INSPECT = (cov_s08euth54.s[10]++, exports.INSPECT = "INSPECT_TRANSACTION");function inspect(txHash) {
  cov_s08euth54.f[1]++;cov_s08euth54.s[11]++;return { type: INSPECT, txHash };
}const FETCH_BINARY = (cov_s08euth54.s[12]++, exports.FETCH_BINARY = "FETCH_BINARY");function fetchBinary(address) {
  cov_s08euth54.f[2]++;cov_s08euth54.s[13]++;return { type: FETCH_BINARY, address };
}const RECEIVE_BINARY = (cov_s08euth54.s[14]++, exports.RECEIVE_BINARY = "RECEIVE_BINARY");function receiveBinary(address, binary) {
  cov_s08euth54.f[3]++;cov_s08euth54.s[15]++;return { type: RECEIVE_BINARY, address, binary };
}const RECEIVE_TRACE = (cov_s08euth54.s[16]++, exports.RECEIVE_TRACE = "RECEIVE_TRACE");function receiveTrace(trace) {
  cov_s08euth54.f[4]++;cov_s08euth54.s[17]++;return { type: RECEIVE_TRACE, trace };
}const RECEIVE_CALL = (cov_s08euth54.s[18]++, exports.RECEIVE_CALL = "RECEIVE_CALL");function receiveCall({ address, binary }) {
  cov_s08euth54.f[5]++;cov_s08euth54.s[19]++;return { type: RECEIVE_CALL, address, binary };
}const ERROR_WEB3 = (cov_s08euth54.s[20]++, exports.ERROR_WEB3 = "ERROR_WEB3");function error(error) {
  cov_s08euth54.f[6]++;cov_s08euth54.s[21]++;return { type: ERROR_WEB3, error };
}

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_4nylxe1ac = function () {
  var path = "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/web3/adapter.js",
      hash = "6e886cda1c526331545abd3eafc56bb0a1e1ed55",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/web3/adapter.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 15 }, end: { line: 7, column: 55 } }, "2": { start: { line: 9, column: 16 }, end: { line: 9, column: 48 } }, "3": { start: { line: 11, column: 25 }, end: { line: 11, column: 74 } }, "4": { start: { line: 13, column: 25 }, end: { line: 13, column: 67 } }, "5": { start: { line: 15, column: 13 }, end: { line: 15, column: 29 } }, "6": { start: { line: 17, column: 14 }, end: { line: 17, column: 44 } }, "7": { start: { line: 19, column: 11 }, end: { line: 19, column: 26 } }, "8": { start: { line: 21, column: 12 }, end: { line: 21, column: 40 } }, "9": { start: { line: 23, column: 39 }, end: { line: 23, column: 93 } }, "10": { start: { line: 25, column: 14 }, end: { line: 25, column: 59 } }, "11": { start: { line: 29, column: 4 }, end: { line: 29, column: 44 } }, "12": { start: { line: 33, column: 16 }, end: { line: 33, column: 20 } }, "13": { start: { line: 35, column: 4 }, end: { line: 49, column: 9 } }, "14": { start: { line: 36, column: 6 }, end: { line: 48, column: 9 } }, "15": { start: { line: 37, column: 8 }, end: { line: 47, column: 11 } }, "16": { start: { line: 43, column: 10 }, end: { line: 43, column: 38 } }, "17": { start: { line: 43, column: 19 }, end: { line: 43, column: 38 } }, "18": { start: { line: 44, column: 10 }, end: { line: 44, column: 75 } }, "19": { start: { line: 44, column: 28 }, end: { line: 44, column: 75 } }, "20": { start: { line: 45, column: 10 }, end: { line: 45, column: 38 } }, "21": { start: { line: 46, column: 10 }, end: { line: 46, column: 43 } }, "22": { start: { line: 53, column: 17 }, end: { line: 53, column: 21 } }, "23": { start: { line: 55, column: 4 }, end: { line: 63, column: 9 } }, "24": { start: { line: 56, column: 6 }, end: { line: 62, column: 9 } }, "25": { start: { line: 57, column: 8 }, end: { line: 61, column: 11 } }, "26": { start: { line: 58, column: 10 }, end: { line: 58, column: 38 } }, "27": { start: { line: 58, column: 19 }, end: { line: 58, column: 38 } }, "28": { start: { line: 60, column: 10 }, end: { line: 60, column: 28 } }, "29": { start: { line: 67, column: 17 }, end: { line: 67, column: 21 } }, "30": { start: { line: 69, column: 4 }, end: { line: 77, column: 9 } }, "31": { start: { line: 70, column: 6 }, end: { line: 76, column: 9 } }, "32": { start: { line: 71, column: 8 }, end: { line: 75, column: 11 } }, "33": { start: { line: 72, column: 10 }, end: { line: 72, column: 38 } }, "34": { start: { line: 72, column: 19 }, end: { line: 72, column: 38 } }, "35": { start: { line: 74, column: 10 }, end: { line: 74, column: 33 } }, "36": { start: { line: 86, column: 17 }, end: { line: 86, column: 21 } }, "37": { start: { line: 88, column: 4 }, end: { line: 98, column: 9 } }, "38": { start: { line: 89, column: 6 }, end: { line: 89, column: 53 } }, "39": { start: { line: 90, column: 6 }, end: { line: 97, column: 9 } }, "40": { start: { line: 91, column: 8 }, end: { line: 96, column: 11 } }, "41": { start: { line: 92, column: 10 }, end: { line: 92, column: 43 } }, "42": { start: { line: 92, column: 19 }, end: { line: 92, column: 43 } }, "43": { start: { line: 93, column: 10 }, end: { line: 93, column: 38 } }, "44": { start: { line: 93, column: 19 }, end: { line: 93, column: 38 } }, "45": { start: { line: 94, column: 10 }, end: { line: 94, column: 53 } }, "46": { start: { line: 95, column: 10 }, end: { line: 95, column: 33 } }, "47": { start: { line: 101, column: 0 }, end: { line: 101, column: 30 } } }, fnMap: { "0": { name: "_interopRequireDefault", decl: { start: { line: 23, column: 9 }, end: { line: 23, column: 31 } }, loc: { start: { line: 23, column: 37 }, end: { line: 23, column: 95 } }, line: 23 }, "1": { name: "(anonymous_1)", decl: { start: { line: 28, column: 2 }, end: { line: 28, column: 3 } }, loc: { start: { line: 28, column: 24 }, end: { line: 30, column: 3 } }, line: 28 }, "2": { name: "(anonymous_2)", decl: { start: { line: 32, column: 2 }, end: { line: 32, column: 3 } }, loc: { start: { line: 32, column: 19 }, end: { line: 50, column: 3 } }, line: 32 }, "3": { name: "(anonymous_3)", decl: { start: { line: 35, column: 43 }, end: { line: 35, column: 44 } }, loc: { start: { line: 35, column: 56 }, end: { line: 49, column: 5 } }, line: 35 }, "4": { name: "(anonymous_4)", decl: { start: { line: 36, column: 35 }, end: { line: 36, column: 36 } }, loc: { start: { line: 36, column: 61 }, end: { line: 48, column: 7 } }, line: 36 }, "5": { name: "(anonymous_5)", decl: { start: { line: 42, column: 11 }, end: { line: 42, column: 12 } }, loc: { start: { line: 42, column: 34 }, end: { line: 47, column: 9 } }, line: 42 }, "6": { name: "(anonymous_6)", decl: { start: { line: 52, column: 2 }, end: { line: 52, column: 3 } }, loc: { start: { line: 52, column: 25 }, end: { line: 64, column: 3 } }, line: 52 }, "7": { name: "(anonymous_7)", decl: { start: { line: 55, column: 43 }, end: { line: 55, column: 44 } }, loc: { start: { line: 55, column: 56 }, end: { line: 63, column: 5 } }, line: 55 }, "8": { name: "(anonymous_8)", decl: { start: { line: 56, column: 35 }, end: { line: 56, column: 36 } }, loc: { start: { line: 56, column: 61 }, end: { line: 62, column: 7 } }, line: 56 }, "9": { name: "(anonymous_9)", decl: { start: { line: 57, column: 47 }, end: { line: 57, column: 48 } }, loc: { start: { line: 57, column: 66 }, end: { line: 61, column: 9 } }, line: 57 }, "10": { name: "(anonymous_10)", decl: { start: { line: 66, column: 2 }, end: { line: 66, column: 3 } }, loc: { start: { line: 66, column: 21 }, end: { line: 78, column: 3 } }, line: 66 }, "11": { name: "(anonymous_11)", decl: { start: { line: 69, column: 43 }, end: { line: 69, column: 44 } }, loc: { start: { line: 69, column: 56 }, end: { line: 77, column: 5 } }, line: 69 }, "12": { name: "(anonymous_12)", decl: { start: { line: 70, column: 35 }, end: { line: 70, column: 36 } }, loc: { start: { line: 70, column: 61 }, end: { line: 76, column: 7 } }, line: 70 }, "13": { name: "(anonymous_13)", decl: { start: { line: 71, column: 54 }, end: { line: 71, column: 55 } }, loc: { start: { line: 71, column: 78 }, end: { line: 75, column: 9 } }, line: 71 }, "14": { name: "(anonymous_14)", decl: { start: { line: 85, column: 2 }, end: { line: 85, column: 3 } }, loc: { start: { line: 85, column: 27 }, end: { line: 99, column: 3 } }, line: 85 }, "15": { name: "(anonymous_15)", decl: { start: { line: 88, column: 43 }, end: { line: 88, column: 44 } }, loc: { start: { line: 88, column: 56 }, end: { line: 98, column: 5 } }, line: 88 }, "16": { name: "(anonymous_16)", decl: { start: { line: 90, column: 35 }, end: { line: 90, column: 36 } }, loc: { start: { line: 90, column: 61 }, end: { line: 97, column: 7 } }, line: 90 }, "17": { name: "(anonymous_17)", decl: { start: { line: 91, column: 41 }, end: { line: 91, column: 42 } }, loc: { start: { line: 91, column: 72 }, end: { line: 96, column: 9 } }, line: 91 } }, branchMap: { "0": { loc: { start: { line: 23, column: 46 }, end: { line: 23, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 23, column: 70 }, end: { line: 23, column: 73 } }, { start: { line: 23, column: 76 }, end: { line: 23, column: 92 } }], line: 23 }, "1": { loc: { start: { line: 23, column: 46 }, end: { line: 23, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 23, column: 46 }, end: { line: 23, column: 49 } }, { start: { line: 23, column: 53 }, end: { line: 23, column: 67 } }], line: 23 }, "2": { loc: { start: { line: 43, column: 10 }, end: { line: 43, column: 38 } }, type: "if", locations: [{ start: { line: 43, column: 10 }, end: { line: 43, column: 38 } }, { start: { line: 43, column: 10 }, end: { line: 43, column: 38 } }], line: 43 }, "3": { loc: { start: { line: 44, column: 10 }, end: { line: 44, column: 75 } }, type: "if", locations: [{ start: { line: 44, column: 10 }, end: { line: 44, column: 75 } }, { start: { line: 44, column: 10 }, end: { line: 44, column: 75 } }], line: 44 }, "4": { loc: { start: { line: 58, column: 10 }, end: { line: 58, column: 38 } }, type: "if", locations: [{ start: { line: 58, column: 10 }, end: { line: 58, column: 38 } }, { start: { line: 58, column: 10 }, end: { line: 58, column: 38 } }], line: 58 }, "5": { loc: { start: { line: 72, column: 10 }, end: { line: 72, column: 38 } }, type: "if", locations: [{ start: { line: 72, column: 10 }, end: { line: 72, column: 38 } }, { start: { line: 72, column: 10 }, end: { line: 72, column: 38 } }], line: 72 }, "6": { loc: { start: { line: 92, column: 10 }, end: { line: 92, column: 43 } }, type: "if", locations: [{ start: { line: 92, column: 10 }, end: { line: 92, column: 43 } }, { start: { line: 92, column: 10 }, end: { line: 92, column: 43 } }], line: 92 }, "7": { loc: { start: { line: 93, column: 10 }, end: { line: 93, column: 38 } }, type: "if", locations: [{ start: { line: 93, column: 10 }, end: { line: 93, column: 38 } }, { start: { line: 93, column: 10 }, end: { line: 93, column: 38 } }], line: 93 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0, 0], "7": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/web3/adapter.js"], names: ["debug", "Web3Adapter", "constructor", "provider", "web3", "Web3", "getTrace", "txHash", "accept", "reject", "currentProvider", "send", "jsonrpc", "method", "params", "id", "Date", "getTime", "err", "result", "error", "Error", "message", "structLogs", "getTransaction", "eth", "tx", "getReceipt", "getTransactionReceipt", "receipt", "getDeployedCode", "address", "getCode", "deployedBinary"], mappings: ";;;;;;;;;;;;;;AAAA;;;;AAEA;;;;;;AAEA,MAAMA,QAAQ,qBAAY,uBAAZ,CAAd;;AAEe,MAAMC,WAAN,CAAkB;AAC/BC,cAAYC,QAAZ,EAAsB;AACpB,SAAKC,IAAL,GAAY,IAAIC,aAAJ,CAASF,QAAT,CAAZ;AACD;;AAEKG,UAAN,CAAeC,MAAf,EAAuB;AAAA;;AAAA;AACrB,aAAO,sBAAa,UAACC,MAAD,EAASC,MAAT,EAAoB;AACtC,cAAKL,IAAL,CAAUM,eAAV,CAA0BC,IAA1B,CAA+B;AAC7BC,mBAAS,KADoB;AAE7BC,kBAAQ,wBAFqB;AAG7BC,kBAAQ,CAACP,MAAD,EAAS,EAAT,CAHqB;AAI7BQ,cAAI,IAAIC,IAAJ,GAAWC,OAAX;AAJyB,SAA/B,EAKG,UAACC,GAAD,EAAMC,MAAN,EAAiB;AAClB,cAAID,GAAJ,EAAS,OAAOT,OAAOS,GAAP,CAAP;AACT,cAAIC,OAAOC,KAAX,EAAkB,OAAOX,OAAO,IAAIY,KAAJ,CAAUF,OAAOC,KAAP,CAAaE,OAAvB,CAAP,CAAP;AAClBtB,gBAAM,YAAN,EAAoBmB,MAApB;AACAX,iBAAOW,OAAOA,MAAP,CAAcI,UAArB;AACD,SAVD;AAWD,OAZM,CAAP;AADqB;AActB;;AAEKC,gBAAN,CAAqBjB,MAArB,EAA6B;AAAA;;AAAA;AAC3B,aAAO,sBAAa,UAACC,MAAD,EAASC,MAAT,EAAoB;AACtC,eAAKL,IAAL,CAAUqB,GAAV,CAAcD,cAAd,CAA6BjB,MAA7B,EAAqC,UAACW,GAAD,EAAMQ,EAAN,EAAa;AAChD,cAAIR,GAAJ,EAAS,OAAOT,OAAOS,GAAP,CAAP;;AAET,iBAAOV,OAAOkB,EAAP,CAAP;AACD,SAJD;AAKD,OANM,CAAP;AAD2B;AAQ5B;;AAEKC,YAAN,CAAiBpB,MAAjB,EAAyB;AAAA;;AAAA;AACvB,aAAO,sBAAa,UAACC,MAAD,EAASC,MAAT,EAAoB;AACtC,eAAKL,IAAL,CAAUqB,GAAV,CAAcG,qBAAd,CAAoCrB,MAApC,EAA4C,UAACW,GAAD,EAAMW,OAAN,EAAkB;AAC5D,cAAIX,GAAJ,EAAS,OAAOT,OAAOS,GAAP,CAAP;;AAET,iBAAOV,OAAOqB,OAAP,CAAP;AACD,SAJD;AAKD,OANM,CAAP;AADuB;AAQxB;;AAED;;;;;AAKMC,iBAAN,CAAsBC,OAAtB,EAA+B;AAAA;;AAAA;AAC7B/B,YAAM,8BAAN,EAAsC+B,OAAtC;AACA,aAAO,sBAAY,UAACvB,MAAD,EAASC,MAAT,EAAoB;AACrC,eAAKL,IAAL,CAAUqB,GAAV,CAAcO,OAAd,CAAsBD,OAAtB,EAA+B,UAACb,GAAD,EAAMe,cAAN,EAAyB;AACtD,cAAIf,GAAJ,EAASlB,MAAM,WAAN,EAAmBkB,GAAnB;AACT,cAAIA,GAAJ,EAAS,OAAOT,OAAOS,GAAP,CAAP;AACTlB,gBAAM,0BAAN,EAAkC+B,OAAlC;AACAvB,iBAAOyB,cAAP;AACD,SALD;AAMD,OAPM,CAAP;AAF6B;AAU9B;AAxD8B;kBAAZhC,W", file: "adapter.js", sourceRoot: "/Users/tyler/projects/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\n\nimport Web3 from \"web3\";\n\nconst debug = debugModule(\"debugger:web3:adapter\");\n\nexport default class Web3Adapter {\n  constructor(provider) {\n    this.web3 = new Web3(provider);\n  }\n\n  async getTrace(txHash) {\n    return new Promise( (accept, reject) => {\n      this.web3.currentProvider.send({\n        jsonrpc: \"2.0\",\n        method: \"debug_traceTransaction\",\n        params: [txHash, {}],\n        id: new Date().getTime()\n      }, (err, result) => {\n        if (err) return reject(err);\n        if (result.error) return reject(new Error(result.error.message));\n        debug(\"result: %o\", result);\n        accept(result.result.structLogs);\n      });\n    });\n  };\n\n  async getTransaction(txHash) {\n    return new Promise( (accept, reject) => {\n      this.web3.eth.getTransaction(txHash, (err, tx) => {\n        if (err) return reject(err);\n\n        return accept(tx);\n      });\n    });\n  };\n\n  async getReceipt(txHash) {\n    return new Promise( (accept, reject) => {\n      this.web3.eth.getTransactionReceipt(txHash, (err, receipt) => {\n        if (err) return reject(err);\n\n        return accept(receipt);\n      });\n    });\n  };\n\n  /**\n   * getDeployedCode - get the deployed code for an address from the client\n   * @param  {String} address\n   * @return {String}         deployedBinary\n   */\n  async getDeployedCode(address) {\n    debug(\"getting deployed code for %s\", address);\n    return new Promise((accept, reject) => {\n      this.web3.eth.getCode(address, (err, deployedBinary) => {\n        if (err) debug(\"error: %o\", err);\n        if (err) return reject(err);\n        debug(\"got deployed code for %s\", address);\n        accept(deployedBinary);\n      });\n    });\n  };\n}\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_4nylxe1ac.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _promise = (cov_4nylxe1ac.s[1]++, __webpack_require__(20));var _promise2 = (cov_4nylxe1ac.s[2]++, _interopRequireDefault(_promise));var _asyncToGenerator2 = (cov_4nylxe1ac.s[3]++, __webpack_require__(1));var _asyncToGenerator3 = (cov_4nylxe1ac.s[4]++, _interopRequireDefault(_asyncToGenerator2));var _debug = (cov_4nylxe1ac.s[5]++, __webpack_require__(0));var _debug2 = (cov_4nylxe1ac.s[6]++, _interopRequireDefault(_debug));var _web = (cov_4nylxe1ac.s[7]++, __webpack_require__(30));var _web2 = (cov_4nylxe1ac.s[8]++, _interopRequireDefault(_web));function _interopRequireDefault(obj) {
  cov_4nylxe1ac.f[0]++;cov_4nylxe1ac.s[9]++;return (cov_4nylxe1ac.b[1][0]++, obj) && (cov_4nylxe1ac.b[1][1]++, obj.__esModule) ? (cov_4nylxe1ac.b[0][0]++, obj) : (cov_4nylxe1ac.b[0][1]++, { default: obj });
}const debug = (cov_4nylxe1ac.s[10]++, (0, _debug2.default)("debugger:web3:adapter"));class Web3Adapter {
  constructor(provider) {
    cov_4nylxe1ac.f[1]++;cov_4nylxe1ac.s[11]++;this.web3 = new _web2.default(provider);
  }getTrace(txHash) {
    cov_4nylxe1ac.f[2]++;var _this = (cov_4nylxe1ac.s[12]++, this);cov_4nylxe1ac.s[13]++;return (0, _asyncToGenerator3.default)(function* () {
      cov_4nylxe1ac.f[3]++;cov_4nylxe1ac.s[14]++;return new _promise2.default(function (accept, reject) {
        cov_4nylxe1ac.f[4]++;cov_4nylxe1ac.s[15]++;_this.web3.currentProvider.send({ jsonrpc: "2.0", method: "debug_traceTransaction", params: [txHash, {}], id: new Date().getTime() }, function (err, result) {
          cov_4nylxe1ac.f[5]++;cov_4nylxe1ac.s[16]++;if (err) {
            cov_4nylxe1ac.b[2][0]++;cov_4nylxe1ac.s[17]++;return reject(err);
          } else {
            cov_4nylxe1ac.b[2][1]++;
          }cov_4nylxe1ac.s[18]++;if (result.error) {
            cov_4nylxe1ac.b[3][0]++;cov_4nylxe1ac.s[19]++;return reject(new Error(result.error.message));
          } else {
            cov_4nylxe1ac.b[3][1]++;
          }cov_4nylxe1ac.s[20]++;debug("result: %o", result);cov_4nylxe1ac.s[21]++;accept(result.result.structLogs);
        });
      });
    })();
  }getTransaction(txHash) {
    cov_4nylxe1ac.f[6]++;var _this2 = (cov_4nylxe1ac.s[22]++, this);cov_4nylxe1ac.s[23]++;return (0, _asyncToGenerator3.default)(function* () {
      cov_4nylxe1ac.f[7]++;cov_4nylxe1ac.s[24]++;return new _promise2.default(function (accept, reject) {
        cov_4nylxe1ac.f[8]++;cov_4nylxe1ac.s[25]++;_this2.web3.eth.getTransaction(txHash, function (err, tx) {
          cov_4nylxe1ac.f[9]++;cov_4nylxe1ac.s[26]++;if (err) {
            cov_4nylxe1ac.b[4][0]++;cov_4nylxe1ac.s[27]++;return reject(err);
          } else {
            cov_4nylxe1ac.b[4][1]++;
          }cov_4nylxe1ac.s[28]++;return accept(tx);
        });
      });
    })();
  }getReceipt(txHash) {
    cov_4nylxe1ac.f[10]++;var _this3 = (cov_4nylxe1ac.s[29]++, this);cov_4nylxe1ac.s[30]++;return (0, _asyncToGenerator3.default)(function* () {
      cov_4nylxe1ac.f[11]++;cov_4nylxe1ac.s[31]++;return new _promise2.default(function (accept, reject) {
        cov_4nylxe1ac.f[12]++;cov_4nylxe1ac.s[32]++;_this3.web3.eth.getTransactionReceipt(txHash, function (err, receipt) {
          cov_4nylxe1ac.f[13]++;cov_4nylxe1ac.s[33]++;if (err) {
            cov_4nylxe1ac.b[5][0]++;cov_4nylxe1ac.s[34]++;return reject(err);
          } else {
            cov_4nylxe1ac.b[5][1]++;
          }cov_4nylxe1ac.s[35]++;return accept(receipt);
        });
      });
    })();
  }getDeployedCode(address) {
    cov_4nylxe1ac.f[14]++;var _this4 = (cov_4nylxe1ac.s[36]++, this);cov_4nylxe1ac.s[37]++;return (0, _asyncToGenerator3.default)(function* () {
      cov_4nylxe1ac.f[15]++;cov_4nylxe1ac.s[38]++;debug("getting deployed code for %s", address);cov_4nylxe1ac.s[39]++;return new _promise2.default(function (accept, reject) {
        cov_4nylxe1ac.f[16]++;cov_4nylxe1ac.s[40]++;_this4.web3.eth.getCode(address, function (err, deployedBinary) {
          cov_4nylxe1ac.f[17]++;cov_4nylxe1ac.s[41]++;if (err) {
            cov_4nylxe1ac.b[6][0]++;cov_4nylxe1ac.s[42]++;debug("error: %o", err);
          } else {
            cov_4nylxe1ac.b[6][1]++;
          }cov_4nylxe1ac.s[43]++;if (err) {
            cov_4nylxe1ac.b[7][0]++;cov_4nylxe1ac.s[44]++;return reject(err);
          } else {
            cov_4nylxe1ac.b[7][1]++;
          }cov_4nylxe1ac.s[45]++;debug("got deployed code for %s", address);cov_4nylxe1ac.s[46]++;accept(deployedBinary);
        });
      });
    })();
  }
}cov_4nylxe1ac.s[47]++;exports.default = Web3Adapter;

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_47kxmyctu = function () {
  var path = "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/session/reducers.js",
      hash = "428f6bd2ca4db4720f027ef110e50fcca94ffe39",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/session/reducers.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 6, column: 0 }, end: { line: 6, column: 61 } }, "2": { start: { line: 7, column: 0 }, end: { line: 7, column: 24 } }, "3": { start: { line: 8, column: 0 }, end: { line: 8, column: 34 } }, "4": { start: { line: 9, column: 0 }, end: { line: 9, column: 26 } }, "5": { start: { line: 11, column: 13 }, end: { line: 11, column: 29 } }, "6": { start: { line: 13, column: 16 }, end: { line: 13, column: 44 } }, "7": { start: { line: 15, column: 17 }, end: { line: 15, column: 50 } }, "8": { start: { line: 17, column: 17 }, end: { line: 17, column: 44 } }, "9": { start: { line: 19, column: 17 }, end: { line: 19, column: 51 } }, "10": { start: { line: 21, column: 17 }, end: { line: 21, column: 49 } }, "11": { start: { line: 23, column: 17 }, end: { line: 23, column: 51 } }, "12": { start: { line: 25, column: 17 }, end: { line: 25, column: 46 } }, "13": { start: { line: 27, column: 17 }, end: { line: 27, column: 51 } }, "14": { start: { line: 29, column: 17 }, end: { line: 29, column: 51 } }, "15": { start: { line: 31, column: 18 }, end: { line: 31, column: 52 } }, "16": { start: { line: 33, column: 15 }, end: { line: 33, column: 35 } }, "17": { start: { line: 35, column: 14 }, end: { line: 35, column: 47 } }, "18": { start: { line: 37, column: 40 }, end: { line: 37, column: 267 } }, "19": { start: { line: 37, column: 69 }, end: { line: 37, column: 80 } }, "20": { start: { line: 37, column: 103 }, end: { line: 37, column: 105 } }, "21": { start: { line: 37, column: 107 }, end: { line: 37, column: 228 } }, "22": { start: { line: 37, column: 126 }, end: { line: 37, column: 226 } }, "23": { start: { line: 37, column: 149 }, end: { line: 37, column: 224 } }, "24": { start: { line: 37, column: 201 }, end: { line: 37, column: 224 } }, "25": { start: { line: 37, column: 229 }, end: { line: 37, column: 250 } }, "26": { start: { line: 37, column: 251 }, end: { line: 37, column: 265 } }, "27": { start: { line: 39, column: 39 }, end: { line: 39, column: 93 } }, "28": { start: { line: 41, column: 16 }, end: { line: 41, column: 43 } }, "29": { start: { line: 42, column: 15 }, end: { line: 42, column: 40 } }, "30": { start: { line: 43, column: 14 }, end: { line: 43, column: 37 } }, "31": { start: { line: 46, column: 2 }, end: { line: 55, column: 3 } }, "32": { start: { line: 48, column: 6 }, end: { line: 48, column: 20 } }, "33": { start: { line: 51, column: 6 }, end: { line: 51, column: 37 } }, "34": { start: { line: 54, column: 6 }, end: { line: 54, column: 19 } }, "35": { start: { line: 59, column: 2 }, end: { line: 64, column: 3 } }, "36": { start: { line: 61, column: 6 }, end: { line: 61, column: 32 } }, "37": { start: { line: 63, column: 6 }, end: { line: 63, column: 19 } }, "38": { start: { line: 68, column: 2 }, end: { line: 73, column: 3 } }, "39": { start: { line: 70, column: 6 }, end: { line: 70, column: 28 } }, "40": { start: { line: 72, column: 6 }, end: { line: 72, column: 19 } }, "41": { start: { line: 76, column: 16 }, end: { line: 80, column: 2 } }, "42": { start: { line: 82, column: 20 }, end: { line: 89, column: 2 } }, "43": { start: { line: 91, column: 0 }, end: { line: 91, column: 30 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 37, column: 9 }, end: { line: 37, column: 32 } }, loc: { start: { line: 37, column: 38 }, end: { line: 37, column: 269 } }, line: 37 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 39, column: 9 }, end: { line: 39, column: 31 } }, loc: { start: { line: 39, column: 37 }, end: { line: 39, column: 95 } }, line: 39 }, "2": { name: "status", decl: { start: { line: 45, column: 9 }, end: { line: 45, column: 15 } }, loc: { start: { line: 45, column: 41 }, end: { line: 56, column: 1 } }, line: 45 }, "3": { name: "transaction", decl: { start: { line: 58, column: 9 }, end: { line: 58, column: 20 } }, loc: { start: { line: 58, column: 41 }, end: { line: 65, column: 1 } }, line: 58 }, "4": { name: "receipt", decl: { start: { line: 67, column: 9 }, end: { line: 67, column: 16 } }, loc: { start: { line: 67, column: 37 }, end: { line: 74, column: 1 } }, line: 67 } }, branchMap: { "0": { loc: { start: { line: 37, column: 40 }, end: { line: 37, column: 267 } }, type: "if", locations: [{ start: { line: 37, column: 40 }, end: { line: 37, column: 267 } }, { start: { line: 37, column: 40 }, end: { line: 37, column: 267 } }], line: 37 }, "1": { loc: { start: { line: 37, column: 44 }, end: { line: 37, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 37, column: 44 }, end: { line: 37, column: 47 } }, { start: { line: 37, column: 51 }, end: { line: 37, column: 65 } }], line: 37 }, "2": { loc: { start: { line: 37, column: 107 }, end: { line: 37, column: 228 } }, type: "if", locations: [{ start: { line: 37, column: 107 }, end: { line: 37, column: 228 } }, { start: { line: 37, column: 107 }, end: { line: 37, column: 228 } }], line: 37 }, "3": { loc: { start: { line: 37, column: 149 }, end: { line: 37, column: 224 } }, type: "if", locations: [{ start: { line: 37, column: 149 }, end: { line: 37, column: 224 } }, { start: { line: 37, column: 149 }, end: { line: 37, column: 224 } }], line: 37 }, "4": { loc: { start: { line: 39, column: 46 }, end: { line: 39, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 39, column: 70 }, end: { line: 39, column: 73 } }, { start: { line: 39, column: 76 }, end: { line: 39, column: 92 } }], line: 39 }, "5": { loc: { start: { line: 39, column: 46 }, end: { line: 39, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 39, column: 46 }, end: { line: 39, column: 49 } }, { start: { line: 39, column: 53 }, end: { line: 39, column: 67 } }], line: 39 }, "6": { loc: { start: { line: 45, column: 16 }, end: { line: 45, column: 31 } }, type: "default-arg", locations: [{ start: { line: 45, column: 24 }, end: { line: 45, column: 31 } }], line: 45 }, "7": { loc: { start: { line: 46, column: 2 }, end: { line: 55, column: 3 } }, type: "switch", locations: [{ start: { line: 47, column: 4 }, end: { line: 48, column: 20 } }, { start: { line: 50, column: 4 }, end: { line: 51, column: 37 } }, { start: { line: 53, column: 4 }, end: { line: 54, column: 19 } }], line: 46 }, "8": { loc: { start: { line: 58, column: 21 }, end: { line: 58, column: 31 } }, type: "default-arg", locations: [{ start: { line: 58, column: 29 }, end: { line: 58, column: 31 } }], line: 58 }, "9": { loc: { start: { line: 59, column: 2 }, end: { line: 64, column: 3 } }, type: "switch", locations: [{ start: { line: 60, column: 4 }, end: { line: 61, column: 32 } }, { start: { line: 62, column: 4 }, end: { line: 63, column: 19 } }], line: 59 }, "10": { loc: { start: { line: 67, column: 17 }, end: { line: 67, column: 27 } }, type: "default-arg", locations: [{ start: { line: 67, column: 25 }, end: { line: 67, column: 27 } }], line: 67 }, "11": { loc: { start: { line: 68, column: 2 }, end: { line: 73, column: 3 } }, type: "switch", locations: [{ start: { line: 69, column: 4 }, end: { line: 70, column: 28 } }, { start: { line: 71, column: 4 }, end: { line: 72, column: 19 } }], line: 68 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0], "7": [0, 0, 0], "8": [0], "9": [0, 0], "10": [0], "11": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/session/reducers.js"], names: ["status", "transaction", "receipt", "actions", "WAITING", "ACTIVE", "ERROR", "state", "action", "type", "READY", "error", "SAVE_TRANSACTION", "SAVE_RECEIPT", "session", "reduceState", "data", "evm", "solidity", "trace", "controller"], mappings: ";;;;;;QAcgBA,M,GAAAA,M;QAaAC,W,GAAAA,W;QASAC,O,GAAAA,O;;AApChB;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;IAAYC,O;;;;;;AAEL,MAAMC,4BAAU,SAAhB;AACA,MAAMC,0BAAS,QAAf;AACA,MAAMC,wBAAQ,OAAd;;AAEA,SAASN,MAAT,CAAgBO,QAAQH,OAAxB,EAAiCI,MAAjC,EAAyC;AAC9C,UAAQA,OAAOC,IAAf;AACE,SAAKN,QAAQO,KAAb;AACE,aAAOL,MAAP;;AAEF,SAAKF,QAAQG,KAAb;AACE,aAAO,EAAEK,OAAOH,OAAOG,KAAhB,EAAP;;AAEF;AACE,aAAOJ,KAAP;AARJ;AAUD;;AAEM,SAASN,WAAT,CAAqBM,QAAQ,EAA7B,EAAiCC,MAAjC,EAAyC;AAC9C,UAAOA,OAAOC,IAAd;AACE,SAAKN,QAAQS,gBAAb;AACE,aAAOJ,OAAOP,WAAd;AACF;AACE,aAAOM,KAAP;AAJJ;AAMD;;AAEM,SAASL,OAAT,CAAiBK,QAAQ,EAAzB,EAA6BC,MAA7B,EAAqC;AAC1C,UAAOA,OAAOC,IAAd;AACE,SAAKN,QAAQU,YAAb;AACE,aAAOL,OAAON,OAAd;AACF;AACE,aAAOK,KAAP;AAJJ;AAMD;;AAED,MAAMO,UAAU,4BAAgB;AAC9Bd,QAD8B;AAE9BC,aAF8B;AAG9BC;AAH8B,CAAhB,CAAhB;;AAMA,MAAMa,cAAc,4BAAgB;AAClCD,SADkC;AAElCE,0BAFkC;AAGlCC,yBAHkC;AAIlCC,8BAJkC;AAKlCC,2BALkC;AAMlCC;AANkC,CAAhB,CAApB;;kBASeL,W", file: "reducers.js", sourceRoot: "/Users/tyler/projects/truffle/packages/truffle-debugger", sourcesContent: ["import { combineReducers } from \"redux\";\n\nimport data from \"lib/data/reducers\";\nimport evm from \"lib/evm/reducers\";\nimport solidity from \"lib/solidity/reducers\";\nimport trace from \"lib/trace/reducers\";\nimport controller from \"lib/controller/reducers\";\n\nimport * as actions from \"./actions\";\n\nexport const WAITING = \"WAITING\";\nexport const ACTIVE = \"ACTIVE\";\nexport const ERROR = \"ERROR\";\n\nexport function status(state = WAITING, action) {\n  switch (action.type) {\n    case actions.READY:\n      return ACTIVE;\n\n    case actions.ERROR:\n      return { error: action.error };\n\n    default:\n      return state;\n  }\n}\n\nexport function transaction(state = {}, action) {\n  switch(action.type) {\n    case actions.SAVE_TRANSACTION:\n      return action.transaction;\n    default:\n      return state;\n  }\n}\n\nexport function receipt(state = {}, action) {\n  switch(action.type) {\n    case actions.SAVE_RECEIPT:\n      return action.receipt;\n    default:\n      return state;\n  }\n}\n\nconst session = combineReducers({\n  status,\n  transaction,\n  receipt\n});\n\nconst reduceState = combineReducers({\n  session,\n  data,\n  evm,\n  solidity,\n  trace,\n  controller\n});\n\nexport default reduceState;\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_47kxmyctu.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });cov_47kxmyctu.s[1]++;exports.ERROR = exports.ACTIVE = exports.WAITING = undefined;cov_47kxmyctu.s[2]++;exports.status = status;cov_47kxmyctu.s[3]++;exports.transaction = transaction;cov_47kxmyctu.s[4]++;exports.receipt = receipt;var _redux = (cov_47kxmyctu.s[5]++, __webpack_require__(16));var _reducers = (cov_47kxmyctu.s[6]++, __webpack_require__(75));var _reducers2 = (cov_47kxmyctu.s[7]++, _interopRequireDefault(_reducers));var _reducers3 = (cov_47kxmyctu.s[8]++, __webpack_require__(76));var _reducers4 = (cov_47kxmyctu.s[9]++, _interopRequireDefault(_reducers3));var _reducers5 = (cov_47kxmyctu.s[10]++, __webpack_require__(78));var _reducers6 = (cov_47kxmyctu.s[11]++, _interopRequireDefault(_reducers5));var _reducers7 = (cov_47kxmyctu.s[12]++, __webpack_require__(79));var _reducers8 = (cov_47kxmyctu.s[13]++, _interopRequireDefault(_reducers7));var _reducers9 = (cov_47kxmyctu.s[14]++, __webpack_require__(80));var _reducers10 = (cov_47kxmyctu.s[15]++, _interopRequireDefault(_reducers9));var _actions = (cov_47kxmyctu.s[16]++, __webpack_require__(21));var actions = (cov_47kxmyctu.s[17]++, _interopRequireWildcard(_actions));function _interopRequireWildcard(obj) {
  cov_47kxmyctu.f[0]++;cov_47kxmyctu.s[18]++;if ((cov_47kxmyctu.b[1][0]++, obj) && (cov_47kxmyctu.b[1][1]++, obj.__esModule)) {
    cov_47kxmyctu.b[0][0]++;cov_47kxmyctu.s[19]++;return obj;
  } else {
    cov_47kxmyctu.b[0][1]++;var newObj = (cov_47kxmyctu.s[20]++, {});cov_47kxmyctu.s[21]++;if (obj != null) {
      cov_47kxmyctu.b[2][0]++;cov_47kxmyctu.s[22]++;for (var key in obj) {
        cov_47kxmyctu.s[23]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_47kxmyctu.b[3][0]++;cov_47kxmyctu.s[24]++;newObj[key] = obj[key];
        } else {
          cov_47kxmyctu.b[3][1]++;
        }
      }
    } else {
      cov_47kxmyctu.b[2][1]++;
    }cov_47kxmyctu.s[25]++;newObj.default = obj;cov_47kxmyctu.s[26]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_47kxmyctu.f[1]++;cov_47kxmyctu.s[27]++;return (cov_47kxmyctu.b[5][0]++, obj) && (cov_47kxmyctu.b[5][1]++, obj.__esModule) ? (cov_47kxmyctu.b[4][0]++, obj) : (cov_47kxmyctu.b[4][1]++, { default: obj });
}const WAITING = (cov_47kxmyctu.s[28]++, exports.WAITING = "WAITING");const ACTIVE = (cov_47kxmyctu.s[29]++, exports.ACTIVE = "ACTIVE");const ERROR = (cov_47kxmyctu.s[30]++, exports.ERROR = "ERROR");function status(state = (cov_47kxmyctu.b[6][0]++, WAITING), action) {
  cov_47kxmyctu.f[2]++;cov_47kxmyctu.s[31]++;switch (action.type) {case actions.READY:
      cov_47kxmyctu.b[7][0]++;cov_47kxmyctu.s[32]++;return ACTIVE;case actions.ERROR:
      cov_47kxmyctu.b[7][1]++;cov_47kxmyctu.s[33]++;return { error: action.error };default:
      cov_47kxmyctu.b[7][2]++;cov_47kxmyctu.s[34]++;return state;}
}function transaction(state = (cov_47kxmyctu.b[8][0]++, {}), action) {
  cov_47kxmyctu.f[3]++;cov_47kxmyctu.s[35]++;switch (action.type) {case actions.SAVE_TRANSACTION:
      cov_47kxmyctu.b[9][0]++;cov_47kxmyctu.s[36]++;return action.transaction;default:
      cov_47kxmyctu.b[9][1]++;cov_47kxmyctu.s[37]++;return state;}
}function receipt(state = (cov_47kxmyctu.b[10][0]++, {}), action) {
  cov_47kxmyctu.f[4]++;cov_47kxmyctu.s[38]++;switch (action.type) {case actions.SAVE_RECEIPT:
      cov_47kxmyctu.b[11][0]++;cov_47kxmyctu.s[39]++;return action.receipt;default:
      cov_47kxmyctu.b[11][1]++;cov_47kxmyctu.s[40]++;return state;}
}const session = (cov_47kxmyctu.s[41]++, (0, _redux.combineReducers)({ status, transaction, receipt }));const reduceState = (cov_47kxmyctu.s[42]++, (0, _redux.combineReducers)({ session, data: _reducers2.default, evm: _reducers4.default, solidity: _reducers6.default, trace: _reducers8.default, controller: _reducers10.default }));cov_47kxmyctu.s[43]++;exports.default = reduceState;

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_1ib6m598u7 = function () {
  var path = "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/data/reducers.js",
      hash = "17dcbdf551298fd76592c6f6d330510f95b73831",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/data/reducers.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 15 }, end: { line: 7, column: 62 } }, "2": { start: { line: 9, column: 16 }, end: { line: 9, column: 48 } }, "3": { start: { line: 11, column: 14 }, end: { line: 11, column: 60 } }, "4": { start: { line: 13, column: 15 }, end: { line: 13, column: 46 } }, "5": { start: { line: 15, column: 11 }, end: { line: 15, column: 47 } }, "6": { start: { line: 17, column: 12 }, end: { line: 17, column: 40 } }, "7": { start: { line: 19, column: 14 }, end: { line: 19, column: 60 } }, "8": { start: { line: 21, column: 15 }, end: { line: 21, column: 46 } }, "9": { start: { line: 23, column: 16 }, end: { line: 23, column: 56 } }, "10": { start: { line: 25, column: 16 }, end: { line: 25, column: 49 } }, "11": { start: { line: 27, column: 13 }, end: { line: 27, column: 29 } }, "12": { start: { line: 29, column: 14 }, end: { line: 29, column: 44 } }, "13": { start: { line: 31, column: 13 }, end: { line: 31, column: 29 } }, "14": { start: { line: 33, column: 15 }, end: { line: 33, column: 37 } }, "15": { start: { line: 35, column: 15 }, end: { line: 35, column: 35 } }, "16": { start: { line: 37, column: 14 }, end: { line: 37, column: 47 } }, "17": { start: { line: 39, column: 40 }, end: { line: 39, column: 267 } }, "18": { start: { line: 39, column: 69 }, end: { line: 39, column: 80 } }, "19": { start: { line: 39, column: 103 }, end: { line: 39, column: 105 } }, "20": { start: { line: 39, column: 107 }, end: { line: 39, column: 228 } }, "21": { start: { line: 39, column: 126 }, end: { line: 39, column: 226 } }, "22": { start: { line: 39, column: 149 }, end: { line: 39, column: 224 } }, "23": { start: { line: 39, column: 201 }, end: { line: 39, column: 224 } }, "24": { start: { line: 39, column: 229 }, end: { line: 39, column: 250 } }, "25": { start: { line: 39, column: 251 }, end: { line: 39, column: 265 } }, "26": { start: { line: 41, column: 39 }, end: { line: 41, column: 93 } }, "27": { start: { line: 43, column: 14 }, end: { line: 43, column: 60 } }, "28": { start: { line: 45, column: 23 }, end: { line: 47, column: 1 } }, "29": { start: { line: 53, column: 2 }, end: { line: 86, column: 3 } }, "30": { start: { line: 55, column: 6 }, end: { line: 55, column: 42 } }, "31": { start: { line: 57, column: 6 }, end: { line: 68, column: 8 } }, "32": { start: { line: 71, column: 6 }, end: { line: 71, column: 50 } }, "33": { start: { line: 72, column: 6 }, end: { line: 72, column: 40 } }, "34": { start: { line: 74, column: 6 }, end: { line: 82, column: 8 } }, "35": { start: { line: 85, column: 6 }, end: { line: 85, column: 19 } }, "36": { start: { line: 97, column: 2 }, end: { line: 102, column: 3 } }, "37": { start: { line: 99, column: 6 }, end: { line: 99, column: 40 } }, "38": { start: { line: 101, column: 6 }, end: { line: 101, column: 19 } }, "39": { start: { line: 106, column: 2 }, end: { line: 110, column: 3 } }, "40": { start: { line: 107, column: 4 }, end: { line: 107, column: 26 } }, "41": { start: { line: 109, column: 4 }, end: { line: 109, column: 17 } }, "42": { start: { line: 113, column: 20 }, end: { line: 115, column: 2 } }, "43": { start: { line: 117, column: 13 }, end: { line: 121, column: 2 } }, "44": { start: { line: 123, column: 28 }, end: { line: 126, column: 1 } }, "45": { start: { line: 129, column: 2 }, end: { line: 168, column: 3 } }, "46": { start: { line: 131, column: 6 }, end: { line: 131, column: 57 } }, "47": { start: { line: 132, column: 6 }, end: { line: 143, column: 16 } }, "48": { start: { line: 133, column: 28 }, end: { line: 133, column: 38 } }, "49": { start: { line: 134, column: 8 }, end: { line: 142, column: 10 } }, "50": { start: { line: 146, column: 38 }, end: { line: 146, column: 44 } }, "51": { start: { line: 147, column: 6 }, end: { line: 161, column: 8 } }, "52": { start: { line: 149, column: 30 }, end: { line: 149, column: 77 } }, "53": { start: { line: 150, column: 10 }, end: { line: 152, column: 12 } }, "54": { start: { line: 155, column: 10 }, end: { line: 159, column: 12 } }, "55": { start: { line: 156, column: 52 }, end: { line: 156, column: 106 } }, "56": { start: { line: 164, column: 6 }, end: { line: 164, column: 33 } }, "57": { start: { line: 167, column: 6 }, end: { line: 167, column: 19 } }, "58": { start: { line: 172, column: 2 }, end: { line: 188, column: 3 } }, "59": { start: { line: 175, column: 19 }, end: { line: 178, column: 5 } }, "60": { start: { line: 179, column: 16 }, end: { line: 179, column: 55 } }, "61": { start: { line: 180, column: 4 }, end: { line: 185, column: 6 } }, "62": { start: { line: 187, column: 4 }, end: { line: 187, column: 22 } }, "63": { start: { line: 191, column: 29 }, end: { line: 194, column: 1 } }, "64": { start: { line: 197, column: 2 }, end: { line: 224, column: 3 } }, "65": { start: { line: 199, column: 6 }, end: { line: 199, column: 87 } }, "66": { start: { line: 200, column: 6 }, end: { line: 203, column: 8 } }, "67": { start: { line: 205, column: 24 }, end: { line: 205, column: 30 } }, "68": { start: { line: 206, column: 6 }, end: { line: 206, column: 51 } }, "69": { start: { line: 208, column: 6 }, end: { line: 217, column: 8 } }, "70": { start: { line: 220, column: 6 }, end: { line: 220, column: 34 } }, "71": { start: { line: 223, column: 6 }, end: { line: 223, column: 19 } }, "72": { start: { line: 227, column: 13 }, end: { line: 230, column: 2 } }, "73": { start: { line: 232, column: 16 }, end: { line: 235, column: 2 } }, "74": { start: { line: 237, column: 0 }, end: { line: 237, column: 26 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 39, column: 9 }, end: { line: 39, column: 32 } }, loc: { start: { line: 39, column: 38 }, end: { line: 39, column: 269 } }, line: 39 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 41, column: 9 }, end: { line: 41, column: 31 } }, loc: { start: { line: 41, column: 37 }, end: { line: 41, column: 95 } }, line: 41 }, "2": { name: "scopes", decl: { start: { line: 49, column: 9 }, end: { line: 49, column: 15 } }, loc: { start: { line: 49, column: 48 }, end: { line: 87, column: 1 } }, line: 49 }, "3": { name: "userDefinedTypes", decl: { start: { line: 96, column: 9 }, end: { line: 96, column: 25 } }, loc: { start: { line: 96, column: 46 }, end: { line: 103, column: 1 } }, line: 96 }, "4": { name: "storage", decl: { start: { line: 105, column: 9 }, end: { line: 105, column: 16 } }, loc: { start: { line: 105, column: 37 }, end: { line: 111, column: 1 } }, line: 105 }, "5": { name: "assignments", decl: { start: { line: 128, column: 9 }, end: { line: 128, column: 20 } }, loc: { start: { line: 128, column: 58 }, end: { line: 169, column: 1 } }, line: 128 }, "6": { name: "(anonymous_6)", decl: { start: { line: 132, column: 67 }, end: { line: 132, column: 68 } }, loc: { start: { line: 132, column: 88 }, end: { line: 143, column: 7 } }, line: 132 }, "7": { name: "(anonymous_7)", decl: { start: { line: 148, column: 82 }, end: { line: 148, column: 83 } }, loc: { start: { line: 148, column: 102 }, end: { line: 153, column: 9 } }, line: 148 }, "8": { name: "(anonymous_8)", decl: { start: { line: 154, column: 88 }, end: { line: 154, column: 89 } }, loc: { start: { line: 154, column: 101 }, end: { line: 160, column: 9 } }, line: 154 }, "9": { name: "(anonymous_9)", decl: { start: { line: 156, column: 46 }, end: { line: 156, column: 47 } }, loc: { start: { line: 156, column: 52 }, end: { line: 156, column: 106 } }, line: 156 }, "10": { name: "learnAddress", decl: { start: { line: 171, column: 9 }, end: { line: 171, column: 21 } }, loc: { start: { line: 171, column: 57 }, end: { line: 189, column: 1 } }, line: 171 }, "11": { name: "mappingKeys", decl: { start: { line: 196, column: 9 }, end: { line: 196, column: 20 } }, loc: { start: { line: 196, column: 59 }, end: { line: 225, column: 1 } }, line: 196 } }, branchMap: { "0": { loc: { start: { line: 39, column: 40 }, end: { line: 39, column: 267 } }, type: "if", locations: [{ start: { line: 39, column: 40 }, end: { line: 39, column: 267 } }, { start: { line: 39, column: 40 }, end: { line: 39, column: 267 } }], line: 39 }, "1": { loc: { start: { line: 39, column: 44 }, end: { line: 39, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 39, column: 44 }, end: { line: 39, column: 47 } }, { start: { line: 39, column: 51 }, end: { line: 39, column: 65 } }], line: 39 }, "2": { loc: { start: { line: 39, column: 107 }, end: { line: 39, column: 228 } }, type: "if", locations: [{ start: { line: 39, column: 107 }, end: { line: 39, column: 228 } }, { start: { line: 39, column: 107 }, end: { line: 39, column: 228 } }], line: 39 }, "3": { loc: { start: { line: 39, column: 149 }, end: { line: 39, column: 224 } }, type: "if", locations: [{ start: { line: 39, column: 149 }, end: { line: 39, column: 224 } }, { start: { line: 39, column: 149 }, end: { line: 39, column: 224 } }], line: 39 }, "4": { loc: { start: { line: 41, column: 46 }, end: { line: 41, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 41, column: 70 }, end: { line: 41, column: 73 } }, { start: { line: 41, column: 76 }, end: { line: 41, column: 92 } }], line: 41 }, "5": { loc: { start: { line: 41, column: 46 }, end: { line: 41, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 41, column: 46 }, end: { line: 41, column: 49 } }, { start: { line: 41, column: 53 }, end: { line: 41, column: 67 } }], line: 41 }, "6": { loc: { start: { line: 49, column: 16 }, end: { line: 49, column: 38 } }, type: "default-arg", locations: [{ start: { line: 49, column: 24 }, end: { line: 49, column: 38 } }], line: 49 }, "7": { loc: { start: { line: 53, column: 2 }, end: { line: 86, column: 3 } }, type: "switch", locations: [{ start: { line: 54, column: 4 }, end: { line: 68, column: 8 } }, { start: { line: 70, column: 4 }, end: { line: 82, column: 8 } }, { start: { line: 84, column: 4 }, end: { line: 85, column: 19 } }], line: 53 }, "8": { loc: { start: { line: 55, column: 14 }, end: { line: 55, column: 41 } }, type: "binary-expr", locations: [{ start: { line: 55, column: 14 }, end: { line: 55, column: 35 } }, { start: { line: 55, column: 39 }, end: { line: 55, column: 41 } }], line: 55 }, "9": { loc: { start: { line: 71, column: 14 }, end: { line: 71, column: 49 } }, type: "binary-expr", locations: [{ start: { line: 71, column: 14 }, end: { line: 71, column: 43 } }, { start: { line: 71, column: 47 }, end: { line: 71, column: 49 } }], line: 71 }, "10": { loc: { start: { line: 72, column: 18 }, end: { line: 72, column: 39 } }, type: "binary-expr", locations: [{ start: { line: 72, column: 18 }, end: { line: 72, column: 33 } }, { start: { line: 72, column: 37 }, end: { line: 72, column: 39 } }], line: 72 }, "11": { loc: { start: { line: 96, column: 26 }, end: { line: 96, column: 36 } }, type: "default-arg", locations: [{ start: { line: 96, column: 34 }, end: { line: 96, column: 36 } }], line: 96 }, "12": { loc: { start: { line: 97, column: 2 }, end: { line: 102, column: 3 } }, type: "switch", locations: [{ start: { line: 98, column: 4 }, end: { line: 99, column: 40 } }, { start: { line: 100, column: 4 }, end: { line: 101, column: 19 } }], line: 97 }, "13": { loc: { start: { line: 105, column: 17 }, end: { line: 105, column: 27 } }, type: "default-arg", locations: [{ start: { line: 105, column: 25 }, end: { line: 105, column: 27 } }], line: 105 }, "14": { loc: { start: { line: 106, column: 2 }, end: { line: 110, column: 3 } }, type: "if", locations: [{ start: { line: 106, column: 2 }, end: { line: 110, column: 3 } }, { start: { line: 106, column: 2 }, end: { line: 110, column: 3 } }], line: 106 }, "15": { loc: { start: { line: 128, column: 21 }, end: { line: 128, column: 48 } }, type: "default-arg", locations: [{ start: { line: 128, column: 29 }, end: { line: 128, column: 48 } }], line: 128 }, "16": { loc: { start: { line: 129, column: 2 }, end: { line: 168, column: 3 } }, type: "switch", locations: [{ start: { line: 130, column: 4 }, end: { line: 143, column: 16 } }, { start: { line: 145, column: 4 }, end: { line: 161, column: 8 } }, { start: { line: 163, column: 4 }, end: { line: 164, column: 33 } }, { start: { line: 166, column: 4 }, end: { line: 167, column: 19 } }], line: 129 }, "17": { loc: { start: { line: 139, column: 48 }, end: { line: 139, column: 72 } }, type: "binary-expr", locations: [{ start: { line: 139, column: 48 }, end: { line: 139, column: 66 } }, { start: { line: 139, column: 70 }, end: { line: 139, column: 72 } }], line: 139 }, "18": { loc: { start: { line: 172, column: 2 }, end: { line: 188, column: 3 } }, type: "if", locations: [{ start: { line: 172, column: 2 }, end: { line: 188, column: 3 } }, { start: { line: 172, column: 2 }, end: { line: 188, column: 3 } }], line: 172 }, "19": { loc: { start: { line: 196, column: 21 }, end: { line: 196, column: 49 } }, type: "default-arg", locations: [{ start: { line: 196, column: 29 }, end: { line: 196, column: 49 } }], line: 196 }, "20": { loc: { start: { line: 197, column: 2 }, end: { line: 224, column: 3 } }, type: "switch", locations: [{ start: { line: 198, column: 4 }, end: { line: 203, column: 8 } }, { start: { line: 204, column: 4 }, end: { line: 217, column: 8 } }, { start: { line: 219, column: 4 }, end: { line: 220, column: 34 } }, { start: { line: 222, column: 4 }, end: { line: 223, column: 19 } }], line: 197 }, "21": { loc: { start: { line: 199, column: 61 }, end: { line: 199, column: 84 } }, type: "cond-expr", locations: [{ start: { line: 199, column: 78 }, end: { line: 199, column: 79 } }, { start: { line: 199, column: 82 }, end: { line: 199, column: 84 } }], line: 199 }, "22": { loc: { start: { line: 201, column: 50 }, end: { line: 201, column: 73 } }, type: "cond-expr", locations: [{ start: { line: 201, column: 67 }, end: { line: 201, column: 68 } }, { start: { line: 201, column: 71 }, end: { line: 201, column: 73 } }], line: 201 }, "23": { loc: { start: { line: 215, column: 14 }, end: { line: 215, column: 34 } }, type: "binary-expr", locations: [{ start: { line: 215, column: 14 }, end: { line: 215, column: 28 } }, { start: { line: 215, column: 32 }, end: { line: 215, column: 34 } }], line: 215 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0, "57": 0, "58": 0, "59": 0, "60": 0, "61": 0, "62": 0, "63": 0, "64": 0, "65": 0, "66": 0, "67": 0, "68": 0, "69": 0, "70": 0, "71": 0, "72": 0, "73": 0, "74": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0], "7": [0, 0, 0], "8": [0, 0], "9": [0, 0], "10": [0, 0], "11": [0], "12": [0, 0], "13": [0], "14": [0, 0], "15": [0], "16": [0, 0, 0, 0], "17": [0, 0], "18": [0, 0], "19": [0], "20": [0, 0, 0, 0], "21": [0, 0], "22": [0, 0], "23": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/data/reducers.js"], names: ["actions", "debug", "DEFAULT_SCOPES", "byId", "scopes", "state", "action", "scope", "variables", "type", "SCOPE", "id", "sourceId", "parentId", "pointer", "DECLARE", "node", "name", "userDefinedTypes", "DEFINE_TYPE", "storage", "ALLOCATE", "allocations", "info", "DEFAULT_ASSIGNMENTS", "byAstId", "assignments", "ASSIGN", "reduce", "acc", "assignment", "astId", "LEARN_ADDRESS", "dummyAddress", "address", "map", "newAssignment", "learnAddress", "RESET", "newIdObj", "newId", "ref", "DEFAULT_MAPPING_KEYS", "decodingStarted", "mappingKeys", "MAP_KEY_DECODING", "started", "MAP_KEY", "key", "proc", "reducer"], mappings: ";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAGA;;AAEA;;AAEA;;IAAYA,O;;;;;;AANZ,MAAMC,QAAQ,qBAAY,wBAAZ,CAAd;;AAQA,MAAMC,iBAAiB;AACrBC,QAAM;AADe,CAAvB;;AAIA,SAASC,MAAT,CAAgBC,QAAQH,cAAxB,EAAwCI,MAAxC,EAAgD;AAC9C,MAAIC,KAAJ;AACA,MAAIC,SAAJ;;AAEA,UAAQF,OAAOG,IAAf;AACE,SAAKT,QAAQU,KAAb;AACEH,cAAQF,MAAMF,IAAN,CAAWG,OAAOK,EAAlB,KAAyB,EAAjC;;AAEA,aAAO;AACLR,yCACKE,MAAMF,IADX;;AAGE,WAACG,OAAOK,EAAR,8BACKJ,KADL;;AAGEI,gBAAIL,OAAOK,EAHb;AAIEC,sBAAUN,OAAOM,QAJnB;AAKEC,sBAAUP,OAAOO,QALnB;AAMEC,qBAASR,OAAOQ;AANlB;AAHF;AADK,OAAP;;AAeF,SAAKd,QAAQe,OAAb;AACER,cAAQF,MAAMF,IAAN,CAAWG,OAAOU,IAAP,CAAYT,KAAvB,KAAiC,EAAzC;AACAC,kBAAYD,MAAMC,SAAN,IAAmB,EAA/B;;AAEA,aAAO;AACLL,yCACKE,MAAMF,IADX;;AAGE,WAACG,OAAOU,IAAP,CAAYT,KAAb,8BACKA,KADL;;AAGEC,uBAAW,CACT,GAAGA,SADM,EAGT,EAAES,MAAMX,OAAOU,IAAP,CAAYC,IAApB,EAA0BN,IAAIL,OAAOU,IAAP,CAAYL,EAA1C,EAHS;AAHb;AAHF;AADK,OAAP;;AAgBF;AACE,aAAON,KAAP;AAxCJ;AA0CD;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASa,gBAAT,CAA0Bb,QAAQ,EAAlC,EAAsCC,MAAtC,EAA8C;AAC5C,UAAQA,OAAOG,IAAf;AACE,SAAKT,QAAQmB,WAAb;AACE,aAAO,CAAC,GAAGd,KAAJ,EAAWC,OAAOU,IAAP,CAAYL,EAAvB,CAAP;AACF;AACE,aAAON,KAAP;AAJJ;AAMD;;AAED,SAASe,OAAT,CAAiBf,QAAQ,EAAzB,EAA6BC,MAA7B,EAAqC;AACnC,MAAIA,OAAOG,IAAP,KAAgBT,QAAQqB,QAA5B,EAAsC;AACpC,WAAOf,OAAOc,OAAd;AACD,GAFD,MAEO;AACL,WAAOf,KAAP;AACD;AACF;;AAED,MAAMiB,cAAc,4BAAgB;AAClCF;AADkC,CAAhB,CAApB;;AAIA,MAAMG,OAAO,4BAAgB;AAC3BnB,QAD2B;AAE3Bc,kBAF2B;AAG3BI;AAH2B,CAAhB,CAAb;;AAMA,MAAME,sBAAsB;AAC1BrB,QAAM,EADoB;AAE1BsB,WAAS;AAFiB,CAA5B;;AAKA,SAASC,WAAT,CAAqBrB,QAAQmB,mBAA7B,EAAkDlB,MAAlD,EAA0D;AACxD,UAAQA,OAAOG,IAAf;AACE,SAAKT,QAAQ2B,MAAb;AACE1B,YAAM,uBAAN,EAA+BK,OAAOoB,WAAtC;AACA,aAAO,sBAAcpB,OAAOoB,WAAP,CAAmBvB,IAAjC,EAAuCyB,MAAvC,CACL,CAACC,GAAD,EAAMC,UAAN,KAAqB;AACnB,YAAI,EAAEnB,EAAF,EAAMoB,KAAN,KAAgBD,UAApB,CADmB,CACa;AAChC,eAAO;AACL3B,2CACK0B,IAAI1B,IADT;AAEE,aAACQ,EAAD,GAAMmB;AAFR,YADK;AAKLL,8CACKI,IAAIJ,OADT;AAEE,aAACM,KAAD,GAAS,CAAC,GAAG,kBAAQ,CAAC,IAAIF,IAAIJ,OAAJ,CAAYM,KAAZ,KAAsB,EAA1B,CAAD,EAAgCpB,EAAhC,CAAR,CAAJ;AACT;AAHF;AALK,SAAP;AAWD,OAdI,EAeLN,KAfK,CAAP;;AAkBF,SAAKL,QAAQgC,aAAb;AACE,UAAI,EAAEC,YAAF,EAAgBC,OAAhB,KAA4B5B,MAAhC;AACA,aAAO;AACLH,cAAM,sBACJ,EADI,EAEJ,GAAG,uBAAeE,MAAMF,IAArB,EAA2BgC,GAA3B,CAA+B,CAAC,GAAGL,UAAH,CAAD,KAAoB;AACpD,cAAIM,gBAAgBC,aAAaP,UAAb,EAAyBG,YAAzB,EAAuCC,OAAvC,CAApB;AACA,iBAAO;AACL,aAACE,cAAczB,EAAf,GAAoByB;AADf,WAAP;AAGD,SALE,CAFC,CADD;AAULX,iBAAS,sBACP,EADO,EAEP,GAAG,uBAAepB,MAAMoB,OAArB,EAA8BU,GAA9B,CAAkC,CAAC,CAACJ,KAAD,CAAD,KAAa;AAChD,iBAAO;AACL,aAACA,KAAD,GAAS1B,MAAMoB,OAAN,CAAcM,KAAd,EAAqBI,GAArB,CACPxB,MAAM0B,aAAahC,MAAMF,IAAN,CAAWQ,EAAX,CAAb,EAA6BsB,YAA7B,EAA2CC,OAA3C,EAAoDvB;AAC1D;AAFO;AADJ,WAAP;AAMD,SAPE,CAFI;AAVJ,OAAP;;AAuBF,SAAKX,QAAQsC,KAAb;AACE,aAAOd,mBAAP;;AAEF;AACE,aAAOnB,KAAP;AAlDJ;AAoDD;;AAED,SAASgC,YAAT,CAAsBP,UAAtB,EAAkCG,YAAlC,EAAgDC,OAAhD,EAAyD;AACvD,MAAIJ,WAAWG,YAAX,KAA4BA,YAAhC,EAA8C;AAC5C;AACA;AACA,QAAIM,WAAW;AACbR,aAAOD,WAAWC,KADL;AAEbG;AAFa,KAAf;AAIA,QAAIM,QAAQ,8BAAgBD,QAAhB,CAAZ;AACA,WAAO;AACL5B,UAAI6B,KADC;AAELC,WAAKX,WAAWW,GAFX;AAGLV,aAAOD,WAAWC,KAHb;AAILG;AAJK,KAAP;AAMD,GAdD,MAcO;AACL,WAAOJ,UAAP;AACD;AACF;;AAED,MAAMY,uBAAuB;AAC3BC,mBAAiB,CADU;AAE3BxC,QAAM;AAFqB,CAA7B;;AAKA,SAASyC,WAAT,CAAqBvC,QAAQqC,oBAA7B,EAAmDpC,MAAnD,EAA2D;AACzD,UAAQA,OAAOG,IAAf;AACE,SAAKT,QAAQ6C,gBAAb;AACE5C,YACE,sBADF,EAEEI,MAAMsC,eAAN,IAAyBrC,OAAOwC,OAAP,GAAiB,CAAjB,GAAqB,CAAC,CAA/C,CAFF;AAIA,aAAO;AACLH,yBAAiBtC,MAAMsC,eAAN,IAAyBrC,OAAOwC,OAAP,GAAiB,CAAjB,GAAqB,CAAC,CAA/C,CADZ;AAEL3C,yCAAWE,MAAMF,IAAjB;AAFK,OAAP;AAIF,SAAKH,QAAQ+C,OAAb;AACE,UAAI,EAAEpC,EAAF,EAAMqC,GAAN,KAAc1C,MAAlB;AACAL,YAAM,4BAAN,EAAoCU,EAApC,EAAwCqC,GAAxC;;AAEA,aAAO;AACLL,yBAAiBtC,MAAMsC,eADlB;AAELxC,yCACKE,MAAMF,IADX;;AAGE;AACA,WAACQ,EAAD,GAAM,CACJ,GAAG,kBAAQ;AACT;AACA,cAAIN,MAAMF,IAAN,CAAWQ,EAAX,KAAkB,EAAtB,CAFS,EAGTqC,GAHS,CAAR,CADC;AAJR;AAFK,OAAP;;AAgBF,SAAKhD,QAAQsC,KAAb;AACE,aAAOI,oBAAP;;AAEF;AACE,aAAOrC,KAAP;AAlCJ;AAoCD;;AAED,MAAM4C,OAAO,4BAAgB;AAC3BvB,aAD2B;AAE3BkB;AAF2B,CAAhB,CAAb;;AAKA,MAAMM,UAAU,4BAAgB;AAC9B3B,MAD8B;AAE9B0B;AAF8B,CAAhB,CAAhB;;kBAKeC,O", file: "reducers.js", sourceRoot: "/Users/tyler/projects/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:data:reducers\");\n\nimport { combineReducers } from \"redux\";\n\nimport { stableKeccak256 } from \"lib/helpers\";\n\nimport * as actions from \"./actions\";\n\nconst DEFAULT_SCOPES = {\n  byId: {}\n};\n\nfunction scopes(state = DEFAULT_SCOPES, action) {\n  var scope;\n  var variables;\n\n  switch (action.type) {\n    case actions.SCOPE:\n      scope = state.byId[action.id] || {};\n\n      return {\n        byId: {\n          ...state.byId,\n\n          [action.id]: {\n            ...scope,\n\n            id: action.id,\n            sourceId: action.sourceId,\n            parentId: action.parentId,\n            pointer: action.pointer\n          }\n        }\n      };\n\n    case actions.DECLARE:\n      scope = state.byId[action.node.scope] || {};\n      variables = scope.variables || [];\n\n      return {\n        byId: {\n          ...state.byId,\n\n          [action.node.scope]: {\n            ...scope,\n\n            variables: [\n              ...variables,\n\n              { name: action.node.name, id: action.node.id }\n            ]\n          }\n        }\n      };\n\n    default:\n      return state;\n  }\n}\n\n//a note on the following reducer: solidity assigns a unique AST ID to every\n//AST node among all the files being compiled together.  thus, it is, for now,\n//safe to identify user-defined types solely by their AST ID.  In the future,\n//once we eventually support having some files compiled separately from others,\n//this will become a bug you'll have to fix, and you'll have to fix it in the\n//decoder, too.  Sorry, future me! (or whoever's stuck doing this)\n\nfunction userDefinedTypes(state = [], action) {\n  switch (action.type) {\n    case actions.DEFINE_TYPE:\n      return [...state, action.node.id];\n    default:\n      return state;\n  }\n}\n\nfunction storage(state = {}, action) {\n  if (action.type === actions.ALLOCATE) {\n    return action.storage;\n  } else {\n    return state;\n  }\n}\n\nconst allocations = combineReducers({\n  storage\n});\n\nconst info = combineReducers({\n  scopes,\n  userDefinedTypes,\n  allocations\n});\n\nconst DEFAULT_ASSIGNMENTS = {\n  byId: {},\n  byAstId: {}\n};\n\nfunction assignments(state = DEFAULT_ASSIGNMENTS, action) {\n  switch (action.type) {\n    case actions.ASSIGN:\n      debug(\"action.assignments %O\", action.assignments);\n      return Object.values(action.assignments.byId).reduce(\n        (acc, assignment) => {\n          let { id, astId } = assignment; //we don't need the rest\n          return {\n            byId: {\n              ...acc.byId,\n              [id]: assignment\n            },\n            byAstId: {\n              ...acc.byAstId,\n              [astId]: [...new Set([...(acc.byAstId[astId] || []), id])]\n              //we use a set for uniqueness\n            }\n          };\n        },\n        state\n      );\n\n    case actions.LEARN_ADDRESS:\n      let { dummyAddress, address } = action;\n      return {\n        byId: Object.assign(\n          {},\n          ...Object.entries(state.byId).map(([, assignment]) => {\n            let newAssignment = learnAddress(assignment, dummyAddress, address);\n            return {\n              [newAssignment.id]: newAssignment\n            };\n          })\n        ),\n        byAstId: Object.assign(\n          {},\n          ...Object.entries(state.byAstId).map(([astId]) => {\n            return {\n              [astId]: state.byAstId[astId].map(\n                id => learnAddress(state.byId[id], dummyAddress, address).id\n                //this above involves some recomputation but oh well\n              )\n            };\n          })\n        )\n      };\n\n    case actions.RESET:\n      return DEFAULT_ASSIGNMENTS;\n\n    default:\n      return state;\n  }\n}\n\nfunction learnAddress(assignment, dummyAddress, address) {\n  if (assignment.dummyAddress === dummyAddress) {\n    //we can assume here that the object being\n    //transformed has a very particular form\n    let newIdObj = {\n      astId: assignment.astId,\n      address\n    };\n    let newId = stableKeccak256(newIdObj);\n    return {\n      id: newId,\n      ref: assignment.ref,\n      astId: assignment.astId,\n      address\n    };\n  } else {\n    return assignment;\n  }\n}\n\nconst DEFAULT_MAPPING_KEYS = {\n  decodingStarted: 0,\n  byId: {}\n};\n\nfunction mappingKeys(state = DEFAULT_MAPPING_KEYS, action) {\n  switch (action.type) {\n    case actions.MAP_KEY_DECODING:\n      debug(\n        \"decoding started: %d\",\n        state.decodingStarted + (action.started ? 1 : -1)\n      );\n      return {\n        decodingStarted: state.decodingStarted + (action.started ? 1 : -1),\n        byId: { ...state.byId }\n      };\n    case actions.MAP_KEY:\n      let { id, key } = action;\n      debug(\"mapping id and key: %s, %o\", id, key);\n\n      return {\n        decodingStarted: state.decodingStarted,\n        byId: {\n          ...state.byId,\n\n          // add new key to set of keys already defined\n          [id]: [\n            ...new Set([\n              //set for uniqueness\n              ...(state.byId[id] || []),\n              key\n            ])\n          ]\n        }\n      };\n\n    case actions.RESET:\n      return DEFAULT_MAPPING_KEYS;\n\n    default:\n      return state;\n  }\n}\n\nconst proc = combineReducers({\n  assignments,\n  mappingKeys\n});\n\nconst reducer = combineReducers({\n  info,\n  proc\n});\n\nexport default reducer;\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_1ib6m598u7.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _entries = (cov_1ib6m598u7.s[1]++, __webpack_require__(8));var _entries2 = (cov_1ib6m598u7.s[2]++, _interopRequireDefault(_entries));var _assign = (cov_1ib6m598u7.s[3]++, __webpack_require__(9));var _assign2 = (cov_1ib6m598u7.s[4]++, _interopRequireDefault(_assign));var _set = (cov_1ib6m598u7.s[5]++, __webpack_require__(25));var _set2 = (cov_1ib6m598u7.s[6]++, _interopRequireDefault(_set));var _values = (cov_1ib6m598u7.s[7]++, __webpack_require__(26));var _values2 = (cov_1ib6m598u7.s[8]++, _interopRequireDefault(_values));var _extends2 = (cov_1ib6m598u7.s[9]++, __webpack_require__(12));var _extends3 = (cov_1ib6m598u7.s[10]++, _interopRequireDefault(_extends2));var _debug = (cov_1ib6m598u7.s[11]++, __webpack_require__(0));var _debug2 = (cov_1ib6m598u7.s[12]++, _interopRequireDefault(_debug));var _redux = (cov_1ib6m598u7.s[13]++, __webpack_require__(16));var _helpers = (cov_1ib6m598u7.s[14]++, __webpack_require__(2));var _actions = (cov_1ib6m598u7.s[15]++, __webpack_require__(32));var actions = (cov_1ib6m598u7.s[16]++, _interopRequireWildcard(_actions));function _interopRequireWildcard(obj) {
  cov_1ib6m598u7.f[0]++;cov_1ib6m598u7.s[17]++;if ((cov_1ib6m598u7.b[1][0]++, obj) && (cov_1ib6m598u7.b[1][1]++, obj.__esModule)) {
    cov_1ib6m598u7.b[0][0]++;cov_1ib6m598u7.s[18]++;return obj;
  } else {
    cov_1ib6m598u7.b[0][1]++;var newObj = (cov_1ib6m598u7.s[19]++, {});cov_1ib6m598u7.s[20]++;if (obj != null) {
      cov_1ib6m598u7.b[2][0]++;cov_1ib6m598u7.s[21]++;for (var key in obj) {
        cov_1ib6m598u7.s[22]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_1ib6m598u7.b[3][0]++;cov_1ib6m598u7.s[23]++;newObj[key] = obj[key];
        } else {
          cov_1ib6m598u7.b[3][1]++;
        }
      }
    } else {
      cov_1ib6m598u7.b[2][1]++;
    }cov_1ib6m598u7.s[24]++;newObj.default = obj;cov_1ib6m598u7.s[25]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_1ib6m598u7.f[1]++;cov_1ib6m598u7.s[26]++;return (cov_1ib6m598u7.b[5][0]++, obj) && (cov_1ib6m598u7.b[5][1]++, obj.__esModule) ? (cov_1ib6m598u7.b[4][0]++, obj) : (cov_1ib6m598u7.b[4][1]++, { default: obj });
}const debug = (cov_1ib6m598u7.s[27]++, (0, _debug2.default)("debugger:data:reducers"));const DEFAULT_SCOPES = (cov_1ib6m598u7.s[28]++, { byId: {} });function scopes(state = (cov_1ib6m598u7.b[6][0]++, DEFAULT_SCOPES), action) {
  cov_1ib6m598u7.f[2]++;var scope;var variables;cov_1ib6m598u7.s[29]++;switch (action.type) {case actions.SCOPE:
      cov_1ib6m598u7.b[7][0]++;cov_1ib6m598u7.s[30]++;scope = (cov_1ib6m598u7.b[8][0]++, state.byId[action.id]) || (cov_1ib6m598u7.b[8][1]++, {});cov_1ib6m598u7.s[31]++;return { byId: (0, _extends3.default)({}, state.byId, { [action.id]: (0, _extends3.default)({}, scope, { id: action.id, sourceId: action.sourceId, parentId: action.parentId, pointer: action.pointer }) }) };case actions.DECLARE:
      cov_1ib6m598u7.b[7][1]++;cov_1ib6m598u7.s[32]++;scope = (cov_1ib6m598u7.b[9][0]++, state.byId[action.node.scope]) || (cov_1ib6m598u7.b[9][1]++, {});cov_1ib6m598u7.s[33]++;variables = (cov_1ib6m598u7.b[10][0]++, scope.variables) || (cov_1ib6m598u7.b[10][1]++, []);cov_1ib6m598u7.s[34]++;return { byId: (0, _extends3.default)({}, state.byId, { [action.node.scope]: (0, _extends3.default)({}, scope, { variables: [...variables, { name: action.node.name, id: action.node.id }] }) }) };default:
      cov_1ib6m598u7.b[7][2]++;cov_1ib6m598u7.s[35]++;return state;}
}function userDefinedTypes(state = (cov_1ib6m598u7.b[11][0]++, []), action) {
  cov_1ib6m598u7.f[3]++;cov_1ib6m598u7.s[36]++;switch (action.type) {case actions.DEFINE_TYPE:
      cov_1ib6m598u7.b[12][0]++;cov_1ib6m598u7.s[37]++;return [...state, action.node.id];default:
      cov_1ib6m598u7.b[12][1]++;cov_1ib6m598u7.s[38]++;return state;}
}function storage(state = (cov_1ib6m598u7.b[13][0]++, {}), action) {
  cov_1ib6m598u7.f[4]++;cov_1ib6m598u7.s[39]++;if (action.type === actions.ALLOCATE) {
    cov_1ib6m598u7.b[14][0]++;cov_1ib6m598u7.s[40]++;return action.storage;
  } else {
    cov_1ib6m598u7.b[14][1]++;cov_1ib6m598u7.s[41]++;return state;
  }
}const allocations = (cov_1ib6m598u7.s[42]++, (0, _redux.combineReducers)({ storage }));const info = (cov_1ib6m598u7.s[43]++, (0, _redux.combineReducers)({ scopes, userDefinedTypes, allocations }));const DEFAULT_ASSIGNMENTS = (cov_1ib6m598u7.s[44]++, { byId: {}, byAstId: {} });function assignments(state = (cov_1ib6m598u7.b[15][0]++, DEFAULT_ASSIGNMENTS), action) {
  cov_1ib6m598u7.f[5]++;cov_1ib6m598u7.s[45]++;switch (action.type) {case actions.ASSIGN:
      cov_1ib6m598u7.b[16][0]++;cov_1ib6m598u7.s[46]++;debug("action.assignments %O", action.assignments);cov_1ib6m598u7.s[47]++;return (0, _values2.default)(action.assignments.byId).reduce((acc, assignment) => {
        cov_1ib6m598u7.f[6]++;let { id, astId } = (cov_1ib6m598u7.s[48]++, assignment);cov_1ib6m598u7.s[49]++;return { byId: (0, _extends3.default)({}, acc.byId, { [id]: assignment }), byAstId: (0, _extends3.default)({}, acc.byAstId, { [astId]: [...new _set2.default([...((cov_1ib6m598u7.b[17][0]++, acc.byAstId[astId]) || (cov_1ib6m598u7.b[17][1]++, [])), id])] }) };
      }, state);case actions.LEARN_ADDRESS:
      cov_1ib6m598u7.b[16][1]++;let { dummyAddress, address } = (cov_1ib6m598u7.s[50]++, action);cov_1ib6m598u7.s[51]++;return { byId: (0, _assign2.default)({}, ...(0, _entries2.default)(state.byId).map(([, assignment]) => {
          cov_1ib6m598u7.f[7]++;let newAssignment = (cov_1ib6m598u7.s[52]++, learnAddress(assignment, dummyAddress, address));cov_1ib6m598u7.s[53]++;return { [newAssignment.id]: newAssignment };
        })), byAstId: (0, _assign2.default)({}, ...(0, _entries2.default)(state.byAstId).map(([astId]) => {
          cov_1ib6m598u7.f[8]++;cov_1ib6m598u7.s[54]++;return { [astId]: state.byAstId[astId].map(id => {
              cov_1ib6m598u7.f[9]++;cov_1ib6m598u7.s[55]++;return learnAddress(state.byId[id], dummyAddress, address).id;
            }) };
        })) };case actions.RESET:
      cov_1ib6m598u7.b[16][2]++;cov_1ib6m598u7.s[56]++;return DEFAULT_ASSIGNMENTS;default:
      cov_1ib6m598u7.b[16][3]++;cov_1ib6m598u7.s[57]++;return state;}
}function learnAddress(assignment, dummyAddress, address) {
  cov_1ib6m598u7.f[10]++;cov_1ib6m598u7.s[58]++;if (assignment.dummyAddress === dummyAddress) {
    cov_1ib6m598u7.b[18][0]++;let newIdObj = (cov_1ib6m598u7.s[59]++, { astId: assignment.astId, address });let newId = (cov_1ib6m598u7.s[60]++, (0, _helpers.stableKeccak256)(newIdObj));cov_1ib6m598u7.s[61]++;return { id: newId, ref: assignment.ref, astId: assignment.astId, address };
  } else {
    cov_1ib6m598u7.b[18][1]++;cov_1ib6m598u7.s[62]++;return assignment;
  }
}const DEFAULT_MAPPING_KEYS = (cov_1ib6m598u7.s[63]++, { decodingStarted: 0, byId: {} });function mappingKeys(state = (cov_1ib6m598u7.b[19][0]++, DEFAULT_MAPPING_KEYS), action) {
  cov_1ib6m598u7.f[11]++;cov_1ib6m598u7.s[64]++;switch (action.type) {case actions.MAP_KEY_DECODING:
      cov_1ib6m598u7.b[20][0]++;cov_1ib6m598u7.s[65]++;debug("decoding started: %d", state.decodingStarted + (action.started ? (cov_1ib6m598u7.b[21][0]++, 1) : (cov_1ib6m598u7.b[21][1]++, -1)));cov_1ib6m598u7.s[66]++;return { decodingStarted: state.decodingStarted + (action.started ? (cov_1ib6m598u7.b[22][0]++, 1) : (cov_1ib6m598u7.b[22][1]++, -1)), byId: (0, _extends3.default)({}, state.byId) };case actions.MAP_KEY:
      cov_1ib6m598u7.b[20][1]++;let { id, key } = (cov_1ib6m598u7.s[67]++, action);cov_1ib6m598u7.s[68]++;debug("mapping id and key: %s, %o", id, key);cov_1ib6m598u7.s[69]++;return { decodingStarted: state.decodingStarted, byId: (0, _extends3.default)({}, state.byId, { [id]: [...new _set2.default([...((cov_1ib6m598u7.b[23][0]++, state.byId[id]) || (cov_1ib6m598u7.b[23][1]++, [])), key])] }) };case actions.RESET:
      cov_1ib6m598u7.b[20][2]++;cov_1ib6m598u7.s[70]++;return DEFAULT_MAPPING_KEYS;default:
      cov_1ib6m598u7.b[20][3]++;cov_1ib6m598u7.s[71]++;return state;}
}const proc = (cov_1ib6m598u7.s[72]++, (0, _redux.combineReducers)({ assignments, mappingKeys }));const reducer = (cov_1ib6m598u7.s[73]++, (0, _redux.combineReducers)({ info, proc }));cov_1ib6m598u7.s[74]++;exports.default = reducer;

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_2kq7ngzy8b = function () {
  var path = "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/evm/reducers.js",
      hash = "d81cc53a21c3638d632afe9a014df2fab2153b80",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/evm/reducers.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 11 }, end: { line: 7, column: 47 } }, "2": { start: { line: 9, column: 12 }, end: { line: 9, column: 40 } }, "3": { start: { line: 11, column: 12 }, end: { line: 11, column: 55 } }, "4": { start: { line: 13, column: 13 }, end: { line: 13, column: 42 } }, "5": { start: { line: 15, column: 16 }, end: { line: 15, column: 56 } }, "6": { start: { line: 17, column: 16 }, end: { line: 17, column: 49 } }, "7": { start: { line: 19, column: 0 }, end: { line: 19, column: 30 } }, "8": { start: { line: 21, column: 13 }, end: { line: 21, column: 29 } }, "9": { start: { line: 23, column: 15 }, end: { line: 23, column: 35 } }, "10": { start: { line: 25, column: 14 }, end: { line: 25, column: 47 } }, "11": { start: { line: 27, column: 15 }, end: { line: 27, column: 37 } }, "12": { start: { line: 29, column: 40 }, end: { line: 29, column: 267 } }, "13": { start: { line: 29, column: 69 }, end: { line: 29, column: 80 } }, "14": { start: { line: 29, column: 103 }, end: { line: 29, column: 105 } }, "15": { start: { line: 29, column: 107 }, end: { line: 29, column: 228 } }, "16": { start: { line: 29, column: 126 }, end: { line: 29, column: 226 } }, "17": { start: { line: 29, column: 149 }, end: { line: 29, column: 224 } }, "18": { start: { line: 29, column: 201 }, end: { line: 29, column: 224 } }, "19": { start: { line: 29, column: 229 }, end: { line: 29, column: 250 } }, "20": { start: { line: 29, column: 251 }, end: { line: 29, column: 265 } }, "21": { start: { line: 31, column: 39 }, end: { line: 31, column: 93 } }, "22": { start: { line: 33, column: 25 }, end: { line: 36, column: 1 } }, "23": { start: { line: 39, column: 2 }, end: { line: 94, column: 3 } }, "24": { start: { line: 45, column: 48 }, end: { line: 45, column: 54 } }, "25": { start: { line: 46, column: 24 }, end: { line: 46, column: 52 } }, "26": { start: { line: 48, column: 8 }, end: { line: 59, column: 11 } }, "27": { start: { line: 67, column: 36 }, end: { line: 67, column: 42 } }, "28": { start: { line: 69, column: 8 }, end: { line: 71, column: 9 } }, "29": { start: { line: 70, column: 10 }, end: { line: 70, column: 23 } }, "30": { start: { line: 73, column: 8 }, end: { line: 86, column: 10 } }, "31": { start: { line: 93, column: 6 }, end: { line: 93, column: 19 } }, "32": { start: { line: 97, column: 26 }, end: { line: 100, column: 1 } }, "33": { start: { line: 103, column: 2 }, end: { line: 134, column: 3 } }, "34": { start: { line: 108, column: 41 }, end: { line: 108, column: 47 } }, "35": { start: { line: 110, column: 6 }, end: { line: 110, column: 38 } }, "36": { start: { line: 113, column: 27 }, end: { line: 113, column: 57 } }, "37": { start: { line: 114, column: 27 }, end: { line: 114, column: 71 } }, "38": { start: { line: 114, column: 63 }, end: { line: 114, column: 70 } }, "39": { start: { line: 116, column: 6 }, end: { line: 127, column: 8 } }, "40": { start: { line: 125, column: 105 }, end: { line: 125, column: 116 } }, "41": { start: { line: 133, column: 6 }, end: { line: 133, column: 19 } }, "42": { start: { line: 137, column: 13 }, end: { line: 140, column: 2 } }, "43": { start: { line: 143, column: 2 }, end: { line: 164, column: 3 } }, "44": { start: { line: 145, column: 20 }, end: { line: 145, column: 48 } }, "45": { start: { line: 148, column: 6 }, end: { line: 148, column: 41 } }, "46": { start: { line: 151, column: 21 }, end: { line: 151, column: 34 } }, "47": { start: { line: 152, column: 6 }, end: { line: 152, column: 40 } }, "48": { start: { line: 157, column: 6 }, end: { line: 157, column: 59 } }, "49": { start: { line: 160, column: 6 }, end: { line: 160, column: 24 } }, "50": { start: { line: 163, column: 6 }, end: { line: 163, column: 19 } }, "51": { start: { line: 167, column: 13 }, end: { line: 169, column: 2 } }, "52": { start: { line: 171, column: 16 }, end: { line: 174, column: 2 } }, "53": { start: { line: 176, column: 0 }, end: { line: 176, column: 26 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 29, column: 9 }, end: { line: 29, column: 32 } }, loc: { start: { line: 29, column: 38 }, end: { line: 29, column: 269 } }, line: 29 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 31, column: 9 }, end: { line: 31, column: 31 } }, loc: { start: { line: 31, column: 37 }, end: { line: 31, column: 95 } }, line: 31 }, "2": { name: "contexts", decl: { start: { line: 38, column: 9 }, end: { line: 38, column: 17 } }, loc: { start: { line: 38, column: 52 }, end: { line: 95, column: 1 } }, line: 38 }, "3": { name: "instances", decl: { start: { line: 102, column: 9 }, end: { line: 102, column: 18 } }, loc: { start: { line: 102, column: 54 }, end: { line: 135, column: 1 } }, line: 102 }, "4": { name: "(anonymous_4)", decl: { start: { line: 114, column: 46 }, end: { line: 114, column: 47 } }, loc: { start: { line: 114, column: 63 }, end: { line: 114, column: 70 } }, line: 114 }, "5": { name: "(anonymous_5)", decl: { start: { line: 125, column: 93 }, end: { line: 125, column: 94 } }, loc: { start: { line: 125, column: 105 }, end: { line: 125, column: 116 } }, line: 125 }, "6": { name: "callstack", decl: { start: { line: 142, column: 9 }, end: { line: 142, column: 18 } }, loc: { start: { line: 142, column: 39 }, end: { line: 165, column: 1 } }, line: 142 } }, branchMap: { "0": { loc: { start: { line: 29, column: 40 }, end: { line: 29, column: 267 } }, type: "if", locations: [{ start: { line: 29, column: 40 }, end: { line: 29, column: 267 } }, { start: { line: 29, column: 40 }, end: { line: 29, column: 267 } }], line: 29 }, "1": { loc: { start: { line: 29, column: 44 }, end: { line: 29, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 29, column: 44 }, end: { line: 29, column: 47 } }, { start: { line: 29, column: 51 }, end: { line: 29, column: 65 } }], line: 29 }, "2": { loc: { start: { line: 29, column: 107 }, end: { line: 29, column: 228 } }, type: "if", locations: [{ start: { line: 29, column: 107 }, end: { line: 29, column: 228 } }, { start: { line: 29, column: 107 }, end: { line: 29, column: 228 } }], line: 29 }, "3": { loc: { start: { line: 29, column: 149 }, end: { line: 29, column: 224 } }, type: "if", locations: [{ start: { line: 29, column: 149 }, end: { line: 29, column: 224 } }, { start: { line: 29, column: 149 }, end: { line: 29, column: 224 } }], line: 29 }, "4": { loc: { start: { line: 31, column: 46 }, end: { line: 31, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 31, column: 70 }, end: { line: 31, column: 73 } }, { start: { line: 31, column: 76 }, end: { line: 31, column: 92 } }], line: 31 }, "5": { loc: { start: { line: 31, column: 46 }, end: { line: 31, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 31, column: 46 }, end: { line: 31, column: 49 } }, { start: { line: 31, column: 53 }, end: { line: 31, column: 67 } }], line: 31 }, "6": { loc: { start: { line: 38, column: 18 }, end: { line: 38, column: 42 } }, type: "default-arg", locations: [{ start: { line: 38, column: 26 }, end: { line: 38, column: 42 } }], line: 38 }, "7": { loc: { start: { line: 39, column: 2 }, end: { line: 94, column: 3 } }, type: "switch", locations: [{ start: { line: 43, column: 4 }, end: { line: 60, column: 7 } }, { start: { line: 65, column: 4 }, end: { line: 87, column: 7 } }, { start: { line: 92, column: 4 }, end: { line: 93, column: 19 } }], line: 39 }, "8": { loc: { start: { line: 52, column: 50 }, end: { line: 52, column: 80 } }, type: "binary-expr", locations: [{ start: { line: 52, column: 50 }, end: { line: 52, column: 74 } }, { start: { line: 52, column: 78 }, end: { line: 52, column: 80 } }], line: 52 }, "9": { loc: { start: { line: 69, column: 8 }, end: { line: 71, column: 9 } }, type: "if", locations: [{ start: { line: 69, column: 8 }, end: { line: 71, column: 9 } }, { start: { line: 69, column: 8 }, end: { line: 71, column: 9 } }], line: 69 }, "10": { loc: { start: { line: 102, column: 19 }, end: { line: 102, column: 44 } }, type: "default-arg", locations: [{ start: { line: 102, column: 27 }, end: { line: 102, column: 44 } }], line: 102 }, "11": { loc: { start: { line: 103, column: 2 }, end: { line: 134, column: 3 } }, type: "switch", locations: [{ start: { line: 107, column: 4 }, end: { line: 127, column: 8 } }, { start: { line: 132, column: 4 }, end: { line: 133, column: 19 } }], line: 103 }, "12": { loc: { start: { line: 113, column: 27 }, end: { line: 113, column: 57 } }, type: "binary-expr", locations: [{ start: { line: 113, column: 27 }, end: { line: 113, column: 51 } }, { start: { line: 113, column: 55 }, end: { line: 113, column: 57 } }], line: 113 }, "13": { loc: { start: { line: 142, column: 19 }, end: { line: 142, column: 29 } }, type: "default-arg", locations: [{ start: { line: 142, column: 27 }, end: { line: 142, column: 29 } }], line: 142 }, "14": { loc: { start: { line: 143, column: 2 }, end: { line: 164, column: 3 } }, type: "switch", locations: [{ start: { line: 144, column: 4 }, end: { line: 148, column: 41 } }, { start: { line: 150, column: 4 }, end: { line: 152, column: 40 } }, { start: { line: 154, column: 4 }, end: { line: 157, column: 59 } }, { start: { line: 159, column: 4 }, end: { line: 160, column: 24 } }, { start: { line: 162, column: 4 }, end: { line: 163, column: 19 } }], line: 143 }, "15": { loc: { start: { line: 157, column: 13 }, end: { line: 157, column: 58 } }, type: "cond-expr", locations: [{ start: { line: 157, column: 32 }, end: { line: 157, column: 50 } }, { start: { line: 157, column: 53 }, end: { line: 157, column: 58 } }], line: 157 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "53": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0], "7": [0, 0, 0], "8": [0, 0], "9": [0, 0], "10": [0], "11": [0, 0], "12": [0, 0], "13": [0], "14": [0, 0, 0, 0, 0], "15": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/evm/reducers.js"], names: ["callstack", "actions", "DEFAULT_CONTEXTS", "byContext", "byBinary", "contexts", "state", "action", "type", "ADD_CONTEXT", "contractName", "raw", "compiler", "context", "ADD_BINARY", "binary", "DEFAULT_INSTANCES", "byAddress", "instances", "ADD_INSTANCE", "address", "toLowerCase", "otherInstances", "otherAddresses", "map", "add", "info", "CALL", "concat", "CREATE", "RETURN", "length", "slice", "RESET", "proc", "reducer"], mappings: ";;;;;;;;;;;;;;;;;;QA0HgBA,S,GAAAA,S;;AA1HhB;;AAEA;;IAAYC,O;;AACZ;;;;;;AAEA,MAAMC,mBAAmB;AACvBC,aAAW,EADY;AAEvBC,YAAU;AAFa,CAAzB;;AAKA,SAASC,QAAT,CAAkBC,QAAQJ,gBAA1B,EAA4CK,MAA5C,EAAoD;AAClD,UAAQA,OAAOC,IAAf;AACE;;;AAGA,SAAKP,QAAQQ,WAAb;AAA0B;AACxB,cAAM,EAAEC,YAAF,EAAgBC,GAAhB,EAAqBC,QAArB,KAAkCL,MAAxC;AACA,cAAMM,UAAU,wBAAUF,GAAV,CAAhB;;AAEA,0CACKL,KADL;;AAGEH,gDACKG,MAAMH,SADX;;AAGE,aAACU,OAAD,8BACMP,MAAMH,SAAN,CAAgBU,OAAhB,KAA4B,EADlC;;AAGEH,0BAHF;AAIEG,qBAJF;AAKED;AALF;AAHF;AAHF;AAeD;;AAED;;;AAGA,SAAKX,QAAQa,UAAb;AAAyB;AACvB,cAAM,EAAED,OAAF,EAAWE,MAAX,KAAsBR,MAA5B;;AAEA,YAAID,MAAMF,QAAN,CAAeW,MAAf,CAAJ,EAA4B;AAC1B,iBAAOT,KAAP;AACD;;AAED,eAAO;AACLH,gDACKG,MAAMH,SADX;;AAGE,aAACU,OAAD,8BACKP,MAAMH,SAAN,CAAgBU,OAAhB,CADL;;AAGEE;AAHF;AAHF,YADK;;AAWLX,+CACKE,MAAMF,QADX;;AAGE,aAACW,MAAD,GAAU,EAAEF,SAASA,OAAX;AAHZ;AAXK,SAAP;AAiBD;;AAED;;;AAGA;AACE,aAAOP,KAAP;AA1DJ;AA4DD;;AAED,MAAMU,oBAAoB;AACxBC,aAAW,EADa;AAExBd,aAAW;AAFa,CAA1B;;AAKA,SAASe,SAAT,CAAmBZ,QAAQU,iBAA3B,EAA8CT,MAA9C,EAAsD;AACpD,UAAQA,OAAOC,IAAf;AACE;;;AAGA,SAAKP,QAAQkB,YAAb;AACE,UAAI,EAAEC,OAAF,EAAWP,OAAX,EAAoBE,MAApB,KAA+BR,MAAnC;;AAEAa,gBAAUA,QAAQC,WAAR,EAAV;;AAEA;AACA,UAAIC,iBAAiBhB,MAAMH,SAAN,CAAgBU,OAAhB,KAA4B,EAAjD;AACA,UAAIU,iBAAiBD,eAAeE,GAAf,CAAmB,CAAC,EAAEJ,OAAF,EAAD,KAAiBA,OAApC,CAArB;;AAEA,aAAO;AACLH,8CACKX,MAAMW,SADX;;AAGE,WAACG,OAAD,GAAW,EAAEA,OAAF,EAAWP,OAAX,EAAoBE,MAApB;AAHb,UADK;;AAOLZ,8CACKG,MAAMH,SADX;;AAGE;AACA,WAACU,OAAD,GAAW,oBAAW,kBAAQU,cAAR,EAAwBE,GAAxB,CAA4BL,OAA5B,CAAX,EAAiDI,GAAjD,CACTJ,YAAY,EAAEA,OAAF,EAAZ,CADS;AAJb;AAPK,OAAP;;AAiBF;;;AAGA;AACE,aAAOd,KAAP;AAlCJ;AAoCD;;AAED,MAAMoB,OAAO,4BAAgB;AAC3BrB,UAD2B;AAE3Ba;AAF2B,CAAhB,CAAb;;AAKO,SAASlB,SAAT,CAAmBM,QAAQ,EAA3B,EAA+BC,MAA/B,EAAuC;AAC5C,UAAQA,OAAOC,IAAf;AACE,SAAKP,QAAQ0B,IAAb;AACE,UAAIP,UAAUb,OAAOa,OAAP,CAAeC,WAAf,EAAd;AACA;AACA;AACA,aAAOf,MAAMsB,MAAN,CAAa,CAAC,EAAER,OAAF,EAAD,CAAb,CAAP;;AAEF,SAAKnB,QAAQ4B,MAAb;AACE,YAAMd,SAASR,OAAOQ,MAAtB;AACA,aAAOT,MAAMsB,MAAN,CAAa,CAAC,EAAEb,MAAF,EAAD,CAAb,CAAP;;AAEF,SAAKd,QAAQ6B,MAAb;AACE;AACA;AACA,aAAOxB,MAAMyB,MAAN,GAAe,CAAf,GAAmBzB,MAAM0B,KAAN,CAAY,CAAZ,EAAe,CAAC,CAAhB,CAAnB,GAAwC1B,KAA/C;;AAEF,SAAKC,OAAO0B,KAAZ;AACE,aAAO,CAAC3B,MAAM,CAAN,CAAD,CAAP,CAjBJ,CAiBuB;;AAErB;AACE,aAAOA,KAAP;AApBJ;AAsBD;;AAED,MAAM4B,OAAO,4BAAgB;AAC3BlC;AAD2B,CAAhB,CAAb;;AAIA,MAAMmC,UAAU,4BAAgB;AAC9BT,MAD8B;AAE9BQ;AAF8B,CAAhB,CAAhB;;kBAKeC,O", file: "reducers.js", sourceRoot: "/Users/tyler/projects/truffle/packages/truffle-debugger", sourcesContent: ["import { combineReducers } from \"redux\";\n\nimport * as actions from \"./actions\";\nimport { keccak256 } from \"lib/helpers\";\n\nconst DEFAULT_CONTEXTS = {\n  byContext: {},\n  byBinary: {}\n};\n\nfunction contexts(state = DEFAULT_CONTEXTS, action) {\n  switch (action.type) {\n    /*\n     * Adding a new context\n     */\n    case actions.ADD_CONTEXT: {\n      const { contractName, raw, compiler } = action;\n      const context = keccak256(raw);\n\n      return {\n        ...state,\n\n        byContext: {\n          ...state.byContext,\n\n          [context]: {\n            ...(state.byContext[context] || {}),\n\n            contractName,\n            context,\n            compiler\n          }\n        }\n      };\n    }\n\n    /*\n     * Adding binary for a context\n     */\n    case actions.ADD_BINARY: {\n      const { context, binary } = action;\n\n      if (state.byBinary[binary]) {\n        return state;\n      }\n\n      return {\n        byContext: {\n          ...state.byContext,\n\n          [context]: {\n            ...state.byContext[context],\n\n            binary\n          }\n        },\n\n        byBinary: {\n          ...state.byBinary,\n\n          [binary]: { context: context }\n        }\n      };\n    }\n\n    /*\n     * Default case\n     */\n    default:\n      return state;\n  }\n}\n\nconst DEFAULT_INSTANCES = {\n  byAddress: {},\n  byContext: {}\n};\n\nfunction instances(state = DEFAULT_INSTANCES, action) {\n  switch (action.type) {\n    /*\n     * Adding a new address for context\n     */\n    case actions.ADD_INSTANCE:\n      let { address, context, binary } = action;\n\n      address = address.toLowerCase();\n\n      // get known addresses for this context\n      let otherInstances = state.byContext[context] || [];\n      let otherAddresses = otherInstances.map(({ address }) => address);\n\n      return {\n        byAddress: {\n          ...state.byAddress,\n\n          [address]: { address, context, binary }\n        },\n\n        byContext: {\n          ...state.byContext,\n\n          // reconstruct context instances to include new address\n          [context]: Array.from(new Set(otherAddresses).add(address)).map(\n            address => ({ address })\n          )\n        }\n      };\n\n    /*\n     * Default case\n     */\n    default:\n      return state;\n  }\n}\n\nconst info = combineReducers({\n  contexts,\n  instances\n});\n\nexport function callstack(state = [], action) {\n  switch (action.type) {\n    case actions.CALL:\n      let address = action.address.toLowerCase();\n      //we get some addresses in lowercase, some in checksum case,\n      //so I'm lowercasing them all for consistency\n      return state.concat([{ address }]);\n\n    case actions.CREATE:\n      const binary = action.binary;\n      return state.concat([{ binary }]);\n\n    case actions.RETURN:\n      //HACK: pop the stack, UNLESS that would leave it empty (this will only\n      //happen at the end when we want to keep the last one around)\n      return state.length > 1 ? state.slice(0, -1) : state;\n\n    case action.RESET:\n      return [state[0]]; //leave the initial call still on the stack\n\n    default:\n      return state;\n  }\n}\n\nconst proc = combineReducers({\n  callstack\n});\n\nconst reducer = combineReducers({\n  info,\n  proc\n});\n\nexport default reducer;\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_2kq7ngzy8b.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _set = (cov_2kq7ngzy8b.s[1]++, __webpack_require__(25));var _set2 = (cov_2kq7ngzy8b.s[2]++, _interopRequireDefault(_set));var _from = (cov_2kq7ngzy8b.s[3]++, __webpack_require__(77));var _from2 = (cov_2kq7ngzy8b.s[4]++, _interopRequireDefault(_from));var _extends2 = (cov_2kq7ngzy8b.s[5]++, __webpack_require__(12));var _extends3 = (cov_2kq7ngzy8b.s[6]++, _interopRequireDefault(_extends2));cov_2kq7ngzy8b.s[7]++;exports.callstack = callstack;var _redux = (cov_2kq7ngzy8b.s[8]++, __webpack_require__(16));var _actions = (cov_2kq7ngzy8b.s[9]++, __webpack_require__(35));var actions = (cov_2kq7ngzy8b.s[10]++, _interopRequireWildcard(_actions));var _helpers = (cov_2kq7ngzy8b.s[11]++, __webpack_require__(2));function _interopRequireWildcard(obj) {
  cov_2kq7ngzy8b.f[0]++;cov_2kq7ngzy8b.s[12]++;if ((cov_2kq7ngzy8b.b[1][0]++, obj) && (cov_2kq7ngzy8b.b[1][1]++, obj.__esModule)) {
    cov_2kq7ngzy8b.b[0][0]++;cov_2kq7ngzy8b.s[13]++;return obj;
  } else {
    cov_2kq7ngzy8b.b[0][1]++;var newObj = (cov_2kq7ngzy8b.s[14]++, {});cov_2kq7ngzy8b.s[15]++;if (obj != null) {
      cov_2kq7ngzy8b.b[2][0]++;cov_2kq7ngzy8b.s[16]++;for (var key in obj) {
        cov_2kq7ngzy8b.s[17]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_2kq7ngzy8b.b[3][0]++;cov_2kq7ngzy8b.s[18]++;newObj[key] = obj[key];
        } else {
          cov_2kq7ngzy8b.b[3][1]++;
        }
      }
    } else {
      cov_2kq7ngzy8b.b[2][1]++;
    }cov_2kq7ngzy8b.s[19]++;newObj.default = obj;cov_2kq7ngzy8b.s[20]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_2kq7ngzy8b.f[1]++;cov_2kq7ngzy8b.s[21]++;return (cov_2kq7ngzy8b.b[5][0]++, obj) && (cov_2kq7ngzy8b.b[5][1]++, obj.__esModule) ? (cov_2kq7ngzy8b.b[4][0]++, obj) : (cov_2kq7ngzy8b.b[4][1]++, { default: obj });
}const DEFAULT_CONTEXTS = (cov_2kq7ngzy8b.s[22]++, { byContext: {}, byBinary: {} });function contexts(state = (cov_2kq7ngzy8b.b[6][0]++, DEFAULT_CONTEXTS), action) {
  cov_2kq7ngzy8b.f[2]++;cov_2kq7ngzy8b.s[23]++;switch (action.type) {case actions.ADD_CONTEXT:
      cov_2kq7ngzy8b.b[7][0]++;{
        const { contractName, raw, compiler } = (cov_2kq7ngzy8b.s[24]++, action);const context = (cov_2kq7ngzy8b.s[25]++, (0, _helpers.keccak256)(raw));cov_2kq7ngzy8b.s[26]++;return (0, _extends3.default)({}, state, { byContext: (0, _extends3.default)({}, state.byContext, { [context]: (0, _extends3.default)({}, (cov_2kq7ngzy8b.b[8][0]++, state.byContext[context]) || (cov_2kq7ngzy8b.b[8][1]++, {}), { contractName, context, compiler }) }) });
      }case actions.ADD_BINARY:
      cov_2kq7ngzy8b.b[7][1]++;{
        const { context, binary } = (cov_2kq7ngzy8b.s[27]++, action);cov_2kq7ngzy8b.s[28]++;if (state.byBinary[binary]) {
          cov_2kq7ngzy8b.b[9][0]++;cov_2kq7ngzy8b.s[29]++;return state;
        } else {
          cov_2kq7ngzy8b.b[9][1]++;
        }cov_2kq7ngzy8b.s[30]++;return { byContext: (0, _extends3.default)({}, state.byContext, { [context]: (0, _extends3.default)({}, state.byContext[context], { binary }) }), byBinary: (0, _extends3.default)({}, state.byBinary, { [binary]: { context: context } }) };
      }default:
      cov_2kq7ngzy8b.b[7][2]++;cov_2kq7ngzy8b.s[31]++;return state;}
}const DEFAULT_INSTANCES = (cov_2kq7ngzy8b.s[32]++, { byAddress: {}, byContext: {} });function instances(state = (cov_2kq7ngzy8b.b[10][0]++, DEFAULT_INSTANCES), action) {
  cov_2kq7ngzy8b.f[3]++;cov_2kq7ngzy8b.s[33]++;switch (action.type) {case actions.ADD_INSTANCE:
      cov_2kq7ngzy8b.b[11][0]++;let { address, context, binary } = (cov_2kq7ngzy8b.s[34]++, action);cov_2kq7ngzy8b.s[35]++;address = address.toLowerCase();let otherInstances = (cov_2kq7ngzy8b.s[36]++, (cov_2kq7ngzy8b.b[12][0]++, state.byContext[context]) || (cov_2kq7ngzy8b.b[12][1]++, []));let otherAddresses = (cov_2kq7ngzy8b.s[37]++, otherInstances.map(({ address }) => {
        cov_2kq7ngzy8b.f[4]++;cov_2kq7ngzy8b.s[38]++;return address;
      }));cov_2kq7ngzy8b.s[39]++;return { byAddress: (0, _extends3.default)({}, state.byAddress, { [address]: { address, context, binary } }), byContext: (0, _extends3.default)({}, state.byContext, { [context]: (0, _from2.default)(new _set2.default(otherAddresses).add(address)).map(address => {
            cov_2kq7ngzy8b.f[5]++;cov_2kq7ngzy8b.s[40]++;return { address };
          }) }) };default:
      cov_2kq7ngzy8b.b[11][1]++;cov_2kq7ngzy8b.s[41]++;return state;}
}const info = (cov_2kq7ngzy8b.s[42]++, (0, _redux.combineReducers)({ contexts, instances }));function callstack(state = (cov_2kq7ngzy8b.b[13][0]++, []), action) {
  cov_2kq7ngzy8b.f[6]++;cov_2kq7ngzy8b.s[43]++;switch (action.type) {case actions.CALL:
      cov_2kq7ngzy8b.b[14][0]++;let address = (cov_2kq7ngzy8b.s[44]++, action.address.toLowerCase());cov_2kq7ngzy8b.s[45]++;return state.concat([{ address }]);case actions.CREATE:
      cov_2kq7ngzy8b.b[14][1]++;const binary = (cov_2kq7ngzy8b.s[46]++, action.binary);cov_2kq7ngzy8b.s[47]++;return state.concat([{ binary }]);case actions.RETURN:
      cov_2kq7ngzy8b.b[14][2]++;cov_2kq7ngzy8b.s[48]++;return state.length > 1 ? (cov_2kq7ngzy8b.b[15][0]++, state.slice(0, -1)) : (cov_2kq7ngzy8b.b[15][1]++, state);case action.RESET:
      cov_2kq7ngzy8b.b[14][3]++;cov_2kq7ngzy8b.s[49]++;return [state[0]];default:
      cov_2kq7ngzy8b.b[14][4]++;cov_2kq7ngzy8b.s[50]++;return state;}
}const proc = (cov_2kq7ngzy8b.s[51]++, (0, _redux.combineReducers)({ callstack }));const reducer = (cov_2kq7ngzy8b.s[52]++, (0, _redux.combineReducers)({ info, proc }));cov_2kq7ngzy8b.s[53]++;exports.default = reducer;

/***/ }),
/* 77 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/core-js/array/from");

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_1n1qf4hzzz = function () {
  var path = "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/solidity/reducers.js",
      hash = "76887d1d81f8909167f8d592bdd5714c004916fe",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/solidity/reducers.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 16 }, end: { line: 7, column: 56 } }, "2": { start: { line: 9, column: 16 }, end: { line: 9, column: 49 } }, "3": { start: { line: 11, column: 12 }, end: { line: 11, column: 56 } }, "4": { start: { line: 13, column: 13 }, end: { line: 13, column: 42 } }, "5": { start: { line: 15, column: 0 }, end: { line: 15, column: 38 } }, "6": { start: { line: 17, column: 13 }, end: { line: 17, column: 29 } }, "7": { start: { line: 19, column: 15 }, end: { line: 19, column: 37 } }, "8": { start: { line: 21, column: 15 }, end: { line: 21, column: 35 } }, "9": { start: { line: 23, column: 14 }, end: { line: 23, column: 47 } }, "10": { start: { line: 25, column: 40 }, end: { line: 25, column: 267 } }, "11": { start: { line: 25, column: 69 }, end: { line: 25, column: 80 } }, "12": { start: { line: 25, column: 103 }, end: { line: 25, column: 105 } }, "13": { start: { line: 25, column: 107 }, end: { line: 25, column: 228 } }, "14": { start: { line: 25, column: 126 }, end: { line: 25, column: 226 } }, "15": { start: { line: 25, column: 149 }, end: { line: 25, column: 224 } }, "16": { start: { line: 25, column: 201 }, end: { line: 25, column: 224 } }, "17": { start: { line: 25, column: 229 }, end: { line: 25, column: 250 } }, "18": { start: { line: 25, column: 251 }, end: { line: 25, column: 265 } }, "19": { start: { line: 27, column: 39 }, end: { line: 27, column: 93 } }, "20": { start: { line: 29, column: 24 }, end: { line: 31, column: 1 } }, "21": { start: { line: 34, column: 2 }, end: { line: 61, column: 3 } }, "22": { start: { line: 39, column: 50 }, end: { line: 39, column: 56 } }, "23": { start: { line: 41, column: 15 }, end: { line: 41, column: 53 } }, "24": { start: { line: 43, column: 6 }, end: { line: 54, column: 8 } }, "25": { start: { line: 60, column: 6 }, end: { line: 60, column: 19 } }, "26": { start: { line: 64, column: 27 }, end: { line: 66, column: 1 } }, "27": { start: { line: 69, column: 2 }, end: { line: 92, column: 3 } }, "28": { start: { line: 74, column: 34 }, end: { line: 74, column: 40 } }, "29": { start: { line: 75, column: 20 }, end: { line: 75, column: 51 } }, "30": { start: { line: 77, column: 6 }, end: { line: 85, column: 8 } }, "31": { start: { line: 91, column: 6 }, end: { line: 91, column: 19 } }, "32": { start: { line: 95, column: 13 }, end: { line: 98, column: 2 } }, "33": { start: { line: 101, column: 2 }, end: { line: 111, column: 3 } }, "34": { start: { line: 103, column: 20 }, end: { line: 103, column: 49 } }, "35": { start: { line: 104, column: 6 }, end: { line: 104, column: 27 } }, "36": { start: { line: 107, column: 6 }, end: { line: 107, column: 15 } }, "37": { start: { line: 110, column: 6 }, end: { line: 110, column: 19 } }, "38": { start: { line: 115, column: 2 }, end: { line: 123, column: 3 } }, "39": { start: { line: 116, column: 4 }, end: { line: 116, column: 13 } }, "40": { start: { line: 117, column: 9 }, end: { line: 123, column: 3 } }, "41": { start: { line: 118, column: 4 }, end: { line: 118, column: 14 } }, "42": { start: { line: 119, column: 9 }, end: { line: 123, column: 3 } }, "43": { start: { line: 120, column: 4 }, end: { line: 120, column: 13 } }, "44": { start: { line: 122, column: 4 }, end: { line: 122, column: 13 } }, "45": { start: { line: 126, column: 13 }, end: { line: 128, column: 2 } }, "46": { start: { line: 130, column: 16 }, end: { line: 133, column: 2 } }, "47": { start: { line: 135, column: 0 }, end: { line: 135, column: 26 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 25, column: 9 }, end: { line: 25, column: 32 } }, loc: { start: { line: 25, column: 38 }, end: { line: 25, column: 269 } }, line: 25 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 27, column: 9 }, end: { line: 27, column: 31 } }, loc: { start: { line: 27, column: 37 }, end: { line: 27, column: 95 } }, line: 27 }, "2": { name: "sources", decl: { start: { line: 33, column: 9 }, end: { line: 33, column: 16 } }, loc: { start: { line: 33, column: 50 }, end: { line: 62, column: 1 } }, line: 33 }, "3": { name: "sourceMaps", decl: { start: { line: 68, column: 9 }, end: { line: 68, column: 19 } }, loc: { start: { line: 68, column: 56 }, end: { line: 93, column: 1 } }, line: 68 }, "4": { name: "functionDepth", decl: { start: { line: 100, column: 9 }, end: { line: 100, column: 22 } }, loc: { start: { line: 100, column: 42 }, end: { line: 112, column: 1 } }, line: 100 }, "5": { name: "spelunk", decl: { start: { line: 114, column: 9 }, end: { line: 114, column: 16 } }, loc: { start: { line: 114, column: 23 }, end: { line: 124, column: 1 } }, line: 114 } }, branchMap: { "0": { loc: { start: { line: 25, column: 40 }, end: { line: 25, column: 267 } }, type: "if", locations: [{ start: { line: 25, column: 40 }, end: { line: 25, column: 267 } }, { start: { line: 25, column: 40 }, end: { line: 25, column: 267 } }], line: 25 }, "1": { loc: { start: { line: 25, column: 44 }, end: { line: 25, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 25, column: 44 }, end: { line: 25, column: 47 } }, { start: { line: 25, column: 51 }, end: { line: 25, column: 65 } }], line: 25 }, "2": { loc: { start: { line: 25, column: 107 }, end: { line: 25, column: 228 } }, type: "if", locations: [{ start: { line: 25, column: 107 }, end: { line: 25, column: 228 } }, { start: { line: 25, column: 107 }, end: { line: 25, column: 228 } }], line: 25 }, "3": { loc: { start: { line: 25, column: 149 }, end: { line: 25, column: 224 } }, type: "if", locations: [{ start: { line: 25, column: 149 }, end: { line: 25, column: 224 } }, { start: { line: 25, column: 149 }, end: { line: 25, column: 224 } }], line: 25 }, "4": { loc: { start: { line: 27, column: 46 }, end: { line: 27, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 27, column: 70 }, end: { line: 27, column: 73 } }, { start: { line: 27, column: 76 }, end: { line: 27, column: 92 } }], line: 27 }, "5": { loc: { start: { line: 27, column: 46 }, end: { line: 27, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 27, column: 46 }, end: { line: 27, column: 49 } }, { start: { line: 27, column: 53 }, end: { line: 27, column: 67 } }], line: 27 }, "6": { loc: { start: { line: 33, column: 17 }, end: { line: 33, column: 40 } }, type: "default-arg", locations: [{ start: { line: 33, column: 25 }, end: { line: 33, column: 40 } }], line: 33 }, "7": { loc: { start: { line: 34, column: 2 }, end: { line: 61, column: 3 } }, type: "switch", locations: [{ start: { line: 38, column: 4 }, end: { line: 54, column: 8 } }, { start: { line: 59, column: 4 }, end: { line: 60, column: 19 } }], line: 34 }, "8": { loc: { start: { line: 68, column: 20 }, end: { line: 68, column: 46 } }, type: "default-arg", locations: [{ start: { line: 68, column: 28 }, end: { line: 68, column: 46 } }], line: 68 }, "9": { loc: { start: { line: 69, column: 2 }, end: { line: 92, column: 3 } }, type: "switch", locations: [{ start: { line: 73, column: 4 }, end: { line: 85, column: 8 } }, { start: { line: 90, column: 4 }, end: { line: 91, column: 19 } }], line: 69 }, "10": { loc: { start: { line: 100, column: 23 }, end: { line: 100, column: 32 } }, type: "default-arg", locations: [{ start: { line: 100, column: 31 }, end: { line: 100, column: 32 } }], line: 100 }, "11": { loc: { start: { line: 101, column: 2 }, end: { line: 111, column: 3 } }, type: "switch", locations: [{ start: { line: 102, column: 4 }, end: { line: 104, column: 27 } }, { start: { line: 106, column: 4 }, end: { line: 107, column: 15 } }, { start: { line: 109, column: 4 }, end: { line: 110, column: 19 } }], line: 101 }, "12": { loc: { start: { line: 115, column: 2 }, end: { line: 123, column: 3 } }, type: "if", locations: [{ start: { line: 115, column: 2 }, end: { line: 123, column: 3 } }, { start: { line: 115, column: 2 }, end: { line: 123, column: 3 } }], line: 115 }, "13": { loc: { start: { line: 117, column: 9 }, end: { line: 123, column: 3 } }, type: "if", locations: [{ start: { line: 117, column: 9 }, end: { line: 123, column: 3 } }, { start: { line: 117, column: 9 }, end: { line: 123, column: 3 } }], line: 117 }, "14": { loc: { start: { line: 119, column: 9 }, end: { line: 123, column: 3 } }, type: "if", locations: [{ start: { line: 119, column: 9 }, end: { line: 123, column: 3 } }, { start: { line: 119, column: 9 }, end: { line: 123, column: 3 } }], line: 119 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0], "7": [0, 0], "8": [0], "9": [0, 0], "10": [0], "11": [0, 0, 0], "12": [0, 0], "13": [0, 0], "14": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/solidity/reducers.js"], names: ["functionDepth", "actions", "DEFAULT_SOURCES", "byId", "sources", "state", "action", "type", "ADD_SOURCE", "ast", "source", "sourcePath", "compiler", "id", "length", "DEFAULT_SOURCEMAPS", "byContext", "sourceMaps", "ADD_SOURCEMAP", "binary", "sourceMap", "context", "info", "JUMP", "delta", "spelunk", "jumpDirection", "RESET", "jump", "proc", "reducer"], mappings: ";;;;;;;;;;;;;;QA+EgBA,a,GAAAA,a;;AA/EhB;;AAEA;;AAEA;;IAAYC,O;;;;;;AAEZ,MAAMC,kBAAkB;AACtBC,QAAM;AADgB,CAAxB;;AAIA,SAASC,OAAT,CAAiBC,QAAQH,eAAzB,EAA0CI,MAA1C,EAAkD;AAChD,UAAQA,OAAOC,IAAf;AACE;;;AAGA,SAAKN,QAAQO,UAAb;AACE,UAAI,EAAEC,GAAF,EAAOC,MAAP,EAAeC,UAAf,EAA2BC,QAA3B,KAAwCN,MAA5C;;AAEA,UAAIO,KAAK,oBAAYR,MAAMF,IAAlB,EAAwBW,MAAjC;;AAEA,aAAO;AACLX,yCACKE,MAAMF,IADX;;AAGE,WAACU,EAAD,GAAM;AACJA,cADI;AAEJJ,eAFI;AAGJC,kBAHI;AAIJC,sBAJI;AAKJC;AALI;AAHR;AADK,OAAP;;AAcF;;;AAGA;AACE,aAAOP,KAAP;AA3BJ;AA6BD;;AAED,MAAMU,qBAAqB;AACzBC,aAAW;AADc,CAA3B;;AAIA,SAASC,UAAT,CAAoBZ,QAAQU,kBAA5B,EAAgDT,MAAhD,EAAwD;AACtD,UAAQA,OAAOC,IAAf;AACE;;;AAGA,SAAKN,QAAQiB,aAAb;AACE,UAAI,EAAEC,MAAF,EAAUC,SAAV,KAAwBd,MAA5B;AACA,UAAIe,UAAU,wBAAUF,MAAV,CAAd;;AAEA,aAAO;AACLH,8CACKX,MAAMW,SADX;;AAGE,WAACK,OAAD,GAAW;AACTA,mBADS;AAETD;AAFS;AAHb;AADK,OAAP;;AAWF;;;AAGA;AACE,aAAOf,KAAP;AAvBJ;AAyBD;;AAED,MAAMiB,OAAO,4BAAgB;AAC3BlB,SAD2B;AAE3Ba;AAF2B,CAAhB,CAAb;;AAKO,SAASjB,aAAT,CAAuBK,QAAQ,CAA/B,EAAkCC,MAAlC,EAA0C;AAC/C,UAAQA,OAAOC,IAAf;AACE,SAAKN,QAAQsB,IAAb;AACE,YAAMC,QAAQC,QAAQnB,OAAOoB,aAAf,CAAd;AACA,aAAOrB,QAAQmB,KAAf;;AAEF,SAAKvB,QAAQ0B,KAAb;AACE,aAAO,CAAP;;AAEF;AACE,aAAOtB,KAAP;AATJ;AAWD;;AAED,SAASoB,OAAT,CAAiBG,IAAjB,EAAuB;AACrB,MAAIA,SAAS,GAAb,EAAkB;AAChB,WAAO,CAAP;AACD,GAFD,MAEO,IAAIA,SAAS,GAAb,EAAkB;AACvB,WAAO,CAAC,CAAR;AACD,GAFM,MAEA,IAAIA,SAAS,GAAb,EAAkB;AACvB,WAAO,CAAP,CADuB,CACb;AACX,GAFM,MAEA;AACL,WAAO,CAAP;AACD;AACF;;AAED,MAAMC,OAAO,4BAAgB;AAC3B7B;AAD2B,CAAhB,CAAb;;AAIA,MAAM8B,UAAU,4BAAgB;AAC9BR,MAD8B;AAE9BO;AAF8B,CAAhB,CAAhB;;kBAKeC,O", file: "reducers.js", sourceRoot: "/Users/tyler/projects/truffle/packages/truffle-debugger", sourcesContent: ["import { combineReducers } from \"redux\";\n\nimport { keccak256 } from \"lib/helpers\";\n\nimport * as actions from \"./actions\";\n\nconst DEFAULT_SOURCES = {\n  byId: {}\n};\n\nfunction sources(state = DEFAULT_SOURCES, action) {\n  switch (action.type) {\n    /*\n     * Adding a new source\n     */\n    case actions.ADD_SOURCE:\n      let { ast, source, sourcePath, compiler } = action;\n\n      let id = Object.keys(state.byId).length;\n\n      return {\n        byId: {\n          ...state.byId,\n\n          [id]: {\n            id,\n            ast,\n            source,\n            sourcePath,\n            compiler\n          }\n        }\n      };\n\n    /*\n     * Default case\n     */\n    default:\n      return state;\n  }\n}\n\nconst DEFAULT_SOURCEMAPS = {\n  byContext: {}\n};\n\nfunction sourceMaps(state = DEFAULT_SOURCEMAPS, action) {\n  switch (action.type) {\n    /*\n     * Adding a new sourceMap\n     */\n    case actions.ADD_SOURCEMAP:\n      let { binary, sourceMap } = action;\n      let context = keccak256(binary);\n\n      return {\n        byContext: {\n          ...state.byContext,\n\n          [context]: {\n            context,\n            sourceMap\n          }\n        }\n      };\n\n    /*\n     * Default Case\n     */\n    default:\n      return state;\n  }\n}\n\nconst info = combineReducers({\n  sources,\n  sourceMaps\n});\n\nexport function functionDepth(state = 0, action) {\n  switch (action.type) {\n    case actions.JUMP:\n      const delta = spelunk(action.jumpDirection);\n      return state + delta;\n\n    case actions.RESET:\n      return 0;\n\n    default:\n      return state;\n  }\n}\n\nfunction spelunk(jump) {\n  if (jump === \"i\") {\n    return 1;\n  } else if (jump === \"o\") {\n    return -1;\n  } else if (jump === \"2\") {\n    return 2; //HACK WORKAROUND\n  } else {\n    return 0;\n  }\n}\n\nconst proc = combineReducers({\n  functionDepth\n});\n\nconst reducer = combineReducers({\n  info,\n  proc\n});\n\nexport default reducer;\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_1n1qf4hzzz.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _extends2 = (cov_1n1qf4hzzz.s[1]++, __webpack_require__(12));var _extends3 = (cov_1n1qf4hzzz.s[2]++, _interopRequireDefault(_extends2));var _keys = (cov_1n1qf4hzzz.s[3]++, __webpack_require__(17));var _keys2 = (cov_1n1qf4hzzz.s[4]++, _interopRequireDefault(_keys));cov_1n1qf4hzzz.s[5]++;exports.functionDepth = functionDepth;var _redux = (cov_1n1qf4hzzz.s[6]++, __webpack_require__(16));var _helpers = (cov_1n1qf4hzzz.s[7]++, __webpack_require__(2));var _actions = (cov_1n1qf4hzzz.s[8]++, __webpack_require__(37));var actions = (cov_1n1qf4hzzz.s[9]++, _interopRequireWildcard(_actions));function _interopRequireWildcard(obj) {
  cov_1n1qf4hzzz.f[0]++;cov_1n1qf4hzzz.s[10]++;if ((cov_1n1qf4hzzz.b[1][0]++, obj) && (cov_1n1qf4hzzz.b[1][1]++, obj.__esModule)) {
    cov_1n1qf4hzzz.b[0][0]++;cov_1n1qf4hzzz.s[11]++;return obj;
  } else {
    cov_1n1qf4hzzz.b[0][1]++;var newObj = (cov_1n1qf4hzzz.s[12]++, {});cov_1n1qf4hzzz.s[13]++;if (obj != null) {
      cov_1n1qf4hzzz.b[2][0]++;cov_1n1qf4hzzz.s[14]++;for (var key in obj) {
        cov_1n1qf4hzzz.s[15]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_1n1qf4hzzz.b[3][0]++;cov_1n1qf4hzzz.s[16]++;newObj[key] = obj[key];
        } else {
          cov_1n1qf4hzzz.b[3][1]++;
        }
      }
    } else {
      cov_1n1qf4hzzz.b[2][1]++;
    }cov_1n1qf4hzzz.s[17]++;newObj.default = obj;cov_1n1qf4hzzz.s[18]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_1n1qf4hzzz.f[1]++;cov_1n1qf4hzzz.s[19]++;return (cov_1n1qf4hzzz.b[5][0]++, obj) && (cov_1n1qf4hzzz.b[5][1]++, obj.__esModule) ? (cov_1n1qf4hzzz.b[4][0]++, obj) : (cov_1n1qf4hzzz.b[4][1]++, { default: obj });
}const DEFAULT_SOURCES = (cov_1n1qf4hzzz.s[20]++, { byId: {} });function sources(state = (cov_1n1qf4hzzz.b[6][0]++, DEFAULT_SOURCES), action) {
  cov_1n1qf4hzzz.f[2]++;cov_1n1qf4hzzz.s[21]++;switch (action.type) {case actions.ADD_SOURCE:
      cov_1n1qf4hzzz.b[7][0]++;let { ast, source, sourcePath, compiler } = (cov_1n1qf4hzzz.s[22]++, action);let id = (cov_1n1qf4hzzz.s[23]++, (0, _keys2.default)(state.byId).length);cov_1n1qf4hzzz.s[24]++;return { byId: (0, _extends3.default)({}, state.byId, { [id]: { id, ast, source, sourcePath, compiler } }) };default:
      cov_1n1qf4hzzz.b[7][1]++;cov_1n1qf4hzzz.s[25]++;return state;}
}const DEFAULT_SOURCEMAPS = (cov_1n1qf4hzzz.s[26]++, { byContext: {} });function sourceMaps(state = (cov_1n1qf4hzzz.b[8][0]++, DEFAULT_SOURCEMAPS), action) {
  cov_1n1qf4hzzz.f[3]++;cov_1n1qf4hzzz.s[27]++;switch (action.type) {case actions.ADD_SOURCEMAP:
      cov_1n1qf4hzzz.b[9][0]++;let { binary, sourceMap } = (cov_1n1qf4hzzz.s[28]++, action);let context = (cov_1n1qf4hzzz.s[29]++, (0, _helpers.keccak256)(binary));cov_1n1qf4hzzz.s[30]++;return { byContext: (0, _extends3.default)({}, state.byContext, { [context]: { context, sourceMap } }) };default:
      cov_1n1qf4hzzz.b[9][1]++;cov_1n1qf4hzzz.s[31]++;return state;}
}const info = (cov_1n1qf4hzzz.s[32]++, (0, _redux.combineReducers)({ sources, sourceMaps }));function functionDepth(state = (cov_1n1qf4hzzz.b[10][0]++, 0), action) {
  cov_1n1qf4hzzz.f[4]++;cov_1n1qf4hzzz.s[33]++;switch (action.type) {case actions.JUMP:
      cov_1n1qf4hzzz.b[11][0]++;const delta = (cov_1n1qf4hzzz.s[34]++, spelunk(action.jumpDirection));cov_1n1qf4hzzz.s[35]++;return state + delta;case actions.RESET:
      cov_1n1qf4hzzz.b[11][1]++;cov_1n1qf4hzzz.s[36]++;return 0;default:
      cov_1n1qf4hzzz.b[11][2]++;cov_1n1qf4hzzz.s[37]++;return state;}
}function spelunk(jump) {
  cov_1n1qf4hzzz.f[5]++;cov_1n1qf4hzzz.s[38]++;if (jump === "i") {
    cov_1n1qf4hzzz.b[12][0]++;cov_1n1qf4hzzz.s[39]++;return 1;
  } else {
    cov_1n1qf4hzzz.b[12][1]++;cov_1n1qf4hzzz.s[40]++;if (jump === "o") {
      cov_1n1qf4hzzz.b[13][0]++;cov_1n1qf4hzzz.s[41]++;return -1;
    } else {
      cov_1n1qf4hzzz.b[13][1]++;cov_1n1qf4hzzz.s[42]++;if (jump === "2") {
        cov_1n1qf4hzzz.b[14][0]++;cov_1n1qf4hzzz.s[43]++;return 2;
      } else {
        cov_1n1qf4hzzz.b[14][1]++;cov_1n1qf4hzzz.s[44]++;return 0;
      }
    }
  }
}const proc = (cov_1n1qf4hzzz.s[45]++, (0, _redux.combineReducers)({ functionDepth }));const reducer = (cov_1n1qf4hzzz.s[46]++, (0, _redux.combineReducers)({ info, proc }));cov_1n1qf4hzzz.s[47]++;exports.default = reducer;

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_2nu11vehzm = function () {
  var path = "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/trace/reducers.js",
      hash = "d952d891d2141e2af1ecba7b6200d5e809609083",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/trace/reducers.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 6, column: 0 }, end: { line: 6, column: 22 } }, "2": { start: { line: 7, column: 0 }, end: { line: 7, column: 28 } }, "3": { start: { line: 8, column: 0 }, end: { line: 8, column: 22 } }, "4": { start: { line: 10, column: 13 }, end: { line: 10, column: 29 } }, "5": { start: { line: 12, column: 15 }, end: { line: 12, column: 35 } }, "6": { start: { line: 14, column: 14 }, end: { line: 14, column: 47 } }, "7": { start: { line: 16, column: 40 }, end: { line: 16, column: 267 } }, "8": { start: { line: 16, column: 69 }, end: { line: 16, column: 80 } }, "9": { start: { line: 16, column: 103 }, end: { line: 16, column: 105 } }, "10": { start: { line: 16, column: 107 }, end: { line: 16, column: 228 } }, "11": { start: { line: 16, column: 126 }, end: { line: 16, column: 226 } }, "12": { start: { line: 16, column: 149 }, end: { line: 16, column: 224 } }, "13": { start: { line: 16, column: 201 }, end: { line: 16, column: 224 } }, "14": { start: { line: 16, column: 229 }, end: { line: 16, column: 250 } }, "15": { start: { line: 16, column: 251 }, end: { line: 16, column: 265 } }, "16": { start: { line: 19, column: 2 }, end: { line: 28, column: 3 } }, "17": { start: { line: 21, column: 6 }, end: { line: 21, column: 23 } }, "18": { start: { line: 24, column: 6 }, end: { line: 24, column: 15 } }, "19": { start: { line: 27, column: 6 }, end: { line: 27, column: 19 } }, "20": { start: { line: 32, column: 2 }, end: { line: 41, column: 3 } }, "21": { start: { line: 34, column: 6 }, end: { line: 34, column: 18 } }, "22": { start: { line: 37, column: 6 }, end: { line: 37, column: 19 } }, "23": { start: { line: 40, column: 6 }, end: { line: 40, column: 19 } }, "24": { start: { line: 45, column: 2 }, end: { line: 49, column: 3 } }, "25": { start: { line: 46, column: 4 }, end: { line: 46, column: 24 } }, "26": { start: { line: 48, column: 4 }, end: { line: 48, column: 17 } }, "27": { start: { line: 52, column: 13 }, end: { line: 54, column: 2 } }, "28": { start: { line: 56, column: 13 }, end: { line: 59, column: 2 } }, "29": { start: { line: 61, column: 16 }, end: { line: 64, column: 2 } }, "30": { start: { line: 66, column: 0 }, end: { line: 66, column: 26 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 16, column: 9 }, end: { line: 16, column: 32 } }, loc: { start: { line: 16, column: 38 }, end: { line: 16, column: 269 } }, line: 16 }, "1": { name: "index", decl: { start: { line: 18, column: 9 }, end: { line: 18, column: 14 } }, loc: { start: { line: 18, column: 34 }, end: { line: 29, column: 1 } }, line: 18 }, "2": { name: "finished", decl: { start: { line: 31, column: 9 }, end: { line: 31, column: 17 } }, loc: { start: { line: 31, column: 41 }, end: { line: 42, column: 1 } }, line: 31 }, "3": { name: "steps", decl: { start: { line: 44, column: 9 }, end: { line: 44, column: 14 } }, loc: { start: { line: 44, column: 37 }, end: { line: 50, column: 1 } }, line: 44 } }, branchMap: { "0": { loc: { start: { line: 16, column: 40 }, end: { line: 16, column: 267 } }, type: "if", locations: [{ start: { line: 16, column: 40 }, end: { line: 16, column: 267 } }, { start: { line: 16, column: 40 }, end: { line: 16, column: 267 } }], line: 16 }, "1": { loc: { start: { line: 16, column: 44 }, end: { line: 16, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 16, column: 44 }, end: { line: 16, column: 47 } }, { start: { line: 16, column: 51 }, end: { line: 16, column: 65 } }], line: 16 }, "2": { loc: { start: { line: 16, column: 107 }, end: { line: 16, column: 228 } }, type: "if", locations: [{ start: { line: 16, column: 107 }, end: { line: 16, column: 228 } }, { start: { line: 16, column: 107 }, end: { line: 16, column: 228 } }], line: 16 }, "3": { loc: { start: { line: 16, column: 149 }, end: { line: 16, column: 224 } }, type: "if", locations: [{ start: { line: 16, column: 149 }, end: { line: 16, column: 224 } }, { start: { line: 16, column: 149 }, end: { line: 16, column: 224 } }], line: 16 }, "4": { loc: { start: { line: 18, column: 15 }, end: { line: 18, column: 24 } }, type: "default-arg", locations: [{ start: { line: 18, column: 23 }, end: { line: 18, column: 24 } }], line: 18 }, "5": { loc: { start: { line: 19, column: 2 }, end: { line: 28, column: 3 } }, type: "switch", locations: [{ start: { line: 20, column: 4 }, end: { line: 21, column: 23 } }, { start: { line: 23, column: 4 }, end: { line: 24, column: 15 } }, { start: { line: 26, column: 4 }, end: { line: 27, column: 19 } }], line: 19 }, "6": { loc: { start: { line: 31, column: 18 }, end: { line: 31, column: 31 } }, type: "default-arg", locations: [{ start: { line: 31, column: 26 }, end: { line: 31, column: 31 } }], line: 31 }, "7": { loc: { start: { line: 32, column: 2 }, end: { line: 41, column: 3 } }, type: "switch", locations: [{ start: { line: 33, column: 4 }, end: { line: 34, column: 18 } }, { start: { line: 36, column: 4 }, end: { line: 37, column: 19 } }, { start: { line: 39, column: 4 }, end: { line: 40, column: 19 } }], line: 32 }, "8": { loc: { start: { line: 44, column: 15 }, end: { line: 44, column: 27 } }, type: "default-arg", locations: [{ start: { line: 44, column: 23 }, end: { line: 44, column: 27 } }], line: 44 }, "9": { loc: { start: { line: 45, column: 2 }, end: { line: 49, column: 3 } }, type: "if", locations: [{ start: { line: 45, column: 2 }, end: { line: 49, column: 3 } }, { start: { line: 45, column: 2 }, end: { line: 49, column: 3 } }], line: 45 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0], "5": [0, 0, 0], "6": [0], "7": [0, 0, 0], "8": [0], "9": [0, 0] }, inputSourceMap: { version: 3, sources: ["lib/trace/reducers.js"], names: ["index", "finished", "steps", "actions", "state", "action", "type", "TOCK", "RESET", "END_OF_TRACE", "SAVE_STEPS", "info", "proc", "reducer"], mappings: ";;;;;QAIgBA,K,GAAAA,K;QAaAC,Q,GAAAA,Q;QAaAC,K,GAAAA,K;;AA9BhB;;AAEA;;IAAYC,O;;;;AAEL,SAASH,KAAT,CAAeI,QAAQ,CAAvB,EAA0BC,MAA1B,EAAkC;AACvC,UAAQA,OAAOC,IAAf;AACE,SAAKH,QAAQI,IAAb;AACE,aAAOH,QAAQ,CAAf;;AAEF,SAAKD,QAAQK,KAAb;AACE,aAAO,CAAP;;AAEF;AACE,aAAOJ,KAAP;AARJ;AAUD;;AAEM,SAASH,QAAT,CAAkBG,QAAQ,KAA1B,EAAiCC,MAAjC,EAAyC;AAC9C,UAAQA,OAAOC,IAAf;AACE,SAAKH,QAAQM,YAAb;AACE,aAAO,IAAP;;AAEF,SAAKN,QAAQK,KAAb;AACE,aAAO,KAAP;;AAEF;AACE,aAAOJ,KAAP;AARJ;AAUD;;AAEM,SAASF,KAAT,CAAeE,QAAQ,IAAvB,EAA6BC,MAA7B,EAAqC;AAC1C,MAAIA,OAAOC,IAAP,KAAgBH,QAAQO,UAA5B,EAAwC;AACtC,WAAOL,OAAOH,KAAd;AACD,GAFD,MAEO;AACL,WAAOE,KAAP;AACD;AACF;;AAED,MAAMO,OAAO,4BAAgB;AAC3BT;AAD2B,CAAhB,CAAb;;AAIA,MAAMU,OAAO,4BAAgB;AAC3BZ,OAD2B;AAE3BC;AAF2B,CAAhB,CAAb;;AAKA,MAAMY,UAAU,4BAAgB;AAC9BF,MAD8B;AAE9BC;AAF8B,CAAhB,CAAhB;;kBAKeC,O", file: "reducers.js", sourceRoot: "/Users/tyler/projects/truffle/packages/truffle-debugger", sourcesContent: ["import { combineReducers } from \"redux\";\n\nimport * as actions from \"./actions\";\n\nexport function index(state = 0, action) {\n  switch (action.type) {\n    case actions.TOCK:\n      return state + 1;\n\n    case actions.RESET:\n      return 0;\n\n    default:\n      return state;\n  }\n}\n\nexport function finished(state = false, action) {\n  switch (action.type) {\n    case actions.END_OF_TRACE:\n      return true;\n\n    case actions.RESET:\n      return false;\n\n    default:\n      return state;\n  }\n}\n\nexport function steps(state = null, action) {\n  if (action.type === actions.SAVE_STEPS) {\n    return action.steps;\n  } else {\n    return state;\n  }\n}\n\nconst info = combineReducers({\n  steps\n});\n\nconst proc = combineReducers({\n  index,\n  finished\n});\n\nconst reducer = combineReducers({\n  info,\n  proc\n});\n\nexport default reducer;\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_2nu11vehzm.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });cov_2nu11vehzm.s[1]++;exports.index = index;cov_2nu11vehzm.s[2]++;exports.finished = finished;cov_2nu11vehzm.s[3]++;exports.steps = steps;var _redux = (cov_2nu11vehzm.s[4]++, __webpack_require__(16));var _actions = (cov_2nu11vehzm.s[5]++, __webpack_require__(19));var actions = (cov_2nu11vehzm.s[6]++, _interopRequireWildcard(_actions));function _interopRequireWildcard(obj) {
  cov_2nu11vehzm.f[0]++;cov_2nu11vehzm.s[7]++;if ((cov_2nu11vehzm.b[1][0]++, obj) && (cov_2nu11vehzm.b[1][1]++, obj.__esModule)) {
    cov_2nu11vehzm.b[0][0]++;cov_2nu11vehzm.s[8]++;return obj;
  } else {
    cov_2nu11vehzm.b[0][1]++;var newObj = (cov_2nu11vehzm.s[9]++, {});cov_2nu11vehzm.s[10]++;if (obj != null) {
      cov_2nu11vehzm.b[2][0]++;cov_2nu11vehzm.s[11]++;for (var key in obj) {
        cov_2nu11vehzm.s[12]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_2nu11vehzm.b[3][0]++;cov_2nu11vehzm.s[13]++;newObj[key] = obj[key];
        } else {
          cov_2nu11vehzm.b[3][1]++;
        }
      }
    } else {
      cov_2nu11vehzm.b[2][1]++;
    }cov_2nu11vehzm.s[14]++;newObj.default = obj;cov_2nu11vehzm.s[15]++;return newObj;
  }
}function index(state = (cov_2nu11vehzm.b[4][0]++, 0), action) {
  cov_2nu11vehzm.f[1]++;cov_2nu11vehzm.s[16]++;switch (action.type) {case actions.TOCK:
      cov_2nu11vehzm.b[5][0]++;cov_2nu11vehzm.s[17]++;return state + 1;case actions.RESET:
      cov_2nu11vehzm.b[5][1]++;cov_2nu11vehzm.s[18]++;return 0;default:
      cov_2nu11vehzm.b[5][2]++;cov_2nu11vehzm.s[19]++;return state;}
}function finished(state = (cov_2nu11vehzm.b[6][0]++, false), action) {
  cov_2nu11vehzm.f[2]++;cov_2nu11vehzm.s[20]++;switch (action.type) {case actions.END_OF_TRACE:
      cov_2nu11vehzm.b[7][0]++;cov_2nu11vehzm.s[21]++;return true;case actions.RESET:
      cov_2nu11vehzm.b[7][1]++;cov_2nu11vehzm.s[22]++;return false;default:
      cov_2nu11vehzm.b[7][2]++;cov_2nu11vehzm.s[23]++;return state;}
}function steps(state = (cov_2nu11vehzm.b[8][0]++, null), action) {
  cov_2nu11vehzm.f[3]++;cov_2nu11vehzm.s[24]++;if (action.type === actions.SAVE_STEPS) {
    cov_2nu11vehzm.b[9][0]++;cov_2nu11vehzm.s[25]++;return action.steps;
  } else {
    cov_2nu11vehzm.b[9][1]++;cov_2nu11vehzm.s[26]++;return state;
  }
}const info = (cov_2nu11vehzm.s[27]++, (0, _redux.combineReducers)({ steps }));const proc = (cov_2nu11vehzm.s[28]++, (0, _redux.combineReducers)({ index, finished }));const reducer = (cov_2nu11vehzm.s[29]++, (0, _redux.combineReducers)({ info, proc }));cov_2nu11vehzm.s[30]++;exports.default = reducer;

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var cov_gr0lluryy = function () {
  var path = "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/controller/reducers.js",
      hash = "166bda9136f23153a271cc09fa184e19441c3528",
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = { path: "/Users/tyler/projects/truffle/packages/truffle-debugger/lib/controller/reducers.js", statementMap: { "0": { start: { line: 3, column: 0 }, end: { line: 5, column: 3 } }, "1": { start: { line: 7, column: 13 }, end: { line: 7, column: 29 } }, "2": { start: { line: 9, column: 14 }, end: { line: 9, column: 44 } }, "3": { start: { line: 11, column: 13 }, end: { line: 11, column: 29 } }, "4": { start: { line: 13, column: 15 }, end: { line: 13, column: 35 } }, "5": { start: { line: 15, column: 14 }, end: { line: 15, column: 47 } }, "6": { start: { line: 17, column: 40 }, end: { line: 17, column: 267 } }, "7": { start: { line: 17, column: 69 }, end: { line: 17, column: 80 } }, "8": { start: { line: 17, column: 103 }, end: { line: 17, column: 105 } }, "9": { start: { line: 17, column: 107 }, end: { line: 17, column: 228 } }, "10": { start: { line: 17, column: 126 }, end: { line: 17, column: 226 } }, "11": { start: { line: 17, column: 149 }, end: { line: 17, column: 224 } }, "12": { start: { line: 17, column: 201 }, end: { line: 17, column: 224 } }, "13": { start: { line: 17, column: 229 }, end: { line: 17, column: 250 } }, "14": { start: { line: 17, column: 251 }, end: { line: 17, column: 265 } }, "15": { start: { line: 19, column: 39 }, end: { line: 19, column: 93 } }, "16": { start: { line: 21, column: 14 }, end: { line: 21, column: 66 } }, "17": { start: { line: 24, column: 2 }, end: { line: 47, column: 3 } }, "18": { start: { line: 27, column: 6 }, end: { line: 34, column: 7 } }, "19": { start: { line: 27, column: 37 }, end: { line: 27, column: 179 } }, "20": { start: { line: 30, column: 8 }, end: { line: 30, column: 21 } }, "21": { start: { line: 33, column: 8 }, end: { line: 33, column: 49 } }, "22": { start: { line: 35, column: 6 }, end: { line: 35, column: 12 } }, "23": { start: { line: 38, column: 6 }, end: { line: 39, column: 8 } }, "24": { start: { line: 38, column: 40 }, end: { line: 38, column: 182 } }, "25": { start: { line: 40, column: 6 }, end: { line: 40, column: 12 } }, "26": { start: { line: 43, column: 6 }, end: { line: 43, column: 16 } }, "27": { start: { line: 46, column: 6 }, end: { line: 46, column: 19 } }, "28": { start: { line: 50, column: 16 }, end: { line: 52, column: 2 } }, "29": { start: { line: 54, column: 0 }, end: { line: 54, column: 26 } } }, fnMap: { "0": { name: "_interopRequireWildcard", decl: { start: { line: 17, column: 9 }, end: { line: 17, column: 32 } }, loc: { start: { line: 17, column: 38 }, end: { line: 17, column: 269 } }, line: 17 }, "1": { name: "_interopRequireDefault", decl: { start: { line: 19, column: 9 }, end: { line: 19, column: 31 } }, loc: { start: { line: 19, column: 37 }, end: { line: 19, column: 95 } }, line: 19 }, "2": { name: "breakpoints", decl: { start: { line: 23, column: 9 }, end: { line: 23, column: 20 } }, loc: { start: { line: 23, column: 41 }, end: { line: 48, column: 1 } }, line: 23 }, "3": { name: "(anonymous_3)", decl: { start: { line: 27, column: 23 }, end: { line: 27, column: 24 } }, loc: { start: { line: 27, column: 37 }, end: { line: 27, column: 179 } }, line: 27 }, "4": { name: "(anonymous_4)", decl: { start: { line: 38, column: 26 }, end: { line: 38, column: 27 } }, loc: { start: { line: 38, column: 40 }, end: { line: 38, column: 182 } }, line: 38 } }, branchMap: { "0": { loc: { start: { line: 17, column: 40 }, end: { line: 17, column: 267 } }, type: "if", locations: [{ start: { line: 17, column: 40 }, end: { line: 17, column: 267 } }, { start: { line: 17, column: 40 }, end: { line: 17, column: 267 } }], line: 17 }, "1": { loc: { start: { line: 17, column: 44 }, end: { line: 17, column: 65 } }, type: "binary-expr", locations: [{ start: { line: 17, column: 44 }, end: { line: 17, column: 47 } }, { start: { line: 17, column: 51 }, end: { line: 17, column: 65 } }], line: 17 }, "2": { loc: { start: { line: 17, column: 107 }, end: { line: 17, column: 228 } }, type: "if", locations: [{ start: { line: 17, column: 107 }, end: { line: 17, column: 228 } }, { start: { line: 17, column: 107 }, end: { line: 17, column: 228 } }], line: 17 }, "3": { loc: { start: { line: 17, column: 149 }, end: { line: 17, column: 224 } }, type: "if", locations: [{ start: { line: 17, column: 149 }, end: { line: 17, column: 224 } }, { start: { line: 17, column: 149 }, end: { line: 17, column: 224 } }], line: 17 }, "4": { loc: { start: { line: 19, column: 46 }, end: { line: 19, column: 92 } }, type: "cond-expr", locations: [{ start: { line: 19, column: 70 }, end: { line: 19, column: 73 } }, { start: { line: 19, column: 76 }, end: { line: 19, column: 92 } }], line: 19 }, "5": { loc: { start: { line: 19, column: 46 }, end: { line: 19, column: 67 } }, type: "binary-expr", locations: [{ start: { line: 19, column: 46 }, end: { line: 19, column: 49 } }, { start: { line: 19, column: 53 }, end: { line: 19, column: 67 } }], line: 19 }, "6": { loc: { start: { line: 23, column: 21 }, end: { line: 23, column: 31 } }, type: "default-arg", locations: [{ start: { line: 23, column: 29 }, end: { line: 23, column: 31 } }], line: 23 }, "7": { loc: { start: { line: 24, column: 2 }, end: { line: 47, column: 3 } }, type: "switch", locations: [{ start: { line: 25, column: 4 }, end: { line: 35, column: 12 } }, { start: { line: 37, column: 4 }, end: { line: 40, column: 12 } }, { start: { line: 42, column: 4 }, end: { line: 43, column: 16 } }, { start: { line: 45, column: 4 }, end: { line: 46, column: 19 } }], line: 24 }, "8": { loc: { start: { line: 27, column: 6 }, end: { line: 34, column: 7 } }, type: "if", locations: [{ start: { line: 27, column: 6 }, end: { line: 34, column: 7 } }, { start: { line: 27, column: 6 }, end: { line: 34, column: 7 } }], line: 27 }, "9": { loc: { start: { line: 27, column: 37 }, end: { line: 27, column: 179 } }, type: "binary-expr", locations: [{ start: { line: 27, column: 37 }, end: { line: 27, column: 87 } }, { start: { line: 27, column: 91 }, end: { line: 27, column: 133 } }, { start: { line: 27, column: 137 }, end: { line: 27, column: 179 } }], line: 27 }, "10": { loc: { start: { line: 38, column: 40 }, end: { line: 38, column: 182 } }, type: "binary-expr", locations: [{ start: { line: 38, column: 40 }, end: { line: 38, column: 90 } }, { start: { line: 38, column: 94 }, end: { line: 38, column: 136 } }, { start: { line: 38, column: 140 }, end: { line: 38, column: 182 } }], line: 38 } }, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0 }, f: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0 }, b: { "0": [0, 0], "1": [0, 0], "2": [0, 0], "3": [0, 0], "4": [0, 0], "5": [0, 0], "6": [0], "7": [0, 0, 0, 0], "8": [0, 0], "9": [0, 0, 0], "10": [0, 0, 0] }, inputSourceMap: { version: 3, sources: ["lib/controller/reducers.js"], names: ["actions", "debug", "breakpoints", "state", "action", "type", "ADD_BREAKPOINT", "filter", "breakpoint", "sourceId", "line", "node", "length", "concat", "REMOVE_BREAKPOINT", "REMOVE_ALL_BREAKPOINTS", "reducer"], mappings: ";;;;;;AAAA;;;;AAGA;;AAEA;;IAAYA,O;;;;;;AAJZ,MAAMC,QAAQ,qBAAY,8BAAZ,CAAd,C,CAA2D;;AAM3D,SAASC,WAAT,CAAqBC,QAAQ,EAA7B,EAAiCC,MAAjC,EAAyC;AACvC,UAAQA,OAAOC,IAAf;AACE,SAAKL,QAAQM,cAAb;AACE;AACA,UACEH,MAAMI,MAAN,CACEC,cACEA,WAAWC,QAAX,KAAwBL,OAAOI,UAAP,CAAkBC,QAA1C,IACAD,WAAWE,IAAX,KAAoBN,OAAOI,UAAP,CAAkBE,IADtC,IAEAF,WAAWG,IAAX,KAAoBP,OAAOI,UAAP,CAAkBG,IAJ1C,CAI+C;AAJ/C,QAKEC,MALF,GAKW,CANb,EAOE;AACA;AACA,eAAOT,KAAP;AACD,OAVD,MAUO;AACL;AACA,eAAOA,MAAMU,MAAN,CAAa,CAACT,OAAOI,UAAR,CAAb,CAAP;AACD;AACD;;AAEF,SAAKR,QAAQc,iBAAb;AACE,aAAOX,MAAMI,MAAN,CACLC,cACEA,WAAWC,QAAX,KAAwBL,OAAOI,UAAP,CAAkBC,QAA1C,IACAD,WAAWE,IAAX,KAAoBN,OAAOI,UAAP,CAAkBE,IADtC,IAEAF,WAAWG,IAAX,KAAoBP,OAAOI,UAAP,CAAkBG,IAJnC,CAIwC;AAJxC,OAAP;AAMA;;AAEF,SAAKX,QAAQe,sBAAb;AACE,aAAO,EAAP;;AAEF;AACE,aAAOZ,KAAP;AAhCJ;AAkCD;;AAED,MAAMa,UAAU,4BAAgB;AAC9Bd;AAD8B,CAAhB,CAAhB;;kBAIec,O", file: "reducers.js", sourceRoot: "/Users/tyler/projects/truffle/packages/truffle-debugger", sourcesContent: ["import debugModule from \"debug\";\nconst debug = debugModule(\"debugger:controller:reducers\"); //eslint-disable-line no-unused-vars\n\nimport { combineReducers } from \"redux\";\n\nimport * as actions from \"./actions\";\n\nfunction breakpoints(state = [], action) {\n  switch (action.type) {\n    case actions.ADD_BREAKPOINT:\n      //check for any existing identical breakpoints to avoid redundancy\n      if (\n        state.filter(\n          breakpoint =>\n            breakpoint.sourceId === action.breakpoint.sourceId &&\n            breakpoint.line === action.breakpoint.line &&\n            breakpoint.node === action.breakpoint.node //may be undefined\n        ).length > 0\n      ) {\n        //if it's already there, do nothing\n        return state;\n      } else {\n        //otherwise add it\n        return state.concat([action.breakpoint]);\n      }\n      break;\n\n    case actions.REMOVE_BREAKPOINT:\n      return state.filter(\n        breakpoint =>\n          breakpoint.sourceId !== action.breakpoint.sourceId ||\n          breakpoint.line !== action.breakpoint.line ||\n          breakpoint.node !== action.breakpoint.node //may be undefined\n      );\n      break;\n\n    case actions.REMOVE_ALL_BREAKPOINTS:\n      return [];\n\n    default:\n      return state;\n  }\n}\n\nconst reducer = combineReducers({\n  breakpoints\n});\n\nexport default reducer;\n"] }, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },
      coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }coverageData.hash = hash;return coverage[path] = coverageData;
}();cov_gr0lluryy.s[0]++;Object.defineProperty(exports, "__esModule", { value: true });var _debug = (cov_gr0lluryy.s[1]++, __webpack_require__(0));var _debug2 = (cov_gr0lluryy.s[2]++, _interopRequireDefault(_debug));var _redux = (cov_gr0lluryy.s[3]++, __webpack_require__(16));var _actions = (cov_gr0lluryy.s[4]++, __webpack_require__(27));var actions = (cov_gr0lluryy.s[5]++, _interopRequireWildcard(_actions));function _interopRequireWildcard(obj) {
  cov_gr0lluryy.f[0]++;cov_gr0lluryy.s[6]++;if ((cov_gr0lluryy.b[1][0]++, obj) && (cov_gr0lluryy.b[1][1]++, obj.__esModule)) {
    cov_gr0lluryy.b[0][0]++;cov_gr0lluryy.s[7]++;return obj;
  } else {
    cov_gr0lluryy.b[0][1]++;var newObj = (cov_gr0lluryy.s[8]++, {});cov_gr0lluryy.s[9]++;if (obj != null) {
      cov_gr0lluryy.b[2][0]++;cov_gr0lluryy.s[10]++;for (var key in obj) {
        cov_gr0lluryy.s[11]++;if (Object.prototype.hasOwnProperty.call(obj, key)) {
          cov_gr0lluryy.b[3][0]++;cov_gr0lluryy.s[12]++;newObj[key] = obj[key];
        } else {
          cov_gr0lluryy.b[3][1]++;
        }
      }
    } else {
      cov_gr0lluryy.b[2][1]++;
    }cov_gr0lluryy.s[13]++;newObj.default = obj;cov_gr0lluryy.s[14]++;return newObj;
  }
}function _interopRequireDefault(obj) {
  cov_gr0lluryy.f[1]++;cov_gr0lluryy.s[15]++;return (cov_gr0lluryy.b[5][0]++, obj) && (cov_gr0lluryy.b[5][1]++, obj.__esModule) ? (cov_gr0lluryy.b[4][0]++, obj) : (cov_gr0lluryy.b[4][1]++, { default: obj });
}const debug = (cov_gr0lluryy.s[16]++, (0, _debug2.default)("debugger:controller:reducers"));function breakpoints(state = (cov_gr0lluryy.b[6][0]++, []), action) {
  cov_gr0lluryy.f[2]++;cov_gr0lluryy.s[17]++;switch (action.type) {case actions.ADD_BREAKPOINT:
      cov_gr0lluryy.b[7][0]++;cov_gr0lluryy.s[18]++;if (state.filter(breakpoint => {
        cov_gr0lluryy.f[3]++;cov_gr0lluryy.s[19]++;return (cov_gr0lluryy.b[9][0]++, breakpoint.sourceId === action.breakpoint.sourceId) && (cov_gr0lluryy.b[9][1]++, breakpoint.line === action.breakpoint.line) && (cov_gr0lluryy.b[9][2]++, breakpoint.node === action.breakpoint.node);
      }).length > 0) {
        cov_gr0lluryy.b[8][0]++;cov_gr0lluryy.s[20]++;return state;
      } else {
        cov_gr0lluryy.b[8][1]++;cov_gr0lluryy.s[21]++;return state.concat([action.breakpoint]);
      }cov_gr0lluryy.s[22]++;break;case actions.REMOVE_BREAKPOINT:
      cov_gr0lluryy.b[7][1]++;cov_gr0lluryy.s[23]++;return state.filter(breakpoint => {
        cov_gr0lluryy.f[4]++;cov_gr0lluryy.s[24]++;return (cov_gr0lluryy.b[10][0]++, breakpoint.sourceId !== action.breakpoint.sourceId) || (cov_gr0lluryy.b[10][1]++, breakpoint.line !== action.breakpoint.line) || (cov_gr0lluryy.b[10][2]++, breakpoint.node !== action.breakpoint.node);
      });cov_gr0lluryy.s[25]++;break;case actions.REMOVE_ALL_BREAKPOINTS:
      cov_gr0lluryy.b[7][2]++;cov_gr0lluryy.s[26]++;return [];default:
      cov_gr0lluryy.b[7][3]++;cov_gr0lluryy.s[27]++;return state;}
}const reducer = (cov_gr0lluryy.s[28]++, (0, _redux.combineReducers)({ breakpoints }));cov_gr0lluryy.s[29]++;exports.default = reducer;

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _keys = __webpack_require__(17);

var _keys2 = _interopRequireDefault(_keys);

var _asyncToGenerator2 = __webpack_require__(1);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _chai = __webpack_require__(4);

var _ganacheCore = __webpack_require__(6);

var _ganacheCore2 = _interopRequireDefault(_ganacheCore);

var _helpers = __webpack_require__(5);

var _debugger = __webpack_require__(7);

var _debugger2 = _interopRequireDefault(_debugger);

var _selectors = __webpack_require__(29);

var _selectors2 = _interopRequireDefault(_selectors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("test:context");

const __OUTER = `
pragma solidity ~0.5;

import "./InnerContract.sol";

contract OuterContract {
  event Outer();

  InnerContract inner;

  constructor(address _inner) public {
    inner = InnerContract(_inner);
  }

  function run() public {
    inner.run();

    emit Outer();
  }
}
`;

const __INNER = `
pragma solidity ~0.5;

contract InnerContract {
  event Inner();

  function run() public {
    emit Inner();
  }
}
`;

const __MIGRATION = `
let OuterContract = artifacts.require("OuterContract");
let InnerContract = artifacts.require("InnerContract");

module.exports = function(deployer) {
  return deployer
    .then(function() {
      return deployer.deploy(InnerContract);
    })
    .then(function() {
      return InnerContract.deployed();
    })
    .then(function(inner) {
      return deployer.deploy(OuterContract, inner.address);
    });
};
`;

let migrations = {
  "2_deploy_contracts.js": __MIGRATION
};

let sources = {
  "OuterLibrary.sol": __OUTER,
  "InnerContract.sol": __INNER
};

describe("Contexts", function () {
  var provider;

  var abstractions;
  var artifacts;
  var files;

  before("Create Provider", (0, _asyncToGenerator3.default)(function* () {
    provider = _ganacheCore2.default.provider({ seed: "debugger", gasLimit: 7000000 });
  }));

  before("Prepare contracts and artifacts", (0, _asyncToGenerator3.default)(function* () {
    this.timeout(30000);

    let prepared = yield (0, _helpers.prepareContracts)(provider, sources, migrations);
    abstractions = prepared.abstractions;
    artifacts = prepared.artifacts;
    files = prepared.files;
  }));

  it("returns view of addresses affected", (0, _asyncToGenerator3.default)(function* () {
    let outer = yield abstractions.OuterContract.deployed();
    let inner = yield abstractions.InnerContract.deployed();

    // run outer contract method
    let result = yield outer.run();

    _chai.assert.equal(2, result.receipt.rawLogs.length, "There should be two logs");

    let txHash = result.tx;

    let bugger = yield _debugger2.default.forTx(txHash, {
      provider,
      files,
      contracts: artifacts
    });
    debug("debugger ready");

    let session = bugger.connect();

    let affectedInstances = session.view(_selectors2.default.info.affectedInstances);
    debug("affectedInstances: %o", affectedInstances);

    let affectedAddresses = (0, _keys2.default)(affectedInstances).map(function (address) {
      return address.toLowerCase();
    });

    _chai.assert.equal(2, affectedAddresses.length);

    _chai.assert.include(affectedAddresses, outer.address.toLowerCase(), "OuterContract should be an affected address");

    _chai.assert.include(affectedAddresses, inner.address.toLowerCase(), "InnerContract should be an affected address");
  }));
});

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _entries = __webpack_require__(8);

var _entries2 = _interopRequireDefault(_entries);

var _stringify = __webpack_require__(83);

var _stringify2 = _interopRequireDefault(_stringify);

var _assign = __webpack_require__(9);

var _assign2 = _interopRequireDefault(_assign);

var _extends2 = __webpack_require__(12);

var _extends3 = _interopRequireDefault(_extends2);

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _faker = __webpack_require__(84);

var _faker2 = _interopRequireDefault(_faker);

var _selectors = __webpack_require__(10);

var _selectors2 = _interopRequireDefault(_selectors);

var _helpers = __webpack_require__(39);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("test:data:decode");

const uints = (0, _helpers.generateUints)();

function generateArray(length) {
  return [...Array(length)].map(() => uints.next().value);
}

const commonFixtures = [{
  name: "multipleFullWordArray",
  type: "uint[]",
  value: generateArray(3) // takes up 3 whole words
}, {
  name: "withinWordArray",
  type: "uint16[]",
  value: generateArray(10) // takes up >1/2 word
}, {
  name: "multiplePartWordArray",
  type: "uint64[]",
  value: generateArray(9) // takes up 2.25 words
}, {
  name: "inconvenientlyWordOffsetArray",
  type: "uint240[]",
  value: generateArray(3) // takes up ~2.8 words
}, {
  name: "shortString",
  type: "string",
  value: "hello world"
}, {
  name: "longString",
  type: "string",
  value: "solidity allocation is a fun lesson in endianness"
}];

const mappingFixtures = [{
  name: "simpleMapping",
  type: {
    from: "uint256",
    to: "uint256"
  },
  value: (0, _extends3.default)({}, (0, _assign2.default)({}, ...generateArray(5).map((value, idx) => ({ [idx]: value }))))
}, {
  name: "numberedStrings",
  type: {
    from: "uint256",
    to: "string"
  },
  value: (0, _extends3.default)({}, (0, _assign2.default)({}, ...generateArray(7).map((value, idx) => ({
    [value]: _faker2.default.lorem.slug(idx)
  }))))
}, {
  name: "stringsToStrings",
  type: {
    from: "string",
    to: "string"
  },
  value: (0, _extends3.default)({}, (0, _assign2.default)({}, ...[0, 1, 2, 3, 4].map(idx => ({
    [_faker2.default.lorem.slug(idx)]: _faker2.default.lorem.slug(idx)
  }))))
}];

debug("mappingFixtures %O", mappingFixtures);

describe("Decoding", function () {
  /*
   * Storage Tests
   */
  (0, _helpers.describeDecoding)("Storage Variables", commonFixtures, _selectors2.default.current.state.storage, (contractName, fixtures) => {
    return `pragma solidity ~0.5;

contract ${contractName} {

  event Done();

  // declarations
  ${fixtures.map(({ type, name }) => `${type} ${name};`).join("\n  ")}

  function run() public {
    ${fixtures.map(({ name, value }) => `${name} = ${(0, _stringify2.default)(value)};`).join("\n    ")}

    emit Done();
  }
}
`;
  });

  (0, _helpers.describeDecoding)("Mapping Variables", mappingFixtures, _selectors2.default.current.state.storage, (contractName, fixtures) => {
    return `pragma solidity ~0.5;

contract ${contractName} {
  event Done();

  // declarations
  ${fixtures.map(({ name, type: { from, to } }) => `mapping (${from} => ${to}) ${name};`).join("\n  ")}

  function run() public {
    ${fixtures.map(({ name, type: { from }, value }) => (0, _entries2.default)(value).map(([k, v]) => from === "string" ? `${name}["${k}"] = ${(0, _stringify2.default)(v)};` : `${name}[${k}] = ${(0, _stringify2.default)(v)};`).join("\n    ")).join("\n\n    ")}

    emit Done();
  }
}
`;
  });

  /*
   * Memory Tests
   */
  (0, _helpers.describeDecoding)("Memory Variables", commonFixtures, _selectors2.default.current.state.memory, (contractName, fixtures) => {
    const separator = ";\n    ";

    function declareAssign({ name, type, value }) {
      if (type.indexOf("[]") != -1) {
        // array, must `new`
        let declare = `${type} memory ${name} = new ${type}(${value.length})`;
        let assigns = value.map((k, i) => `${name}[${i}] = ${k}`);
        return `${declare}${separator}${assigns.join(separator)}`;
      } else {
        return `${type} memory ${name} = ${(0, _stringify2.default)(value)}`;
      }
    }

    return `pragma solidity ~0.5;

contract ${contractName} {

  event Done();

  function run() public {
    uint i;
    // declarations
    ${fixtures.map(declareAssign).join(separator)};

    emit Done();
  }
}
`;
  });
});

/***/ }),
/* 83 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/core-js/json/stringify");

/***/ }),
/* 84 */
/***/ (function(module, exports) {

module.exports = require("faker");

/***/ }),
/* 85 */
/***/ (function(module, exports) {

module.exports = require("change-case");

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _asyncToGenerator2 = __webpack_require__(1);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _chai = __webpack_require__(4);

var _ganacheCore = __webpack_require__(6);

var _ganacheCore2 = _interopRequireDefault(_ganacheCore);

var _helpers = __webpack_require__(5);

var _debugger = __webpack_require__(7);

var _debugger2 = _interopRequireDefault(_debugger);

var _selectors = __webpack_require__(11);

var _selectors2 = _interopRequireDefault(_selectors);

var _selectors3 = __webpack_require__(3);

var _selectors4 = _interopRequireDefault(_selectors3);

var _truffleDecodeUtils = __webpack_require__(14);

var TruffleDecodeUtils = _interopRequireWildcard(_truffleDecodeUtils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("test:data:ids");

const __FACTORIAL = `
pragma solidity ^0.5.0;

contract FactorialTest {

  uint lastResult;

  function factorial(uint n) public returns(uint nbang)
  {
    uint prev;
    uint prevFac;
    nbang = n;
    prev = n - 1; //break here (12)
    if(n>0)
    {
      prevFac = factorial(n - 1);
      nbang = n * prevFac;
    }
    else
    {
      nbang = 1;
    }
    lastResult = nbang; //break here (22)
  }
}
`;

const __ADDRESS = `
pragma solidity ^0.5.0;

contract AddressTest {

  uint8 x;
  uint8 y;
  uint8 result;

  function run() public
  {
    SecretByte test1 = new SecretByte(107);
    SecretByte test2 = new SecretByte(46);
    x = test1.mangle();
    y = test2.mangle();
  }
}

contract SecretByte {

  uint8 private secret;

  constructor(uint8 n) public
  {
    secret = n;
  }

  function mangle() public view returns (uint8)
  {
    uint8 mangled;
    mangled = secret + 1;

    return mangled; //break here (32)

  }
}
`;

const __INTERVENING = `
pragma solidity ^0.5.0;

import "./InterveningLib.sol";

contract Intervening {

  Inner inner;

  constructor(address _inner) public {
    inner = Inner(_inner);
  }

  function run() public {
    uint8 flag;
    flag = 0;
    inner.run();

    flag = 1; //break here (18)

  }

  function runLib() public {
    uint8 flag;
    flag = 0;
    flag = InterveningLib.run();

    flag = 1; //break here (27)

  }
}

contract Inner {

  uint8 flag;

  constructor() public {
    flag = 0;
  }

  function run() public returns (uint8) {
    flag = 1;
    return 2;
  }
}

`;

const __INTERVENINGLIB = `
pragma solidity ^0.5.0;

library InterveningLib {

  function run() pure external returns (uint8) {
    return 2;
  }
}
`;

const __MIGRATION = `
let Intervening = artifacts.require("Intervening");
let Inner = artifacts.require("Inner");
let AddressTest = artifacts.require("AddressTest");
let FactorialTest = artifacts.require("FactorialTest");
let InterveningLib = artifacts.require("InterveningLib");

module.exports = async function(deployer) {
  await deployer.deploy(InterveningLib);
  await deployer.deploy(Inner);
  const inner = await Inner.deployed();
  await deployer.link(InterveningLib, Intervening);
  await deployer.deploy(Intervening, inner.address);
  await deployer.deploy(AddressTest);
  await deployer.deploy(FactorialTest);
};
`;

let sources = {
  "FactorialTest.sol": __FACTORIAL,
  "AddressTest.sol": __ADDRESS,
  "Intervening.sol": __INTERVENING,
  "InterveningLib.sol": __INTERVENINGLIB
};

let migrations = {
  "2_deploy_contracts.js": __MIGRATION
};

describe("Variable IDs", function () {
  var provider;

  var abstractions;
  var artifacts;
  var files;

  before("Create Provider", (0, _asyncToGenerator3.default)(function* () {
    provider = _ganacheCore2.default.provider({ seed: "debugger", gasLimit: 7000000 });
  }));

  before("Prepare contracts and artifacts", (0, _asyncToGenerator3.default)(function* () {
    this.timeout(30000);

    let prepared = yield (0, _helpers.prepareContracts)(provider, sources, migrations);
    abstractions = prepared.abstractions;
    artifacts = prepared.artifacts;
    files = prepared.files;
  }));

  it("Distinguishes between stackframes", (0, _asyncToGenerator3.default)(function* () {
    let instance = yield abstractions.FactorialTest.deployed();
    let receipt = yield instance.factorial(3);
    let txHash = receipt.tx;

    let bugger = yield _debugger2.default.forTx(txHash, {
      provider,
      files,
      contracts: artifacts
    });

    let session = bugger.connect();
    debug("sourceId %d", session.view(_selectors4.default.current.source).id);

    let sourceId = session.view(_selectors4.default.current.source).id;
    session.addBreakpoint({ sourceId, line: 12 });
    session.addBreakpoint({ sourceId, line: 22 });

    var values = [];

    session.continueUntilBreakpoint();
    while (!session.view(_selectors2.default.finished)) {
      values.push((yield session.variable("nbang")));
      session.continueUntilBreakpoint();
    }

    _chai.assert.deepEqual(TruffleDecodeUtils.Conversion.cleanBNs(values), ["3", "2", "1", "0", "1", "1", "2", "6"]);
  }));

  it("Learns contract addresses and distinguishes the results", (0, _asyncToGenerator3.default)(function* () {
    this.timeout(30000);
    let instance = yield abstractions.AddressTest.deployed();
    let receipt = yield instance.run();
    let txHash = receipt.tx;

    let bugger = yield _debugger2.default.forTx(txHash, {
      provider,
      files,
      contracts: artifacts
    });

    let session = bugger.connect();
    debug("sourceId %d", session.view(_selectors4.default.current.source).id);

    let sourceId = session.view(_selectors4.default.current.source).id;
    session.addBreakpoint({ sourceId, line: 32 });
    session.continueUntilBreakpoint();
    debug("node %o", session.view(_selectors4.default.current.node));
    _chai.assert.equal(TruffleDecodeUtils.Conversion.cleanBNs((yield session.variable("secret"))), "107");
    session.continueUntilBreakpoint();
    debug("node %o", session.view(_selectors4.default.current.node));
    _chai.assert.equal(TruffleDecodeUtils.Conversion.cleanBNs((yield session.variable("secret"))), "46");
  }));

  it("Stays at correct stackframe after contract call", (0, _asyncToGenerator3.default)(function* () {
    let instance = yield abstractions.Intervening.deployed();
    let receipt = yield instance.run();
    let txHash = receipt.tx;

    let bugger = yield _debugger2.default.forTx(txHash, {
      provider,
      files,
      contracts: artifacts
    });

    let session = bugger.connect();
    debug("sourceId %d", session.view(_selectors4.default.current.source).id);

    let sourceId = session.view(_selectors4.default.current.source).id;
    session.addBreakpoint({ sourceId, line: 18 });
    session.continueUntilBreakpoint();
    _chai.assert.property((yield session.variables()), "flag");
  }));

  it("Stays at correct stackframe after library call", (0, _asyncToGenerator3.default)(function* () {
    let instance = yield abstractions.Intervening.deployed();
    let receipt = yield instance.runLib();
    let txHash = receipt.tx;

    let bugger = yield _debugger2.default.forTx(txHash, {
      provider,
      files,
      contracts: artifacts
    });

    let session = bugger.connect();
    debug("sourceId %d", session.view(_selectors4.default.current.source).id);

    let sourceId = session.view(_selectors4.default.current.source).id;
    session.addBreakpoint({ sourceId, line: 27 });
    session.continueUntilBreakpoint();
    _chai.assert.property((yield session.variables()), "flag");
  }));
});

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _chai = __webpack_require__(4);

var _bn = __webpack_require__(40);

var _bn2 = _interopRequireDefault(_bn);

var _truffleDecodeUtils = __webpack_require__(14);

var TruffleDecodeUtils = _interopRequireWildcard(_truffleDecodeUtils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe("Utils", function () {
  describe("typeClass()", function () {
    it("handles mappings", function () {
      let definition = {
        typeDescriptions: {
          typeIdentifier: "t_mapping$_t_uint256_$_t_uint256_$"
        }
      };

      _chai.assert.equal(TruffleDecodeUtils.Definition.typeClass(definition), "mapping");
    });
  });

  describe("toBN()", function () {
    it("returns correct value", function () {
      let bytes = [0xf5, 0xe2, 0xc5, 0x17];
      let expectedValue = new _bn2.default("f5e2c517", 16);

      let result = TruffleDecodeUtils.Conversion.toBN(bytes);

      _chai.assert.equal(result.toString(), expectedValue.toString());
    });
  });

  describe("toSignedBN()", function () {
    it("returns correct negative value", function () {
      let bytes = [0xf5, 0xe2, 0xc5, 0x17]; // starts with 0b1
      let raw = new _bn2.default("f5e2c517", 16);
      let bitfipped = new _bn2.default(raw.toString(2).replace(/0/g, "x").replace(/1/g, "0").replace(/x/g, "1"), 2);

      let expectedValue = bitfipped.addn(1).neg();

      let result = TruffleDecodeUtils.Conversion.toSignedBN(bytes);

      _chai.assert.equal(result.toString(), expectedValue.toString());
    });

    it("returns correct positive value", function () {
      let bytes = [0x05, 0xe2, 0xc5, 0x17]; // starts with 0b0
      let raw = new _bn2.default("05e2c517", 16);
      let expectedValue = raw;

      let result = TruffleDecodeUtils.Conversion.toSignedBN(bytes);

      _chai.assert.equal(result.toString(), expectedValue.toString());
    });
  });

  describe("toHexString()", function () {
    it("returns correct representation with full bytes", function () {
      // ie, 0x00 instead of 0x0
      _chai.assert.equal(TruffleDecodeUtils.Conversion.toHexString([0x05, 0x11]), "0x0511");
      _chai.assert.equal(TruffleDecodeUtils.Conversion.toHexString([0xff, 0x00, 0xff]), "0xff00ff");
    });

    it("allows removing leading zeroes", function () {
      _chai.assert.equal(TruffleDecodeUtils.Conversion.toHexString([0x00, 0x00, 0xcc], true), "0xcc");
    });
  });
});

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _asyncToGenerator2 = __webpack_require__(1);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _chai = __webpack_require__(4);

var _ganacheCore = __webpack_require__(6);

var _ganacheCore2 = _interopRequireDefault(_ganacheCore);

var _helpers = __webpack_require__(5);

var _debugger = __webpack_require__(7);

var _debugger2 = _interopRequireDefault(_debugger);

var _selectors = __webpack_require__(29);

var _selectors2 = _interopRequireDefault(_selectors);

var _selectors3 = __webpack_require__(22);

var _selectors4 = _interopRequireDefault(_selectors3);

var _truffleDecodeUtils = __webpack_require__(14);

var TruffleDecodeUtils = _interopRequireWildcard(_truffleDecodeUtils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("test:endstate"); // eslint-disable-line no-unused-vars

const __FAILURE = `
pragma solidity ~0.5;

contract FailureTest {
  function run() public {
    revert();
  }
}
`;

const __SUCCESS = `
pragma solidity ~0.5;

contract SuccessTest {
uint x;
  function run() public {
    x = 107;
  }
}
`;

let sources = {
  "FailureTest.sol": __FAILURE,
  "SuccessTest.sol": __SUCCESS
};

describe("End State", function () {
  var provider;

  var abstractions;
  var artifacts;
  var files;

  before("Create Provider", (0, _asyncToGenerator3.default)(function* () {
    provider = _ganacheCore2.default.provider({ seed: "debugger", gasLimit: 7000000 });
  }));

  before("Prepare contracts and artifacts", (0, _asyncToGenerator3.default)(function* () {
    this.timeout(30000);

    let prepared = yield (0, _helpers.prepareContracts)(provider, sources);
    abstractions = prepared.abstractions;
    artifacts = prepared.artifacts;
    files = prepared.files;
  }));

  it("correctly marks a failed transaction as failed", (0, _asyncToGenerator3.default)(function* () {
    let instance = yield abstractions.FailureTest.deployed();
    //HACK: because this transaction fails, we have to extract the hash from
    //the resulting exception (there is supposed to be a non-hacky way but it
    //does not presently work)
    let txHash;
    try {
      yield instance.run(); //this will throw because of the revert
    } catch (error) {
      txHash = error.hashes[0]; //it's the only hash involved
    }

    let bugger = yield _debugger2.default.forTx(txHash, {
      provider,
      files,
      contracts: artifacts
    });

    let session = bugger.connect();

    _chai.assert.ok(!session.view(_selectors2.default.transaction.receipt).status);
  }));

  it("Gets vars at end of successful contract (and marks it successful)", (0, _asyncToGenerator3.default)(function* () {
    let instance = yield abstractions.SuccessTest.deployed();
    let receipt = yield instance.run();
    let txHash = receipt.tx;

    let bugger = yield _debugger2.default.forTx(txHash, {
      provider,
      files,
      contracts: artifacts
    });

    let session = bugger.connect();

    session.continueUntilBreakpoint(); //no breakpoints set so advances to end

    debug("DCI %O", session.view(_selectors4.default.current.identifiers));
    debug("DCIR %O", session.view(_selectors4.default.current.identifiers.refs));
    debug("DCIN %O", session.view(_selectors4.default.current.identifiers.native));
    debug("proc.assignments %O", session.view(_selectors4.default.proc.assignments));

    _chai.assert.ok(session.view(_selectors2.default.transaction.receipt).status);
    const variables = TruffleDecodeUtils.Conversion.cleanBNs((yield session.variables()));
    _chai.assert.deepEqual(variables, { x: "107" });
  }));
});

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _asyncToGenerator2 = __webpack_require__(1);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _chai = __webpack_require__(4);

var _ganacheCore = __webpack_require__(6);

var _ganacheCore2 = _interopRequireDefault(_ganacheCore);

var _helpers = __webpack_require__(5);

var _debugger = __webpack_require__(7);

var _debugger2 = _interopRequireDefault(_debugger);

var _selectors = __webpack_require__(10);

var _selectors2 = _interopRequireDefault(_selectors);

var _selectors3 = __webpack_require__(11);

var _selectors4 = _interopRequireDefault(_selectors3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("test:evm"); // eslint-disable-line no-unused-vars

const __OUTER = `
pragma solidity ~0.5;

import "./Inner.sol";

contract Outer {
  event Called();

  Inner inner;

  constructor(address _inner) public {
    inner = Inner(_inner);
  }

  function runSingle() public {
  }

  function run() public {
    inner.run();
  }
}
`;

const __INNER = `
pragma solidity ~0.5;

contract Inner {
  function run() public {
  }
}
`;

const __MIGRATION = `
let Outer = artifacts.require("Outer");
let Inner = artifacts.require("Inner");

module.exports = async function(deployer) {
  await deployer.deploy(Inner);
  const inner = await Inner.deployed();
  await deployer.deploy(Outer, inner.address);
};
`;

let sources = {
  "Inner.sol": __INNER,
  "Outer.sol": __OUTER
};

let migrations = {
  "2_deploy_contracts.js": __MIGRATION
};

describe("EVM Debugging", function () {
  var provider;

  var abstractions;
  var artifacts;
  var files;

  before("Create Provider", (0, _asyncToGenerator3.default)(function* () {
    provider = _ganacheCore2.default.provider({ seed: "debugger", gasLimit: 7000000 });
  }));

  before("Prepare contracts and artifacts", (0, _asyncToGenerator3.default)(function* () {
    this.timeout(30000);

    let prepared = yield (0, _helpers.prepareContracts)(provider, sources, migrations);
    abstractions = prepared.abstractions;
    artifacts = prepared.artifacts;
    files = prepared.files;
  }));

  describe("Function Depth", function () {
    it("remains at 1 in absence of cross-contract calls", (0, _asyncToGenerator3.default)(function* () {
      const maxExpected = 1;

      let instance = yield abstractions.Inner.deployed();
      let receipt = yield instance.run();
      let txHash = receipt.tx;

      let bugger = yield _debugger2.default.forTx(txHash, {
        provider,
        files,
        contracts: artifacts
      });

      let session = bugger.connect();
      var finished; // is the trace finished?

      do {
        session.stepNext();
        finished = session.view(_selectors4.default.finished);

        let actual = session.view(_selectors2.default.current.callstack).length;

        _chai.assert.isAtMost(actual, maxExpected);
      } while (!finished);
    }));

    it("tracks callstack correctly", (0, _asyncToGenerator3.default)(function* () {
      // prepare
      let instance = yield abstractions.Outer.deployed();
      let receipt = yield instance.run();
      let txHash = receipt.tx;

      let bugger = yield _debugger2.default.forTx(txHash, {
        provider,
        files,
        contracts: artifacts
      });

      let session = bugger.connect();

      // follow callstack length values in list
      // see source above
      let expectedDepthSequence = [1, 2, 1];
      let actualSequence = [session.view(_selectors2.default.current.callstack).length];

      var finished; // is the trace finished?

      do {
        session.stepNext();
        finished = session.view(_selectors4.default.finished);

        let currentDepth = session.view(_selectors2.default.current.callstack).length;
        let lastKnown = actualSequence[actualSequence.length - 1];

        if (currentDepth !== lastKnown) {
          actualSequence.push(currentDepth);
        }
      } while (!finished);

      _chai.assert.deepEqual(actualSequence, expectedDepthSequence);
    }));
  });
});

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _asyncToGenerator2 = __webpack_require__(1);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _chai = __webpack_require__(4);

var _ganacheCore = __webpack_require__(6);

var _ganacheCore2 = _interopRequireDefault(_ganacheCore);

var _helpers = __webpack_require__(5);

var _debugger = __webpack_require__(7);

var _debugger2 = _interopRequireDefault(_debugger);

var _selectors = __webpack_require__(10);

var _selectors2 = _interopRequireDefault(_selectors);

var _selectors3 = __webpack_require__(11);

var _selectors4 = _interopRequireDefault(_selectors3);

var _selectors5 = __webpack_require__(3);

var _selectors6 = _interopRequireDefault(_selectors5);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("test:precompiles"); // eslint-disable-line no-unused-vars

const __PRECOMPILE = `
pragma solidity ~0.5;

contract HasPrecompile {
  event Called();

  function run() public {
    sha256("hello world");

    emit Called();
  }
}
`;

let sources = {
  "HasPrecompile.sol": __PRECOMPILE
};

const TEST_CASES = [{
  name: "trace.step",
  selector: _selectors4.default.step
}, {
  name: "evm.current.context",
  selector: _selectors2.default.current.context
}, {
  name: "solidity.current.sourceRange",
  selector: _selectors6.default.current.sourceRange
}];

describe("Precompiled Contracts", () => {
  let provider;

  let abstractions;
  let artifacts;
  let files;

  // object where key is selector name, value is list of results at step
  let results = {};

  before("Create Provider", (0, _asyncToGenerator3.default)(function* () {
    provider = _ganacheCore2.default.provider({ seed: "debugger", gasLimit: 7000000 });
  }));

  before("Prepare contracts and artifacts", (0, _asyncToGenerator3.default)(function* () {
    this.timeout(30000);

    let prepared = yield (0, _helpers.prepareContracts)(provider, sources);
    abstractions = prepared.abstractions;
    artifacts = prepared.artifacts;
    files = prepared.files;
  }));

  before("Initialize results", () => {
    // initialize results as mapping of selector to step results list
    for (let _ref3 of TEST_CASES) {
      let { name } = _ref3;

      results[name] = [];
    }
  });

  before("Step through debugger", (0, _asyncToGenerator3.default)(function* () {
    let instance = yield abstractions.HasPrecompile.deployed();
    let receipt = yield instance.run();
    let txHash = receipt.tx;

    let bugger = yield _debugger2.default.forTx(txHash, {
      provider,
      files,
      contracts: artifacts
    });

    let session = bugger.connect();
    var finished; // is the trace finished?

    do {
      for (let _ref5 of TEST_CASES) {
        let { name, selector } = _ref5;

        let stepResult;

        try {
          stepResult = { value: session.view(selector) };
        } catch (e) {
          stepResult = { error: e };
        }

        results[name].push(stepResult);
      }

      session.advance();
      finished = session.view(_selectors4.default.finished);
    } while (!finished);
  }));

  before("remove final step results", () => {
    // since these include one step past end of trace
    for (let _ref6 of TEST_CASES) {
      let { name } = _ref6;

      results[name].pop();
    }
  });

  it("never fails to know the trace step", (0, _asyncToGenerator3.default)(function* () {
    // remove last item (known to be undefined)
    const result = results["trace.step"];

    for (let step of result) {
      if (step.error) {
        throw step.error;
      }

      _chai.assert.isOk(step.value);
    }
  }));

  it("never fails to know EVM context", (0, _asyncToGenerator3.default)(function* () {
    const result = results["evm.current.context"];

    for (let step of result) {
      if (step.error) {
        throw step.error;
      }

      _chai.assert.isOk(step.value);
      _chai.assert.property(step.value, "context");
    }
  }));

  it("never throws an exception for missing source range", (0, _asyncToGenerator3.default)(function* () {
    const result = results["solidity.current.sourceRange"];

    for (let step of result) {
      if (step.error) {
        throw step.error;
      }

      _chai.assert.isOk(step.value);
    }
  }));
});

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _asyncToGenerator2 = __webpack_require__(1);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _chai = __webpack_require__(4);

var _ganacheCore = __webpack_require__(6);

var _ganacheCore2 = _interopRequireDefault(_ganacheCore);

var _helpers = __webpack_require__(5);

var _debugger = __webpack_require__(7);

var _debugger2 = _interopRequireDefault(_debugger);

var _selectors = __webpack_require__(3);

var _selectors2 = _interopRequireDefault(_selectors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("test:reset"); // eslint-disable-line no-unused-vars

const __SETSTHINGS = `
pragma solidity ~0.5;

contract SetsThings {
  int x;
  int y;
  int z;
  int w;
  function run() public {
    x = 1;
    y = 2;
    z = 3;
    w = 4;
  }
}
`;

let sources = {
  "SetsThings.sol": __SETSTHINGS
};

describe("Reset Button", function () {
  var provider;

  var abstractions;
  var artifacts;
  var files;

  before("Create Provider", (0, _asyncToGenerator3.default)(function* () {
    provider = _ganacheCore2.default.provider({ seed: "debugger", gasLimit: 7000000 });
  }));

  before("Prepare contracts and artifacts", (0, _asyncToGenerator3.default)(function* () {
    this.timeout(30000);

    let prepared = yield (0, _helpers.prepareContracts)(provider, sources);
    abstractions = prepared.abstractions;
    artifacts = prepared.artifacts;
    files = prepared.files;
  }));

  it("Correctly resets after finishing", (0, _asyncToGenerator3.default)(function* () {
    let instance = yield abstractions.SetsThings.deployed();
    let receipt = yield instance.run();
    let txHash = receipt.tx;

    let bugger = yield _debugger2.default.forTx(txHash, {
      provider,
      files,
      contracts: artifacts
    });

    let session = bugger.connect();
    let sourceId = session.view(_selectors2.default.current.source).id;

    let variables = [];
    variables[0] = []; //collected during 1st run
    variables[1] = []; //collected during 2nd run

    variables[0].push((yield session.variables()));
    session.addBreakpoint({ sourceId, line: 10 });
    session.continueUntilBreakpoint(); //advance to line 10
    variables[0].push((yield session.variables()));
    session.continueUntilBreakpoint(); //advance to the end
    variables[0].push((yield session.variables()));

    //now, reset and do it again
    session.reset();

    variables[1].push((yield session.variables()));
    session.continueUntilBreakpoint(); //advance to line 10
    variables[1].push((yield session.variables()));
    session.continueUntilBreakpoint(); //advance to the end
    variables[1].push((yield session.variables()));

    _chai.assert.deepEqual(variables[1], variables[0]);
  }));
});

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _asyncToGenerator2 = __webpack_require__(1);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _debug = __webpack_require__(0);

var _debug2 = _interopRequireDefault(_debug);

var _chai = __webpack_require__(4);

var _ganacheCore = __webpack_require__(6);

var _ganacheCore2 = _interopRequireDefault(_ganacheCore);

var _helpers = __webpack_require__(5);

var _debugger = __webpack_require__(7);

var _debugger2 = _interopRequireDefault(_debugger);

var _selectors = __webpack_require__(3);

var _selectors2 = _interopRequireDefault(_selectors);

var _selectors3 = __webpack_require__(11);

var _selectors4 = _interopRequireDefault(_selectors3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("test:solidity"); // eslint-disable-line no-unused-vars

const __SINGLE_CALL = `
pragma solidity ~0.5;

contract SingleCall {
  event Called();
  event Done();

  function run() public {
    emit Called();
  }

  function runSha() public {
    emit Called();
    sha256("hello world!");
    emit Done();
  }
}
`;

const __NESTED_CALL = `pragma solidity ~0.5;

contract NestedCall {
  event First();
  event Second();

  // run()
  //   first()    1
  //     inner()  2
  //       event  3
  //              2
  //   second     1
  //     event    2
  //              1
  function run() public {
    first();
    second();
  }

  function first() public {
    inner();
  }

  function inner() public {
    emit First();
  }

  function second() public {
    emit Second();
  }
}
`;

let sources = {
  "SingleCall.sol": __SINGLE_CALL,
  "NestedCall.sol": __NESTED_CALL
};

describe("Solidity Debugging", function () {
  var provider;

  var abstractions;
  var artifacts;
  var files;

  before("Create Provider", (0, _asyncToGenerator3.default)(function* () {
    provider = _ganacheCore2.default.provider({ seed: "debugger", gasLimit: 7000000 });
  }));

  before("Prepare contracts and artifacts", (0, _asyncToGenerator3.default)(function* () {
    this.timeout(30000);

    let prepared = yield (0, _helpers.prepareContracts)(provider, sources);
    abstractions = prepared.abstractions;
    artifacts = prepared.artifacts;
    files = prepared.files;
  }));

  it("exposes functionality to stop at breakpoints", (0, _asyncToGenerator3.default)(function* () {
    // prepare
    let instance = yield abstractions.NestedCall.deployed();
    let receipt = yield instance.run();
    let txHash = receipt.tx;

    let bugger = yield _debugger2.default.forTx(txHash, {
      provider,
      files,
      contracts: artifacts
    });

    let session = bugger.connect();

    // at `second();`
    let source = yield session.view(_selectors2.default.current.source);
    let breakpoint = { sourceId: source.id, line: 16 };

    session.addBreakpoint(breakpoint);

    do {
      session.continueUntilBreakpoint();

      if (!session.view(_selectors4.default.finished)) {
        let range = yield session.view(_selectors2.default.current.sourceRange);
        _chai.assert.equal(range.lines.start.line, 16);
      }
    } while (!session.view(_selectors4.default.finished));
  }));

  describe("Function Depth", function () {
    it("remains at 1 in absence of inner function calls", (0, _asyncToGenerator3.default)(function* () {
      const maxExpected = 1;

      let instance = yield abstractions.SingleCall.deployed();
      let receipt = yield instance.run();
      let txHash = receipt.tx;

      let bugger = yield _debugger2.default.forTx(txHash, {
        provider,
        files,
        contracts: artifacts
      });

      let session = bugger.connect();
      var finished;

      do {
        session.stepNext();
        finished = session.view(_selectors4.default.finished);

        let actual = session.view(_selectors2.default.current.functionDepth);

        _chai.assert.isAtMost(actual, maxExpected);
      } while (!finished);
    }));

    it("is unaffected by precompiles", (0, _asyncToGenerator3.default)(function* () {
      const numExpected = 1;

      let instance = yield abstractions.SingleCall.deployed();
      let receipt = yield instance.runSha();
      let txHash = receipt.tx;

      let bugger = yield _debugger2.default.forTx(txHash, {
        provider,
        files,
        contracts: artifacts
      });

      let session = bugger.connect();

      let hasBegun = false; //we don't check until it's nonzero, since it
      //starts as zero now

      while (!session.view(_selectors4.default.finished)) {
        let actual = session.view(_selectors2.default.current.functionDepth);
        if (actual !== 0) {
          hasBegun = true;
        }
        if (hasBegun) {
          _chai.assert.equal(actual, numExpected);
        }

        session.stepNext();
      }

      (0, _chai.assert)(hasBegun); //check for non-vacuity of the above tests
    }));

    it("spelunks correctly", (0, _asyncToGenerator3.default)(function* () {
      // prepare
      let instance = yield abstractions.NestedCall.deployed();
      let receipt = yield instance.run();
      let txHash = receipt.tx;

      let bugger = yield _debugger2.default.forTx(txHash, {
        provider,
        files,
        contracts: artifacts
      });

      let session = bugger.connect();

      // follow functionDepth values in list
      // see source above
      let expectedDepthSequence = [0, 1, 2, 3, 2, 1, 2, 1, -1];
      //end at -1 due to losing 2 from contract method return
      let actualSequence = [session.view(_selectors2.default.current.functionDepth)];

      var finished;

      do {
        session.stepNext();
        finished = session.view(_selectors4.default.finished);

        let currentDepth = session.view(_selectors2.default.current.functionDepth);
        let lastKnown = actualSequence[actualSequence.length - 1];

        if (currentDepth !== lastKnown) {
          actualSequence.push(currentDepth);
        }
      } while (!finished);

      _chai.assert.deepEqual(actualSequence, expectedDepthSequence);
    }));
  });
});

/***/ })
/******/ ]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,