{
  "contractName": "CappedToken",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "mintingFinished",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_spender",
          "type": "address"
        },
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_from",
          "type": "address"
        },
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "cap",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_spender",
          "type": "address"
        },
        {
          "name": "_subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseApproval",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "finishMinting",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_spender",
          "type": "address"
        },
        {
          "name": "_addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseApproval",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_owner",
          "type": "address"
        },
        {
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "_cap",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "MintFinished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "previousOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipRenounced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "0x60806040526003805460a060020a60ff021916905534801561002057600080fd5b50604051602080610b8e8339810180604052602081101561004057600080fd5b505160038054600160a060020a031916331790556000811161006157600080fd5b600455610b1b806100736000396000f3fe608060405234801561001057600080fd5b5060043610610112576000357c01000000000000000000000000000000000000000000000000000000009004806370a08231116100b4578063a9059cbb11610083578063a9059cbb1461026b578063d73dd62314610297578063dd62ed3e146102c3578063f2fde38b146102f157610112565b806370a082311461020f578063715018a6146102355780637d64bcb41461023f5780638da5cb5b1461024757610112565b806323b872dd116100f057806323b872dd14610179578063355274ea146101af57806340c10f19146101b757806366188463146101e357610112565b806305d2035b14610117578063095ea7b31461013357806318160ddd1461015f575b600080fd5b61011f610317565b604080519115158252519081900360200190f35b61011f6004803603604081101561014957600080fd5b50600160a060020a038135169060200135610338565b61016761039e565b60408051918252519081900360200190f35b61011f6004803603606081101561018f57600080fd5b50600160a060020a038135811691602081013590911690604001356103a4565b610167610519565b61011f600480360360408110156101cd57600080fd5b50600160a060020a03813516906020013561051f565b61011f600480360360408110156101f957600080fd5b50600160a060020a038135169060200135610555565b6101676004803603602081101561022557600080fd5b5035600160a060020a0316610644565b61023d61065f565b005b61011f6106cd565b61024f610773565b60408051600160a060020a039092168252519081900360200190f35b61011f6004803603604081101561028157600080fd5b50600160a060020a038135169060200135610782565b61011f600480360360408110156102ad57600080fd5b50600160a060020a038135169060200135610861565b610167600480360360408110156102d957600080fd5b50600160a060020a03813581169160200135166108fa565b61023d6004803603602081101561030757600080fd5b5035600160a060020a0316610925565b60035474010000000000000000000000000000000000000000900460ff1681565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60015490565b600160a060020a0383166000908152602081905260408120548211156103c957600080fd5b600160a060020a03841660009081526002602090815260408083203384529091529020548211156103f957600080fd5b600160a060020a038316151561040e57600080fd5b600160a060020a038416600090815260208190526040902054610437908363ffffffff61094816565b600160a060020a03808616600090815260208190526040808220939093559085168152205461046c908363ffffffff61095a16565b600160a060020a038085166000908152602081815260408083209490945591871681526002825282812033825290915220546104ae908363ffffffff61094816565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b60045481565b60006004546105398360015461095a90919063ffffffff16565b111561054457600080fd5b61054e838361096d565b9392505050565b336000908152600260209081526040808320600160a060020a03861684529091528120548083106105a957336000908152600260209081526040808320600160a060020a03881684529091528120556105de565b6105b9818463ffffffff61094816565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526020819052604090205490565b600354600160a060020a0316331461067657600080fd5b600354604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26003805473ffffffffffffffffffffffffffffffffffffffff19169055565b600354600090600160a060020a031633146106e757600080fd5b60035474010000000000000000000000000000000000000000900460ff161561070f57600080fd5b6003805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b600354600160a060020a031681565b3360009081526020819052604081205482111561079e57600080fd5b600160a060020a03831615156107b357600080fd5b336000908152602081905260409020546107d3908363ffffffff61094816565b3360009081526020819052604080822092909255600160a060020a03851681522054610805908363ffffffff61095a16565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b336000908152600260209081526040808320600160a060020a0386168452909152812054610895908363ffffffff61095a16565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600354600160a060020a0316331461093c57600080fd5b61094581610a71565b50565b60008282111561095457fe5b50900390565b8181018281101561096757fe5b92915050565b60035460009074010000000000000000000000000000000000000000900460ff161561099857600080fd5b6001546109ab908363ffffffff61095a16565b600155600160a060020a0383166000908152602081905260409020546109d7908363ffffffff61095a16565b600160a060020a03841660008181526020818152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a038516916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a350600192915050565b600160a060020a0381161515610a8657600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905556fea165627a7a72305820e856adece2a2a03799af73b6995f54b9576ceae0653f1d28881b8cf90318d72f0029",
  "deployedBytecode": "0x608060405234801561001057600080fd5b5060043610610112576000357c01000000000000000000000000000000000000000000000000000000009004806370a08231116100b4578063a9059cbb11610083578063a9059cbb1461026b578063d73dd62314610297578063dd62ed3e146102c3578063f2fde38b146102f157610112565b806370a082311461020f578063715018a6146102355780637d64bcb41461023f5780638da5cb5b1461024757610112565b806323b872dd116100f057806323b872dd14610179578063355274ea146101af57806340c10f19146101b757806366188463146101e357610112565b806305d2035b14610117578063095ea7b31461013357806318160ddd1461015f575b600080fd5b61011f610317565b604080519115158252519081900360200190f35b61011f6004803603604081101561014957600080fd5b50600160a060020a038135169060200135610338565b61016761039e565b60408051918252519081900360200190f35b61011f6004803603606081101561018f57600080fd5b50600160a060020a038135811691602081013590911690604001356103a4565b610167610519565b61011f600480360360408110156101cd57600080fd5b50600160a060020a03813516906020013561051f565b61011f600480360360408110156101f957600080fd5b50600160a060020a038135169060200135610555565b6101676004803603602081101561022557600080fd5b5035600160a060020a0316610644565b61023d61065f565b005b61011f6106cd565b61024f610773565b60408051600160a060020a039092168252519081900360200190f35b61011f6004803603604081101561028157600080fd5b50600160a060020a038135169060200135610782565b61011f600480360360408110156102ad57600080fd5b50600160a060020a038135169060200135610861565b610167600480360360408110156102d957600080fd5b50600160a060020a03813581169160200135166108fa565b61023d6004803603602081101561030757600080fd5b5035600160a060020a0316610925565b60035474010000000000000000000000000000000000000000900460ff1681565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60015490565b600160a060020a0383166000908152602081905260408120548211156103c957600080fd5b600160a060020a03841660009081526002602090815260408083203384529091529020548211156103f957600080fd5b600160a060020a038316151561040e57600080fd5b600160a060020a038416600090815260208190526040902054610437908363ffffffff61094816565b600160a060020a03808616600090815260208190526040808220939093559085168152205461046c908363ffffffff61095a16565b600160a060020a038085166000908152602081815260408083209490945591871681526002825282812033825290915220546104ae908363ffffffff61094816565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b60045481565b60006004546105398360015461095a90919063ffffffff16565b111561054457600080fd5b61054e838361096d565b9392505050565b336000908152600260209081526040808320600160a060020a03861684529091528120548083106105a957336000908152600260209081526040808320600160a060020a03881684529091528120556105de565b6105b9818463ffffffff61094816565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526020819052604090205490565b600354600160a060020a0316331461067657600080fd5b600354604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26003805473ffffffffffffffffffffffffffffffffffffffff19169055565b600354600090600160a060020a031633146106e757600080fd5b60035474010000000000000000000000000000000000000000900460ff161561070f57600080fd5b6003805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b600354600160a060020a031681565b3360009081526020819052604081205482111561079e57600080fd5b600160a060020a03831615156107b357600080fd5b336000908152602081905260409020546107d3908363ffffffff61094816565b3360009081526020819052604080822092909255600160a060020a03851681522054610805908363ffffffff61095a16565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b336000908152600260209081526040808320600160a060020a0386168452909152812054610895908363ffffffff61095a16565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600354600160a060020a0316331461093c57600080fd5b61094581610a71565b50565b60008282111561095457fe5b50900390565b8181018281101561096757fe5b92915050565b60035460009074010000000000000000000000000000000000000000900460ff161561099857600080fd5b6001546109ab908363ffffffff61095a16565b600155600160a060020a0383166000908152602081905260409020546109d7908363ffffffff61095a16565b600160a060020a03841660008181526020818152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a038516916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a350600192915050565b600160a060020a0381161515610a8657600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905556fea165627a7a72305820e856adece2a2a03799af73b6995f54b9576ceae0653f1d28881b8cf90318d72f0029",
  "sourceMap": "151:560:9:-;;;470:35:33;;;-1:-1:-1;;;;;;470:35:33;;;217:77:9;5:2:-1;;;;30:1;27;20:12;5:2;217:77:9;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;217:77:9;565:5:42;:18;;-1:-1:-1;;;;;;565:18:42;573:10;565:18;;;:5;264:8:9;;256:17;;;;;;279:3;:10;151:560;;;;;;",
  "deployedSourceMap": "151:560:9:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;151:560:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;470:35:33;;;:::i;:::-;;;;;;;;;;;;;;;;;;1858:188:34;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;1858:188:34;;;;;;;;:::i;418:83:29:-;;;:::i;:::-;;;;;;;;;;;;;;;;770:470:34;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;770:470:34;;;;;;;;;;;;;;;;;:::i;194:18:9:-;;;:::i;530:178::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;530:178:9;;;;;;;;:::i;3723:432:34:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;3723:432:34;;;;;;;;:::i;1178:99:29:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1178:99:29;-1:-1:-1;;;;;1178:99:29;;:::i;999:111:42:-;;;:::i;:::-;;1213:140:33;;;:::i;236:20:42:-;;;:::i;:::-;;;;-1:-1:-1;;;;;236:20:42;;;;;;;;;;;;;;655:321:29;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;655:321:29;;;;;;;;:::i;2970:296:34:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;2970:296:34;;;;;;;;:::i;2365:153::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;2365:153:34;;;;;;;;;;:::i;1272:103:42:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1272:103:42;-1:-1:-1;;;;;1272:103:42;;:::i;470:35:33:-;;;;;;;;;:::o;1858:188:34:-;1945:10;1925:4;1937:19;;;:7;:19;;;;;;;;-1:-1:-1;;;;;1937:29:34;;;;;;;;;;;:38;;;1986;;;;;;;1925:4;;1937:29;;1945:10;;1986:38;;;;;;;;-1:-1:-1;2037:4:34;1858:188;;;;:::o;418:83:29:-;484:12;;418:83;:::o;770:470:34:-;-1:-1:-1;;;;;908:15:34;;876:4;908:15;;;;;;;;;;;898:25;;;890:34;;;;;;-1:-1:-1;;;;;948:14:34;;;;;;:7;:14;;;;;;;;963:10;948:26;;;;;;;;938:36;;;930:45;;;;;;-1:-1:-1;;;;;989:17:34;;;;981:26;;;;;;-1:-1:-1;;;;;1032:15:34;;:8;:15;;;;;;;;;;;:27;;1052:6;1032:27;:19;:27;:::i;:::-;-1:-1:-1;;;;;1014:15:34;;;:8;:15;;;;;;;;;;;:45;;;;1081:13;;;;;;;:25;;1099:6;1081:25;:17;:25;:::i;:::-;-1:-1:-1;;;;;1065:13:34;;;:8;:13;;;;;;;;;;;:41;;;;1141:14;;;;;:7;:14;;;;;1156:10;1141:26;;;;;;;:38;;1172:6;1141:38;:30;:38;:::i;:::-;-1:-1:-1;;;;;1112:14:34;;;;;;;:7;:14;;;;;;;;1127:10;1112:26;;;;;;;;:67;;;;1190:28;;;;;;;;;;;1112:14;;1190:28;;;;;;;;;;;-1:-1:-1;1231:4:34;770:470;;;;;:::o;194:18:9:-;;;;:::o;530:178::-;610:4;661:3;;632:25;649:7;632:12;;:16;;:25;;;;:::i;:::-;:32;;624:41;;;;;;679:24;690:3;695:7;679:10;:24::i;:::-;672:31;530:178;-1:-1:-1;;;530:178:9:o;3723:432:34:-;3870:10;3829:4;3862:19;;;:7;:19;;;;;;;;-1:-1:-1;;;;;3862:29:34;;;;;;;;;;3901:28;;;3897:165;;3947:10;3971:1;3939:19;;;:7;:19;;;;;;;;-1:-1:-1;;;;;3939:29:34;;;;;;;;;:33;3897:165;;;4025:30;:8;4038:16;4025:30;:12;:30;:::i;:::-;4001:10;3993:19;;;;:7;:19;;;;;;;;-1:-1:-1;;;;;3993:29:34;;;;;;;;;:62;3897:165;4081:10;4103:19;;;;:7;:19;;;;;;;;-1:-1:-1;;;;;4072:61:34;;4103:29;;;;;;;;;;;4072:61;;;;;;;;;4081:10;4072:61;;;;;;;;;;;-1:-1:-1;4146:4:34;;3723:432;-1:-1:-1;;;3723:432:34:o;1178:99:29:-;-1:-1:-1;;;;;1256:16:29;1234:7;1256:16;;;;;;;;;;;;1178:99::o;999:111:42:-;717:5;;-1:-1:-1;;;;;717:5:42;703:10;:19;695:28;;;;;;1075:5;;1056:25;;-1:-1:-1;;;;;1075:5:42;;;;1056:25;;1075:5;;1056:25;1087:5;:18;;-1:-1:-1;;1087:18:42;;;999:111::o;1213:140:33:-;717:5:42;;1272:4:33;;-1:-1:-1;;;;;717:5:42;703:10;:19;695:28;;;;;;545:15:33;;;;;;;544:16;536:25;;;;;;1284:15;:22;;-1:-1:-1;;1284:22:33;;;;;1317:14;;;;1284:22;;1317:14;-1:-1:-1;1344:4:33;1213:140;:::o;236:20:42:-;;;-1:-1:-1;;;;;236:20:42;;:::o;655:321:29:-;757:10;718:4;748:20;;;;;;;;;;;738:30;;;730:39;;;;;;-1:-1:-1;;;;;783:17:29;;;;775:26;;;;;;840:10;831:8;:20;;;;;;;;;;;:32;;856:6;831:32;:24;:32;:::i;:::-;817:10;808:8;:20;;;;;;;;;;;:55;;;;-1:-1:-1;;;;;885:13:29;;;;;;:25;;903:6;885:25;:17;:25;:::i;:::-;-1:-1:-1;;;;;869:13:29;;:8;:13;;;;;;;;;;;;:41;;;;921:33;;;;;;;869:13;;930:10;;921:33;;;;;;;;;;-1:-1:-1;967:4:29;655:321;;;;:::o;2970:296:34:-;3133:10;3071:4;3125:19;;;:7;:19;;;;;;;;-1:-1:-1;;;;;3125:29:34;;;;;;;;;;:46;;3159:11;3125:46;:33;:46;:::i;:::-;3093:10;3085:19;;;;:7;:19;;;;;;;;-1:-1:-1;;;;;3085:29:34;;;;;;;;;;;;:87;;;3183:61;;;;;;3085:29;;3183:61;;;;;;;;;;;-1:-1:-1;3257:4:34;2970:296;;;;:::o;2365:153::-;-1:-1:-1;;;;;2488:15:34;;;2464:7;2488:15;;;:7;:15;;;;;;;;:25;;;;;;;;;;;;;2365:153::o;1272:103:42:-;717:5;;-1:-1:-1;;;;;717:5:42;703:10;:19;695:28;;;;;;1341:29;1360:9;1341:18;:29::i;:::-;1272:103;:::o;1058:116:41:-;1118:7;1140:8;;;;1133:16;;;;-1:-1:-1;1162:7:41;;;1058:116::o;1236:128::-;1317:7;;;1337;;;;1330:15;;;;1236:128;;;;:::o;809:290:33:-;545:15;;901:4;;545:15;;;;;544:16;536:25;;;;;;930:12;;:25;;947:7;930:25;:16;:25;:::i;:::-;915:12;:40;-1:-1:-1;;;;;977:13:33;;:8;:13;;;;;;;;;;;:26;;995:7;977:26;:17;:26;:::i;:::-;-1:-1:-1;;;;;961:13:33;;:8;:13;;;;;;;;;;;;:42;;;;1014:18;;;;;;;961:13;;1014:18;;;;;;;;;1043:34;;;;;;;;-1:-1:-1;;;;;1043:34:33;;;1060:1;;1043:34;;;;;;;;;-1:-1:-1;1090:4:33;809:290;;;;:::o;1510:171:42:-;-1:-1:-1;;;;;1580:23:42;;;;1572:32;;;;;;1636:5;;1615:38;;-1:-1:-1;;;;;1615:38:42;;;;1636:5;;1615:38;;1636:5;;1615:38;1659:5;:17;;-1:-1:-1;;1659:17:42;-1:-1:-1;;;;;1659:17:42;;;;;;;;;;1510:171::o",
  "source": "pragma solidity 0.5.3;\n\nimport \"contracts/zeppelin/ERC20/MintableToken.sol\";\n\n\n/**\n * @title Capped token\n * @dev Mintable token with a token cap.\n */\ncontract CappedToken is MintableToken {\n\n  uint256 public cap;\n\n  constructor(uint256 _cap) public {\n    require(_cap > 0);\n    cap = _cap;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    public\n    returns (bool)\n  {\n    require(totalSupply_.add(_amount) <= cap);\n\n    return super.mint(_to, _amount);\n  }\n\n}\n",
  "sourcePath": "/home/stefan/Work/RobInTheHood/contracts/contracts/zeppelin/ERC20/CappedToken.sol",
  "ast": {
    "absolutePath": "/home/stefan/Work/RobInTheHood/contracts/contracts/zeppelin/ERC20/CappedToken.sol",
    "exportedSymbols": {
      "CappedToken": [
        1089
      ]
    },
    "id": 1090,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1042,
        "literals": [
          "solidity",
          "0.5",
          ".3"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:22:9"
      },
      {
        "absolutePath": "contracts/zeppelin/ERC20/MintableToken.sol",
        "file": "contracts/zeppelin/ERC20/MintableToken.sol",
        "id": 1043,
        "nodeType": "ImportDirective",
        "scope": 1090,
        "sourceUnit": 4147,
        "src": "24:52:9",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1044,
              "name": "MintableToken",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 4146,
              "src": "175:13:9",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MintableToken_$4146",
                "typeString": "contract MintableToken"
              }
            },
            "id": 1045,
            "nodeType": "InheritanceSpecifier",
            "src": "175:13:9"
          }
        ],
        "contractDependencies": [
          3909,
          3952,
          3984,
          4146,
          4393,
          5532
        ],
        "contractKind": "contract",
        "documentation": "@title Capped token\n@dev Mintable token with a token cap.",
        "fullyImplemented": true,
        "id": 1089,
        "linearizedBaseContracts": [
          1089,
          4146,
          5532,
          4393,
          3909,
          3952,
          3984
        ],
        "name": "CappedToken",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 1047,
            "name": "cap",
            "nodeType": "VariableDeclaration",
            "scope": 1089,
            "src": "194:18:9",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 1046,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "194:7:9",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1062,
              "nodeType": "Block",
              "src": "250:44:9",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1055,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 1053,
                          "name": "_cap",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1049,
                          "src": "264:4:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 1054,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "271:1:9",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "264:8:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 1052,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        5550,
                        5551
                      ],
                      "referencedDeclaration": 5550,
                      "src": "256:7:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 1056,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "256:17:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1057,
                  "nodeType": "ExpressionStatement",
                  "src": "256:17:9"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1060,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1058,
                      "name": "cap",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1047,
                      "src": "279:3:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 1059,
                      "name": "_cap",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1049,
                      "src": "285:4:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "279:10:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1061,
                  "nodeType": "ExpressionStatement",
                  "src": "279:10:9"
                }
              ]
            },
            "documentation": null,
            "id": 1063,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1050,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1049,
                  "name": "_cap",
                  "nodeType": "VariableDeclaration",
                  "scope": 1063,
                  "src": "229:12:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1048,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "229:7:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "228:14:9"
            },
            "returnParameters": {
              "id": 1051,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "250:0:9"
            },
            "scope": 1089,
            "src": "217:77:9",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1087,
              "nodeType": "Block",
              "src": "618:90:9",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1078,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 1075,
                              "name": "_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1067,
                              "src": "649:7:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 1073,
                              "name": "totalSupply_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3828,
                              "src": "632:12:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 1074,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "add",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 5445,
                            "src": "632:16:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 1076,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "632:25:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 1077,
                          "name": "cap",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1047,
                          "src": "661:3:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "632:32:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 1072,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        5550,
                        5551
                      ],
                      "referencedDeclaration": 5550,
                      "src": "624:7:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 1079,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "624:41:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1080,
                  "nodeType": "ExpressionStatement",
                  "src": "624:41:9"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1083,
                        "name": "_to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1065,
                        "src": "690:3:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1084,
                        "name": "_amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1067,
                        "src": "695:7:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 1081,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5596,
                        "src": "679:5:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_CappedToken_$1089",
                          "typeString": "contract super CappedToken"
                        }
                      },
                      "id": 1082,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "mint",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 4126,
                      "src": "679:10:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (address,uint256) returns (bool)"
                      }
                    },
                    "id": 1085,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "679:24:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 1071,
                  "id": 1086,
                  "nodeType": "Return",
                  "src": "672:31:9"
                }
              ]
            },
            "documentation": "@dev Function to mint tokens\n@param _to The address that will receive the minted tokens.\n@param _amount The amount of tokens to mint.\n@return A boolean that indicates if the operation was successful.",
            "id": 1088,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mint",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1068,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1065,
                  "name": "_to",
                  "nodeType": "VariableDeclaration",
                  "scope": 1088,
                  "src": "549:11:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1064,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "549:7:9",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1067,
                  "name": "_amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 1088,
                  "src": "566:15:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1066,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "566:7:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "543:42:9"
            },
            "returnParameters": {
              "id": 1071,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1070,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1088,
                  "src": "610:4:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1069,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "610:4:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "609:6:9"
            },
            "scope": 1089,
            "src": "530:178:9",
            "stateMutability": "nonpayable",
            "superFunction": 4126,
            "visibility": "public"
          }
        ],
        "scope": 1090,
        "src": "151:560:9"
      }
    ],
    "src": "0:712:9"
  },
  "legacyAST": {
    "absolutePath": "/home/stefan/Work/RobInTheHood/contracts/contracts/zeppelin/ERC20/CappedToken.sol",
    "exportedSymbols": {
      "CappedToken": [
        1089
      ]
    },
    "id": 1090,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1042,
        "literals": [
          "solidity",
          "0.5",
          ".3"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:22:9"
      },
      {
        "absolutePath": "contracts/zeppelin/ERC20/MintableToken.sol",
        "file": "contracts/zeppelin/ERC20/MintableToken.sol",
        "id": 1043,
        "nodeType": "ImportDirective",
        "scope": 1090,
        "sourceUnit": 4147,
        "src": "24:52:9",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1044,
              "name": "MintableToken",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 4146,
              "src": "175:13:9",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MintableToken_$4146",
                "typeString": "contract MintableToken"
              }
            },
            "id": 1045,
            "nodeType": "InheritanceSpecifier",
            "src": "175:13:9"
          }
        ],
        "contractDependencies": [
          3909,
          3952,
          3984,
          4146,
          4393,
          5532
        ],
        "contractKind": "contract",
        "documentation": "@title Capped token\n@dev Mintable token with a token cap.",
        "fullyImplemented": true,
        "id": 1089,
        "linearizedBaseContracts": [
          1089,
          4146,
          5532,
          4393,
          3909,
          3952,
          3984
        ],
        "name": "CappedToken",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 1047,
            "name": "cap",
            "nodeType": "VariableDeclaration",
            "scope": 1089,
            "src": "194:18:9",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 1046,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "194:7:9",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1062,
              "nodeType": "Block",
              "src": "250:44:9",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1055,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 1053,
                          "name": "_cap",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1049,
                          "src": "264:4:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 1054,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "271:1:9",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "264:8:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 1052,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        5550,
                        5551
                      ],
                      "referencedDeclaration": 5550,
                      "src": "256:7:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 1056,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "256:17:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1057,
                  "nodeType": "ExpressionStatement",
                  "src": "256:17:9"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1060,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1058,
                      "name": "cap",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1047,
                      "src": "279:3:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 1059,
                      "name": "_cap",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1049,
                      "src": "285:4:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "279:10:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1061,
                  "nodeType": "ExpressionStatement",
                  "src": "279:10:9"
                }
              ]
            },
            "documentation": null,
            "id": 1063,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1050,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1049,
                  "name": "_cap",
                  "nodeType": "VariableDeclaration",
                  "scope": 1063,
                  "src": "229:12:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1048,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "229:7:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "228:14:9"
            },
            "returnParameters": {
              "id": 1051,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "250:0:9"
            },
            "scope": 1089,
            "src": "217:77:9",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1087,
              "nodeType": "Block",
              "src": "618:90:9",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1078,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 1075,
                              "name": "_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1067,
                              "src": "649:7:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 1073,
                              "name": "totalSupply_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3828,
                              "src": "632:12:9",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 1074,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "add",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 5445,
                            "src": "632:16:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 1076,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "632:25:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 1077,
                          "name": "cap",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1047,
                          "src": "661:3:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "632:32:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 1072,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        5550,
                        5551
                      ],
                      "referencedDeclaration": 5550,
                      "src": "624:7:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 1079,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "624:41:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1080,
                  "nodeType": "ExpressionStatement",
                  "src": "624:41:9"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1083,
                        "name": "_to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1065,
                        "src": "690:3:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1084,
                        "name": "_amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1067,
                        "src": "695:7:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 1081,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5596,
                        "src": "679:5:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_CappedToken_$1089",
                          "typeString": "contract super CappedToken"
                        }
                      },
                      "id": 1082,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "mint",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 4126,
                      "src": "679:10:9",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (address,uint256) returns (bool)"
                      }
                    },
                    "id": 1085,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "679:24:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 1071,
                  "id": 1086,
                  "nodeType": "Return",
                  "src": "672:31:9"
                }
              ]
            },
            "documentation": "@dev Function to mint tokens\n@param _to The address that will receive the minted tokens.\n@param _amount The amount of tokens to mint.\n@return A boolean that indicates if the operation was successful.",
            "id": 1088,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mint",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1068,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1065,
                  "name": "_to",
                  "nodeType": "VariableDeclaration",
                  "scope": 1088,
                  "src": "549:11:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1064,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "549:7:9",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1067,
                  "name": "_amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 1088,
                  "src": "566:15:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1066,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "566:7:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "543:42:9"
            },
            "returnParameters": {
              "id": 1071,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1070,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1088,
                  "src": "610:4:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1069,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "610:4:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "609:6:9"
            },
            "scope": 1089,
            "src": "530:178:9",
            "stateMutability": "nonpayable",
            "superFunction": 4126,
            "visibility": "public"
          }
        ],
        "scope": 1090,
        "src": "151:560:9"
      }
    ],
    "src": "0:712:9"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.3+commit.10d17f24.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.1",
  "updatedAt": "2019-04-16T17:38:38.769Z",
  "devdoc": {
    "details": "Mintable token with a token cap.",
    "methods": {
      "allowance(address,address)": {
        "details": "Function to check the amount of tokens that an owner allowed to a spender.",
        "params": {
          "_owner": "address The address which owns the funds.",
          "_spender": "address The address which will spend the funds."
        },
        "return": "A uint256 specifying the amount of tokens still available for the spender."
      },
      "approve(address,uint256)": {
        "details": "Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729",
        "params": {
          "_spender": "The address which will spend the funds.",
          "_value": "The amount of tokens to be spent."
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address.",
        "params": {
          "_owner": "The address to query the the balance of."
        },
        "return": "An uint256 representing the amount owned by the passed address."
      },
      "decreaseApproval(address,uint256)": {
        "details": "Decrease the amount of tokens that an owner allowed to a spender. approve should be called when allowed[_spender] == 0. To decrement allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol",
        "params": {
          "_spender": "The address which will spend the funds.",
          "_subtractedValue": "The amount of tokens to decrease the allowance by."
        }
      },
      "finishMinting()": {
        "details": "Function to stop minting new tokens.",
        "return": "True if the operation was successful."
      },
      "increaseApproval(address,uint256)": {
        "details": "Increase the amount of tokens that an owner allowed to a spender. approve should be called when allowed[_spender] == 0. To increment allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol",
        "params": {
          "_addedValue": "The amount of tokens to increase the allowance by.",
          "_spender": "The address which will spend the funds."
        }
      },
      "mint(address,uint256)": {
        "details": "Function to mint tokens",
        "params": {
          "_amount": "The amount of tokens to mint.",
          "_to": "The address that will receive the minted tokens."
        },
        "return": "A boolean that indicates if the operation was successful."
      },
      "renounceOwnership()": {
        "details": "Allows the current owner to relinquish control of the contract."
      },
      "totalSupply()": {
        "details": "Total number of tokens in existence"
      },
      "transfer(address,uint256)": {
        "details": "Transfer token for a specified address",
        "params": {
          "_to": "The address to transfer to.",
          "_value": "The amount to be transferred."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfer tokens from one address to another",
        "params": {
          "_from": "address The address which you want to send tokens from",
          "_to": "address The address which you want to transfer to",
          "_value": "uint256 the amount of tokens to be transferred"
        }
      },
      "transferOwnership(address)": {
        "details": "Allows the current owner to transfer control of the contract to a newOwner.",
        "params": {
          "_newOwner": "The address to transfer ownership to."
        }
      }
    },
    "title": "Capped token"
  },
  "userdoc": {
    "methods": {
      "renounceOwnership()": {
        "notice": "Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore."
      }
    }
  }
}